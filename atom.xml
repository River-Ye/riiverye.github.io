<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://riverye.com/"/>
  <updated>2020-09-06T15:41:50.888Z</updated>
  <id>https://riverye.com/</id>
  
  <author>
    <name>River-Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day01 - 不免俗一定要來一下的參賽宣言</title>
    <link href="https://riverye.com/2020/09/06/Day01-%E4%B8%8D%E5%85%8D%E4%BF%97%E4%B8%80%E5%AE%9A%E8%A6%81%E4%BE%86%E4%B8%80%E4%B8%8B%E7%9A%84%E5%8F%83%E8%B3%BD%E5%AE%A3%E8%A8%80/"/>
    <id>https://riverye.com/2020/09/06/Day01-不免俗一定要來一下的參賽宣言/</id>
    <published>2020-09-05T16:00:00.000Z</published>
    <updated>2020-09-06T15:41:50.888Z</updated>
    
    <content type="html"><![CDATA[<p>轉眼一年過去了，時間過好快(怕<br>轉職後工作也 10 個月左右，<br>過程中有蠻多可以寫成文章，<br><s>但因為太懶而沒寫(逃</s><br>一直很苦惱要寫些什麼，很擔心自己寫不出所以然，或寫太淺，<br>不如就來點已知但還沒寫的文章、或想專研的部分好惹<br>期許自己能夠完賽 (其實沒什麼把握，且沒什麼囤文章..</p><h2 id="這次直接來大雜燴可能會有">這次直接來大雜燴，「可能會有」：</h2><h3 id="1-開發工具介紹">1. 開發工具介紹</h3><h3 id="2-常用小技巧">2. 常用小技巧</h3><h3 id="3-一些-linux-相關">3. 一些 Linux 相關</h3><h3 id="4-ruby-on-rails-相關">4. Ruby on Rails 相關</h3><h3 id="5-臨時想到想寫的內容">5. 臨時想到想寫的內容</h3><hr><h2 id="目前想到的-30-天內容如下">目前想到的 30 天內容如下：</h2><h4 id="只有先想標題內容還沒產">只有先想標題，內容還沒產...</h4><p>Day01 - 不免俗一定要來一下的參賽宣言<br>Day02 - Chrome 的小技巧 - 內建截圖功能<br>Day03 - Chrome 的小技巧 - 內建 URL 轉 QRcode<br>Day04 - Mac 上常用的軟體 (iTerm、Dash、Alfred、Spectacle、Kap、GIPHY Capture)<br>Day05 - Mac、Chrome、iTerm2、Visual Studio Code 上常用的快捷鍵<br>Day06 - 一些常用 Linux 指令 - 1-7 - 基礎篇 (exit、pwd、ls、cd、touch、mkdir、rm、cp、scp、mv、sudo、man、help、clear、which、find)<br>Day07 - 一些常用 Linux 指令 - 2-7 (ps、top、htop、free、df、du、kill)<br>Day08 - 一些常用 Linux 指令 - 3-7 (cat、tac、head、tail、vi、sed)<br>Day09 - 一些常用 Linux 指令 - 4-7 (grep、rg、luit、iconv、cal、date)<br>Day10 - 一些常用 Linux 指令 - 5-7 (lsof、dig、curl、nc、nice、cpulimit)<br>Day11 - 一些 Linux 套件 - 6-7 - 實用篇 (fzf、tldr)<br>Day12 - 一些 Linux 套件 - 7-7 - 不實用篇 (cowsay、cmatrix)<br>Day13 - 一些 Git 指令<br>Day14 - Ruby on Rails 中的 N+1 與解法<br>Day15 - Ruby on Rails 中的 race condition 與解法<br>Day16 - Ruby on Rails 的介紹<br>Day17 - 在 Ruby on Rails 中使用 FFmpeg 處理影音轉檔上字幕<br>Day18 - Redis 的介紹與應用<br>Day19 - Sidekiq 的介紹與應用<br>Day20 - Resque 的介紹與應用<br>Day21 - 想到再說<br>Day22 - 想到再說<br>Day23 - 想到再說<br>Day24 - 想到再說<br>Day25 - 想到再說<br>Day26 - 想到再說<br>Day27 - 想到再說<br>Day28 - 想到再說<br>Day29 - 想到再說<br>Day30 - 不免俗一定要來一下的完賽心得</p><h3 id="備註-以上標題-順序僅供參考依當天發文為主-xd">備註: 以上標題、順序僅供參考，依當天發文為主 XD</h3><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10233527" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10233527</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/06/Day01-%E4%B8%8D%E5%85%8D%E4%BF%97%E4%B8%80%E5%AE%9A%E8%A6%81%E4%BE%86%E4%B8%80%E4%B8%8B%E7%9A%84%E5%8F%83%E8%B3%BD%E5%AE%A3%E8%A8%80/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;轉眼一年過去了，時間過好快(怕&lt;br&gt;
轉職後工作也 10 個月左右，&lt;br&gt;
過程中有蠻多可以寫成文章，&lt;br&gt;
&lt;s&gt;但因為太懶而沒寫(逃&lt;/s&gt;&lt;br&gt;
一直很苦惱要寫些什麼，很擔心自己寫不出所以然，或寫太淺，&lt;br&gt;
不如就來點已知但還沒寫的文章、或想專研的部分好惹
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>如何讓 GitHub 每個 pull request (PR) 有預設模板</title>
    <link href="https://riverye.com/2020/07/11/%E5%A6%82%E4%BD%95%E8%AE%93-GitHub-%E6%AF%8F%E5%80%8B-pull-request-PR-%E6%9C%89%E9%A0%90%E8%A8%AD%E6%A8%A1%E6%9D%BF/"/>
    <id>https://riverye.com/2020/07/11/如何讓-GitHub-每個-pull-request-PR-有預設模板/</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-11T15:15:12.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="說明">說明</h1><p>當多人在 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 開發協作，你要發 pull request (以下簡稱 PR ) 時，如果能有個預設範本 (default template) 的話，能節省一些時間，確保自己是否有遺漏該先檢查的事項，也能讓大家有共同的公版，避免格式不一致的問題。</p><h1 id="步驟">步驟</h1><h3 id="1-開始前先看下預設-pr-是長這樣">1. 開始前，先看下預設 PR 是長這樣</h3><p><img src="https://i.imgur.com/9IxxWJ4.png" alt></p><h3 id="2-在專案根目錄底下新增-github-資料夾裡面放-pull_request_templatemd-檔案並撰寫想要的預設範本-支援-markdown-語法">2. 在專案根目錄底下新增 <code>.github</code> 資料夾，裡面放 <code>pull_request_template.md</code> 檔案，並撰寫想要的預設範本 (支援 Markdown 語法)</h3><p><img src="https://i.imgur.com/9Ldz9R5.png" alt></p><p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 參考範例:</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**將這支 PR 所做的事情，取代這段文字，描述越詳細越好。**</span></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">與這支 PR 有關聯的 Trello 卡片:</span><br><span class="line"></span><br><span class="line">URL: https://trello.com/c/xyzAbC</span><br><span class="line"></span><br><span class="line">提交 PR 前，請先檢查以下是否已完成：</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>[ ] 該分支是從最新 <span class="code">`master`</span> 切出來 (如果不是，請先 rebase/merge 它)</span><br><span class="line"><span class="bullet">* </span>[ ] 是否新增測試，或被現有的測試覆蓋</span><br><span class="line"><span class="bullet">* </span>[ ] 這支 PR 是否有明確的標題、內容描述</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">補充說明:</span><br></pre></td></tr></table></figure></p><h3 id="3-發-pr-並-merge-到-base-通常預設是-master">3. 發 PR 並 merge 到 base (通常預設是 <code>master</code>)</h3><p><img src="https://i.imgur.com/Zf76iRd.png" alt></p><h3 id="4-接下來每個-pr-都會有預設範本囉">4. 接下來每個 PR 都會有預設範本囉</h3><p>範例：<a href="https://github.com/River-Ye/demo-pull-request-template/pull/2" target="_blank" rel="noopener">https://github.com/River-Ye/demo-pull-request-template/pull/2</a><img src="https://i.imgur.com/ugUhhJC.png" alt></p><h1 id="小結">小結</h1><p>有了公版範本後，能將團隊約定的事項先寫好，避免發 PR 前有丟三落四的情況發生。</p><h1 id="範例">範例</h1><p><a href="https://github.com/River-Ye/demo-pull-request-template/" target="_blank" rel="noopener">https://github.com/River-Ye/demo-pull-request-template/</a></p><h1 id="參考文件">參考文件</h1><p><a href="https://docs.github.com/en/github/building-a-strong-community/creating-a-pull-request-template-for-your-repository" target="_blank" rel="noopener">Creating a pull request template for your repository</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;說明&quot;&gt;說明&lt;/h1&gt;
&lt;p&gt;當多人在 &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; 開發協作，你要發 pull request (以下簡稱 PR ) 時，如果能有個
      
    
    </summary>
    
    
      <category term="教學文" scheme="https://riverye.com/categories/%E6%95%99%E5%AD%B8%E6%96%87/"/>
    
    
      <category term="Git" scheme="https://riverye.com/tags/Git/"/>
    
      <category term="GitHub" scheme="https://riverye.com/tags/GitHub/"/>
    
      <category term="預設模板" scheme="https://riverye.com/tags/%E9%A0%90%E8%A8%AD%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>從排斥寫程式到轉職成為工程師</title>
    <link href="https://riverye.com/2020/03/11/%E5%BE%9E%E6%8E%92%E6%96%A5%E5%AF%AB%E7%A8%8B%E5%BC%8F%E5%88%B0%E8%BD%89%E8%81%B7%E6%88%90%E7%82%BA%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    <id>https://riverye.com/2020/03/11/從排斥寫程式到轉職成為工程師/</id>
    <published>2020-03-10T16:00:00.000Z</published>
    <updated>2020-07-05T03:57:23.299Z</updated>
    
    <content type="html"><![CDATA[<p>離上篇更新隔了 3 個多月，絕不是因為偷懶 <s>(其實是</s><br>當時即將進入新公司，正式轉職成為軟體工程師(撒花</p><h1 id="分享下自己為何轉職及做了哪些準備">分享下自己為何轉職及做了哪些準備</h1><h3 id="背景">背景</h3><p>科大電子系畢業，僅在高中接觸過 8051、大學碰過 C++，但早已全忘 (連 Hello World 怎麼寫出來也忘了)，當時是排斥寫程式的，覺得好難看不懂、英文又爛 (現在英文也很爛 XD)，我一定學不會，當時的作業和考試多虧了同學才得以在及格邊緣通過 XD</p><p>轉職前工作了幾年，做過業務、策展、會計，每個領域都很跳 tone，也都是不同產業，還在尋找適合自己的工作，希望是：</p><h3 id="1-經驗能累積">1. 經驗能累積</h3><h3 id="2-技能帶著走不受產業限制">2. 技能帶著走(不受產業限制)</h3><h3 id="3-工作環境單純">3. 工作環境單純</h3><h3 id="4-平均薪資天花板比一般產業更高">4. 平均薪資天花板比一般產業更高</h3><h3 id="5-不受地點任何地方都能工作">5. 不受地點任何地方都能工作</h3><p>換了幾個工作後，一直找不到上述條件的工作，覺得再怎麼換都是差不多的工作，想起前年在PTT看過轉職心得文「<strong><a href="https://buzzorange.com/techorange/2018/02/23/ptt-how-to-be-programmer/" target="_blank" rel="noopener">[心得] 文組生轉工程師攻略</a></strong>」(連結為科技報橘的URL，比較好閱讀)，從那時起，覺得我好像也可以的念頭便種下種子。</p><h2 id="做了哪些準備">做了哪些準備</h2><p>當工作開始迷茫時，轉職念頭也逐漸萌芽，直到去年 4 月底離職後，便正式開始自學前端的 HTML、CSS、jQuery (推薦看 Amos 老師的金魚都能懂的網頁教學系列影片，共兩季(<a href="https://www.youtube.com/playlist?list=PLqivELodHt3iF_Spzdz_6LsOSPOyfDx-R" target="_blank" rel="noopener">網頁教學</a>、<a href="https://www.youtube.com/playlist?list=PLqivELodHt3hxeuLX8PYaI8u1GcDaBoJo" target="_blank" rel="noopener">切版教學</a>))，先確認自己是否還會排斥，每天跑圖書館自學 8 小時，持續一個月後，確定不排斥甚至產生興趣後，想持續深耕並更有效率地學習(目標是年底前轉職成為工程師)，過程中有尋找線上及實體課程進行比較，像是：</p><h3 id="線上資源udemy-coursera-hahow-好學校-六角學院-alpha-camp-網頁15天-臺大開放式課程-youtube等">線上資源：Udemy、Coursera、Hahow 好學校、六角學院、ALPHA Camp、網頁15天、臺大開放式課程、Youtube...等</h3><h3 id="實體資源五倍紅寶石-cmoney-培訓-職訓局-資策會-好想工作室等">實體資源：五倍紅寶石、CMoney 培訓、職訓局、資策會、好想工作室...等</h3><p>不找還好，一找發現資源多到爆炸，反而不知該如何選擇，光是尋找、篩選、找到適合自己的學習方式，就花了一些時間整理，文章後面會把整理過的連結給大家參考，希望能幫助到想轉職的你，也歡迎在底下留言讓我知道，有留言鼓勵會更有動力更新 XD</p><p>經過多方比較後(預算、所需投入的時間、師資助教資源、課後輔導、學習氛圍等)，最後選擇「<a href="https://5xruby.tw/" target="_blank" rel="noopener">五倍紅寶石</a>」當作首選，自認需要有人引導會更有效率地學習，雖然可以持續每天跑圖書館自學，但摸索及撞牆期會花更長時間，且不見得所學的觀念是正確的，更常是知其然而不知其所以然，有人帶的話可以大幅縮減撞牆期，遇到不清楚有人可以詢問解惑，更快突破瓶頸及持續成長。</p><p>確定北上報名課程後，才開始找短租(<a href="https://www.facebook.com/groups/464870710346711/" target="_blank" rel="noopener">台北租屋、出租專屬社團</a>)，在租屋社團可以提出需求，符合條件的房東會主動與你聯絡，或在上面看物件詢問對方，整體支出會比住家裡的人還高，要先算好這段期間沒收入的開銷，要上課、租屋、三餐、交通、電話費、健保費、國民年金、保險費、雜支...等，銀彈要準備充裕，建議在學習階段專心學習就好，別讓外務(打工)影響學習品質。</p><p>課程期間很精實，作業量蠻重的，要<a href="https://www.youtube.com/playlist?list=PL4HKp4Vc6BIzggAX2_GB068rtVOaMg0n8" target="_blank" rel="noopener">錄影寫作業</a>外，也要<a href="https://medium.com/@riverye" target="_blank" rel="noopener">寫文章</a>、參加<a href="https://ithelp.ithome.com.tw/users/20061211/ironman/2674" target="_blank" rel="noopener">鐵人賽</a>(連續 30 天每日寫一篇文章)、架設<a href="https://riverye.com/">個人部落格</a>、分組討論製作<a href="https://github.com/River-Ye/oh_my_wage" target="_blank" rel="noopener">專案</a>，同時要做的事情蠻多的，不停地學習新知識外又要持續輸出，時間永遠不夠用，巴不得自己是可以不用睡覺的體質，同學間也很積極學習，學習氛圍是好的，閒聊時會問彼此昨天幾點睡，一位比一位晚睡，到後來可以說是輪班睡覺，B 群、C 群、咖啡更是不離身，過程的辛苦只有參與過的人最清楚，雖然很累但樂此不疲，當一群人持續往同個目標前進時，會比單打獨鬥走更遠，一起共患難會有革命情感，即便課程結束到現在，仍會持續聯絡，假日約寫 code 或出來走走，這是一人在圖書館自學所無法擁有的回憶及友誼。</p><p>課程結束後，有在外面租個共用空間的辦公座位一個月，每天待 10 小時以上，不是寫 code 就是整理履歷、丟履歷、刷題、更新個人部落格、看技術文章...等，用「不是在寫 code，就是準備 code」來形容一點也不浮誇，讓自己除了吃飯、睡覺、通勤外的其它時間，全部投入在轉職工程師這件事情上，Line、Youtube、Instagram、Facebook 幾乎很少用，到後來甚至刪除 Facebook APP、Instagram APP，會不自覺想用的 APP 就刪除，藉此戒掉下意識滑手機的習慣，會發現有更多時間可以做想做的事情，而不再只有想卻沒做。</p><h2 id="面試平台">面試平台</h2><p>開始找工程師相關工作後，首先要先有履歷，會發現履歷與之前撰寫不一樣，使用英式履歷即可(一張A4正面)，再來就是各人力銀行網站都放，像是：</p><ol><li><p><a href="https://www.104.com.tw" target="_blank" rel="noopener">104人力銀行</a></p></li><li><p><a href="https://www.cakeresume.com" target="_blank" rel="noopener">CakeResume</a></p></li><li><p><a href="https://www.yourator.co" target="_blank" rel="noopener">Yourator</a></p></li><li><p><a href="https://meet.jobs" target="_blank" rel="noopener">Meet.jobs</a></p></li><li><p><a href="https://jobs.ruby.tw" target="_blank" rel="noopener">Ruby Jobs in Taiwan</a></p></li><li><p><a href="https://github.com/f2etw/jobs" target="_blank" rel="noopener">f2etw</a></p></li><li><p><a href="https://www.1111.com.tw" target="_blank" rel="noopener">1111人力銀行</a></p></li><li><p><a href="https://tw.wanted.jobs" target="_blank" rel="noopener">wanted</a></p></li><li><p><a href="https://www.yes123.com.tw" target="_blank" rel="noopener">yes123求職網</a></p></li><li><p><a href="https://www.518.com.tw" target="_blank" rel="noopener">518人力銀行</a></p></li><li><p><a href="https://www.job178.com.tw" target="_blank" rel="noopener">178人力銀行</a></p></li><li><p><a href="https://tw.linkedin.com" target="_blank" rel="noopener">LinkedIn</a></p></li><li><p><a href="https://tw.indeed.com" target="_blank" rel="noopener">indeed</a></p></li></ol><h2 id="面試問題">面試問題</h2><p>除了履歷上會寫你有什麼技能，並用它做了什麼之外，每間公司問的問題也不太一樣，基本的自我介紹外，更多的是技術問題，像是：</p><h3 id="專案面">專案面：</h3><ol><li><p>你在專案中做了什麼？</p></li><li><p>專案的分工</p></li><li><p>專案用哪些技術</p></li><li><p>常用的 Gem 有哪些？ 用來做什麼？</p></li><li><p>這專案遇到最大的困難是什麼，如何解決</p></li></ol><h3 id="技術面">技術面：</h3><h4 id="ruby-on-rails">Ruby on Rails</h4><ol><li><p><code>Proc</code> 與 <code>Lambda</code> 差別。</p></li><li><p>要怎麼把 <code>Proc</code>、<code>Lambda</code> 轉換成 <code>Block</code>？</p></li><li><p>Block 中的 <code>do…end</code> 與 花括號 <code>{ }</code> 的差異。</p></li><li><p>Ruby 中的 <code>module</code> 怎麼用，跟 <code>class</code> 的差異在哪裡？</p></li><li><p><code>symbol</code> 跟 <code>string</code> 的差異，什麼情況下會選擇這些資料型態？</p></li><li><p><code>map</code> 跟 <code>each</code> 的差別？</p></li><li><p><code>extend</code> 和 <code>include</code> 差別。</p></li><li><p>如果有兩個陣列要怎麼找出一樣的值？</p></li><li><p>a 陣列和 b 陣列如何相乘變 c 陣列？</p></li><li><p><code>private</code>, <code>public</code>, <code>protect</code>的差異？</p></li><li><p>race condition 怎麼解決？</p></li><li><p>費氏數列是什麼? 怎麼用一般迴圈寫出來？</p></li><li><p>會怎麼儲存密碼這種敏感資料？</p></li><li><p>RestFul 是什麼？除了 RESTful 的路由，還知道其他有什麼嗎？</p></li><li><p>RestFul 的實作？</p></li><li><p>Get、Post 的差異？有哪些特性？</p></li><li><p>什麼是 model 的多型？</p></li><li><p>什麼是STI？</p></li><li><p>Rails 裡怎麼避免 n+1 query？</p></li><li><p><code>includes</code> 和 <code>join</code> 的差別？</p></li><li><p>Routes 裡 <code>shallow</code> 是什麼？</p></li><li><p>Routes 裡面 <code>collection</code> 和 <code>member</code> 差別是什麼？</p></li><li><p>如果要做一個短網址系統，routes 和 controller 會怎麼設計？</p></li><li><p>什麼是 CORS？ Rails 怎麼解決這類問題？</p></li><li><p>前端的 partial 怎麼整理，怎麼把邏輯寫到 helper 裡面</p></li><li><p>哪些方法要寫在 controller、哪些要寫在 Model，分別是為什麼？</p></li><li><p>Model 除了跟資料庫溝通外，還可以做什麼事？</p></li><li><p>Gemfile 的功能</p></li><li><p>敘述使用者點擊網頁後背後的流程，特別注意 request header 與 response header 裡面的參數功能為何？</p></li><li><p>說出 cookie 的用途，以及 cookie 的儲存位置。</p></li><li><p>session 和 cookie 的差別？</p></li><li><p>敘述 <code>migration</code> 的用途。</p></li><li><p>描述一下 MVC 怎麼運作的？分別代表什麼意思？這樣的設計模式有什麼好處？</p></li><li><p>測試用的假資料有哪些選擇(fixture與factory bot)？而這些選擇又有哪些cons and pros。除錯的方法？</p></li><li><p><code>index</code> 的優缺點？</p></li><li><p><code>has_and_belongs_to_many</code> 知道嗎？</p></li><li><p>有很大量的資料要怎麼更新？假如是在本地端的話可以怎麼做？</p></li><li><p>dependent destroy 和 dependent delete 的差別？</p></li><li><p>如果 request 會出錯要怎麼處理？</p></li><li><p>如何在資料中如果有就抓出來沒有就初始化一個？</p></li><li><p><code>find</code>、<code>find_by</code>、<code>where</code> 差別</p></li><li><p>Rails 怎麼運作</p></li><li><p>什麼是 strong parameters</p></li><li><p>有用過 Assets pipeline 嗎？</p></li><li><p>什麼是 Active Job？用來解決什麼問題？</p></li><li><p>有在 method 裡用過 <code>&amp;</code> 跟 <code>*</code> 嗎？ (不是參數)</p></li><li><p>Rails 框架提供了什麼功能讓我們能快速開發？</p></li><li><p>ActiveRecord 如何幫我們解決處理資料庫的問題？</p></li><li><p>什麼是 Redis？</p></li><li><p>什麼是 ORM？</p></li><li><p>什麼是 CSRF? Rails 怎麼防範？</p></li></ol><h4 id="git">Git</h4><ol><li><p>什麼是 Git Flow？</p></li><li><p><code>Merge</code> 和 <code>rebase</code> 的差別</p></li><li><p>為何要 <code>rebase</code> 自己的 <code>branch</code>？</p></li><li><p>有用過什麼比較特別的 Git 指令嗎？</p></li></ol><h4 id="sql">SQL</h4><ol><li><p>怎麼知道 SQL 的 query 效能好不好？</p></li><li><p>說明一下 SQL 和 NoSQL 的差別？</p></li><li><p>Left join 和 Right join 的差別？</p></li><li><p>知道什麼是 SQL injection 嗎？及如何預防？</p></li><li><p>rails c 中，如何查詢 11/01 後建立的所有資料</p></li><li><p>MySQL、PostgreSQL 是哪種型態的資料庫？為什麼是主流？帶有什麼好處？</p></li></ol><h4 id="javascript">JavaScript</h4><ol><li><p><code>undefine</code> 和 <code>null</code> 的差別</p></li><li><p>Promise 是做什麼用的，說明怎麼使用</p></li><li><p>Settimeout 1000 指的是幾秒，一定準確嗎？</p></li><li><p><code>==</code> 和 <code>===</code> 差別</p></li></ol><h3 id="軟問題">軟問題</h3><ol><li><p>你在學習程式語言這段期間有沒有曾經想放棄？</p></li><li><p>那你在學習程式語言的過程有沒有特別難過的檻或經驗</p></li><li><p>為什麼想轉職？</p></li><li><p>會用哪三個形容詞形容自己？</p></li><li><p>請說明自己的三個優缺點</p></li><li><p>對未來的規劃</p></li><li><p>為什麼會選擇 Ruby？有學過或比較過其他程式語言嗎？</p></li><li><p>對於未來的工作最注重的是什麼</p></li><li><p>進入後，會想做什麼？個人未來規劃？</p></li><li><p>之後想加強哪部分？</p></li></ol><p>上面的面試問題，不是每一題我都被問過，在面試前，會先上網看別人分享面試心得及題目，累積彙整下來的，答案請自行查詢。</p><h2 id="小結">小結</h2><p>當決定轉職後，除了努力之外，更多的是行動，才有機會轉職成功，從 5 月開始算的話，約半年左右轉職成功，到目前為止挺滿意現在的工作內容，工作上雖然常接觸沒碰過也不會的事情，抱持著遇到問題想辦法解決的心態去面對問題，解決問題的當下所帶來的成就感及喜悅是高於壓力的，會讓自己持續成長及前進，祝大家在職涯上能找到適合自己的工作，有任何指教或鼓勵可在下方留言討論。</p><h3 id="轉職相關文章">轉職相關文章：</h3><ol><li><p><a href="https://buzzorange.com/techorange/2018/02/23/ptt-how-to-be-programmer/" target="_blank" rel="noopener">PTT 鄉民工程師現身分享：文組生轉職工程師攻略</a></p></li><li><p><a href="https://goo.gl/qgWqpa" target="_blank" rel="noopener">從平面設計師到前端工程師：五個月的轉變歷程</a></p></li><li><p><a href="https://link.medium.com/uvTMHKYdc1" target="_blank" rel="noopener">轉職 Web 工程師 — 公務員還俗記</a></p></li><li><p><a href="https://link.medium.com/wUS9ZeTdc1" target="_blank" rel="noopener">結束十年客服生涯，開啟網頁工程師學習之路。</a></p></li><li><p><a href="https://link.medium.com/Ct6DiFwam1" target="_blank" rel="noopener">人生急轉彎！房仲秘書成功轉職軟體工程師？面試準備心路歷程分享</a></p></li><li><p><a href="https://link.medium.com/0OuCYPFWu3" target="_blank" rel="noopener">從資遣到外商，五個步驟轉職軟體工程師</a></p></li><li><p><a href="https://meet.bnext.com.tw/articles/view/38696" target="_blank" rel="noopener">都說程式員薪資高，可是完全沒有技術背景的麻瓜可以學寫程式嗎？</a></p></li><li><p><a href="https://findcareerpassion.blogspot.com/2019/09/blog-post.html" target="_blank" rel="noopener">這麼老了轉行還來得及嘛？ 一歲女兒顛覆我對「時間」的理解</a></p></li><li><p><a href="https://sharing.tcincubator.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80%E7%AC%AC%E4%B8%80%E5%80%8B%E9%9B%A3%E9%A1%8C-%E5%A6%82%E4%BD%95%E9%81%B8%E6%93%87%E9%81%A9%E5%90%88%E8%87%AA%E5%B7%B1/" target="_blank" rel="noopener">程式語言新手入門第一個難題—如何選擇適合自己的程式語言</a></p></li><li><p><a href="https://link.medium.com/ZUZjKtjnh2" target="_blank" rel="noopener">超過 30 個優質線上學習網站，課程平台資源大全，持續成長靠自學課程</a></p></li><li><p><a href="https://sharing.tcincubator.com/%E7%B7%9A%E4%B8%8A%E5%84%AA%E8%B3%AA%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E5%AD%B8%E7%BF%92%E5%B9%B3%E5%8F%B0%E6%8E%A8%E8%96%A6/" target="_blank" rel="noopener">怎麼學程式設計？6個線上優質程式學習平台推薦</a></p></li><li><p><a href="https://www.ptt.cc/bbs/Soft_Job/M.1562589512.A.CBA.html" target="_blank" rel="noopener">[心得] 想轉職前端工程師? 幫你蒐集各種資源!</a></p></li><li><p><a href="https://ithelp.ithome.com.tw/users/20040221/ironman/1247" target="_blank" rel="noopener">前端工程師養成手冊</a></p></li><li><p><a href="https://ithelp.ithome.com.tw/users/20107637/ironman/1457" target="_blank" rel="noopener">前端新手村</a></p></li><li><p><a href="https://www.ptt.cc/bbs/Soft_Job/M.1549355425.A.A4D.html" target="_blank" rel="noopener">[心得] 饅頭計畫 免費程式教學心得</a></p></li><li><p><a href="http://bit.ly/2YtmfCo" target="_blank" rel="noopener">Html5學習資源分享，網站及搜尋引擎優化必備技能</a></p></li><li><p><a href="https://buzzorange.com/techorange/2018/01/04/learn-coding-in-5-months/" target="_blank" rel="noopener">五個月成為 JavaScript 工程師的完整攻略，每個月要幹嘛都寫出來讓你照著做！</a></p></li><li><p><a href="https://buzzorange.com/techorange/2016/04/13/self-study-program-with-datastructure-and-algorithm/" target="_blank" rel="noopener">程式自學十年心得：想吃這行飯，學好演算法與資料結構才能讓你站穩腳步</a></p></li><li><p><a href="https://buzzorange.com/techorange/2019/03/07/algorithm-and-program/" target="_blank" rel="noopener">程式、演算法差在哪？比起學程式，你更應該了解演算法</a></p></li><li><p><a href="https://buzzorange.com/techorange/2019/05/30/microsoft-code-review" target="_blank" rel="noopener">如何讓 6 萬個工程師順暢合作不互雷？微軟法寶「完整程式碼審查」揭密！</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;離上篇更新隔了 3 個多月，絕不是因為偷懶 &lt;s&gt;(其實是&lt;/s&gt;&lt;br&gt;
當時即將進入新公司，正式轉職成為軟體工程師(撒花&lt;/p&gt;
&lt;h1 id=&quot;分享下自己為何轉職及做了哪些準備&quot;&gt;分享下自己為何轉職及做了哪些準備&lt;/h1&gt;
&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="心得文" scheme="https://riverye.com/categories/%E5%BF%83%E5%BE%97%E6%96%87/"/>
    
    
      <category term="轉職" scheme="https://riverye.com/tags/%E8%BD%89%E8%81%B7/"/>
    
      <category term="工程師" scheme="https://riverye.com/tags/%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
      <category term="軟體工程師" scheme="https://riverye.com/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails 中的 IRB、Pry、rails console 差別</title>
    <link href="https://riverye.com/2019/11/25/Ruby-on-Rails-%E4%B8%AD%E7%9A%84-IRB%E3%80%81Pry%E3%80%81rails-console-%E5%B7%AE%E5%88%A5/"/>
    <id>https://riverye.com/2019/11/25/Ruby-on-Rails-中的-IRB、Pry、rails-console-差別/</id>
    <published>2019-11-24T16:00:00.000Z</published>
    <updated>2020-03-07T00:03:16.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="說明">說明</h1><p>欲測試想法(但懶得開新檔案)或抓 bug 時，最常使用的工具，將針對 <code>irb</code> 、 <code>pry</code> 、 <code>rails console</code> 進行介紹。</p><h1 id="irb">IRB</h1><p>Ruby 內建一個名為 IRB (InteractiveRuby) 的互動式命令列，可以在裡面輸入語法且立即看到結果，只需在終端機輸入 <code>irb</code> 即可進入。(前提要有安裝 Ruby)</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在終端機輸入</span></span><br><span class="line">$ irb</span><br><span class="line"></span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">def</span> <span class="title">going_to_travel</span></span></span><br><span class="line">&gt;     <span class="string">"好想出國旅遊"</span></span><br><span class="line">&gt;   <span class="keyword">end</span></span><br><span class="line">&gt; <span class="keyword">end</span></span><br><span class="line"> =&gt; <span class="symbol">:going_to_travel</span></span><br><span class="line">&gt; Human.new.going_to_travel</span><br><span class="line"> =&gt; <span class="string">"好想出國旅遊"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 為註解</span></span><br><span class="line"><span class="comment"># $ 為終端機輸入 ($ 免輸入)</span></span><br><span class="line"><span class="comment"># &gt; 為 IRB 介面 (&gt; 免輸入)</span></span><br><span class="line"><span class="comment"># =&gt; 為回傳值</span></span><br></pre></td></tr></table></figure></p><p>像這樣的環境也稱為 REPL (Read-Eval-Print-Loop)(讀取-執行-印出-循環)。</p><p>IRB 使你可以在終端機介面快速執行並測試回傳值，當你遇到錯誤時， IRB 會準確告訴你該錯誤是什麼及該錯誤的位置。</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ irb</span><br><span class="line"></span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span></span><br><span class="line">&gt;   <span class="function"><span class="keyword">def</span> <span class="title">going_to_travel</span></span></span><br><span class="line">&gt;     <span class="string">"好想出國旅遊"</span></span><br><span class="line">&gt;   <span class="keyword">end</span></span><br><span class="line">&gt; <span class="keyword">end</span></span><br><span class="line"> =&gt; <span class="symbol">:going_to_travel</span></span><br><span class="line">&gt; Human.new.go_to_travel</span><br><span class="line"></span><br><span class="line">NoMethodError (undefined method <span class="string">`go_to_travel' for #&lt;Human:0x00007fffd74be090&gt;)</span></span><br><span class="line"><span class="string">Did you mean?  going_to_travel</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/prctFYn.png" alt></p><p>在這裡我遇到了 NoMethodError，因為我使用錯誤的方法名稱，我把 <code>going_to_travel</code> 換成 <code>.go_to_travel</code>，它會準確告訴我問題出在哪裡，Ruby 甚至會把它找到與輸入內容接近的方法給我參考，有沒有覺得 Ruby 實在太強大了!! 感謝 Ruby ，讚嘆 Ruby。</p><p>要退出 IRB 很簡單，只需輸入 <code>exit</code> 或 <code>quit</code> 或 <code>Ctrl + D</code> ，即退回終端機介面。</p><p>盡管 IRB 非常適合快速檢查某些內容，但它不允許在方法或循環中進行測試，此時用 Pry 較適合。</p><h1 id="pry">Pry</h1><p><a href="https://github.com/pry/pry" target="_blank" rel="noopener">Pry</a> 是 IRB 的加強版，有大量附加的功能(ex: 更漂亮的介面、可以使用 <code>show-method</code> 等)。雖說 Pry 更加強大，但蠻多時候，我仍以 IRB 進行測試，直到需要在 <strong>classes, methods, hashes, iterations</strong> 中進行測試時，Pry 會是你的好夥伴。</p><h2 id="安裝-pry">安裝 Pry</h2><p>可以透過安裝取得 Pry<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入</span></span><br><span class="line">$ gem install pry</span><br></pre></td></tr></table></figure></p><p>或在檔案中加入 <code>require 'pry'</code>，並使用<code>binding.pry</code> 該方法可以立即將程式碼暫停，以便進行測試。會從 <code>binding.pry</code> 這裡開始，並啟動新的 REPL 介面，只需在 Pry 中測試，無須猜測該程式碼的回傳值是什麼。</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test-pry.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'pry'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line">    puts <span class="string">"hello world!"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a = A.new</span><br><span class="line"></span><br><span class="line"><span class="comment"># start a REPL session</span></span><br><span class="line">binding.pry</span><br><span class="line"></span><br><span class="line"><span class="comment"># program resumes here (after pry session)</span></span><br><span class="line">puts <span class="string">"program resumes here."</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入</span></span><br><span class="line">$ ruby test-pry.rb</span><br><span class="line"></span><br><span class="line"><span class="symbol">From:</span> /mnt/c/code/demo/Ruby/test-pry.rb @ line <span class="number">12</span> <span class="symbol">:</span></span><br><span class="line"></span><br><span class="line">     <span class="number">7</span>: <span class="keyword">end</span></span><br><span class="line">     <span class="number">8</span><span class="symbol">:</span></span><br><span class="line">     <span class="number">9</span>: a = A.new</span><br><span class="line">    <span class="number">10</span><span class="symbol">:</span></span><br><span class="line">    <span class="number">11</span>: <span class="comment"># start a REPL session</span></span><br><span class="line"> =&gt; <span class="number">12</span>: binding.pry</span><br><span class="line">    <span class="number">13</span><span class="symbol">:</span></span><br><span class="line">    <span class="number">14</span>: <span class="comment"># program resumes here (after pry session)</span></span><br><span class="line">    <span class="number">15</span>: puts <span class="string">"program resumes here."</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] pry(main)&gt; a.hello</span><br><span class="line">hello world!</span><br><span class="line">=&gt; nil</span><br><span class="line">[<span class="number">2</span>] pry(main)&gt; <span class="function"><span class="keyword">def</span> <span class="title">a</span>.<span class="title">abc</span></span></span><br><span class="line">[<span class="number">2</span>] pry(main)*   puts <span class="string">"在 pry 中測試，並不會改變原本 test-pry.rb 檔案"</span></span><br><span class="line">[<span class="number">2</span>] pry(main)* <span class="keyword">end</span></span><br><span class="line">=&gt; <span class="symbol">:abc</span></span><br><span class="line">[<span class="number">3</span>] pry(main)&gt; a.abc</span><br><span class="line">在 pry 中測試，並不會改變原本 test-pry.rb 檔案</span><br><span class="line">=&gt; nil</span><br><span class="line">[<span class="number">4</span>] pry(main)&gt; exit</span><br><span class="line">program resumes here.</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/pdrTTZU.png" alt></p><p>也可以直接在終端機輸入 <code>pry</code> 進入操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入</span></span><br><span class="line">$ pry</span><br></pre></td></tr></table></figure></p><p>要退出 Pry 並繼續執行後面程式碼的話，只需輸入 <code>exit</code> 或 <code>quit</code> 或 <code>Ctrl + D</code> 。</p><p>退出 Pry 並中止後面程式碼執行，輸入 <code>!!!</code></p><p><img src="https://i.imgur.com/Fsw9K9P.png" alt></p><h2 id="從-irb-進-pry">從 IRB 進 Pry</h2><p>要從 IRB 中進入 Pry 的話，先輸入 <code>require 'pry'</code> 再輸入 <code>binding.pry</code> 或 <code>pry</code> 即進入 Pry。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入</span></span><br><span class="line">$ irb</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">require</span> <span class="string">'pry'</span></span><br><span class="line"> =&gt; true</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 1:</span></span><br><span class="line">&gt; binding.pry</span><br><span class="line">[<span class="number">1</span>] pry(main)&gt; exit</span><br><span class="line"> =&gt; nil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2:</span></span><br><span class="line">&gt; pry</span><br><span class="line">[<span class="number">1</span>] pry(main)&gt; quit</span><br><span class="line"> =&gt; nil</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/iVBDBTm.png" alt></p><h2 id="從-pry-進-irb">從 Pry 進 IRB</h2><p>要從 Pry 中進入 IRB 的話，輸入 <code>binding.irb</code> 即可。</p><p><img src="https://i.imgur.com/rllvvSE.png" alt></p><h1 id="rails-console">Rails console</h1><p>類似 Ruby 的 IRB 介面，並載入整個 Rails 專案的環境，可以在這裡直接操作資料，快速驗證想法且不用到網站便能修改伺服器上的資料：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要在 Rails 專案資料夾底下</span></span><br><span class="line">$ rails console</span><br><span class="line"><span class="comment"># 縮寫為 rails c</span></span><br><span class="line"></span><br><span class="line">&gt; t = Task.find(<span class="number">1</span>)  <span class="comment"># 括號可省略</span></span><br><span class="line">&gt; t.title</span><br><span class="line"> =&gt; <span class="string">"看書"</span></span><br><span class="line">&gt; t.title = <span class="string">"跑步 30 分鐘"</span></span><br><span class="line"> =&gt; <span class="string">"跑步 30 分鐘"</span></span><br><span class="line">&gt; t.title</span><br><span class="line"> =&gt; <span class="string">"跑步 30 分鐘"</span></span><br></pre></td></tr></table></figure></p><p>預設 <code>rails c</code> 是進入 development 環境，若想進入 production 或 test 環境，只要在 <code>rails c</code> 後面加入對應單字即可：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loading development environment</span></span><br><span class="line">$ rails c</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loading production environment</span></span><br><span class="line">$ rails c production</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loading test environment</span></span><br><span class="line">$ rails c test</span><br></pre></td></tr></table></figure></p><p>若只想測試，但不想修改資料，可以使用：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rails c --sandbox</span><br><span class="line"></span><br><span class="line">Loading development environment <span class="keyword">in</span> sandbox (Rails <span class="number">5.2</span>.<span class="number">3</span>)</span><br><span class="line">Any modifications you make will be rolled back on exit</span><br></pre></td></tr></table></figure></p><p>要退出 <code>rails console</code> 的話，只需輸入 exit 或 quit 或 Ctrl + D 。</p><h2 id="用-pry-執行-rails-c">用 Pry 執行 <code>rails c</code></h2><p>在 Rails 中，如果不想更改 Gemfile ，可以使用 <code>pry -r</code> 在應用程序環境中運行 Pry：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pry -r ./config/environment</span><br></pre></td></tr></table></figure></p><p>安裝 Gemfile 的話，使用「<a href="https://github.com/rweng/pry-rails" target="_blank" rel="noopener">pry-rails</a>」gem<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'pry-rails'</span>, <span class="symbol">:group</span> =&gt; <span class="symbol">:development</span></span><br></pre></td></tr></table></figure></p><h1 id="小結">小結</h1><p>這三個 <code>irb</code>、<code>pry</code>、<code>rails console</code> 沒有好壞之分，依不同情境需求，選擇不同工具處理即可。</p><h1 id="參考">參考</h1><ol><li><a href="https://github.com/pry/pry" target="_blank" rel="noopener">Pry GitHub</a></li><li><a href="http://pryrepl.org/" target="_blank" rel="noopener">Pry - an IRB alternative and runtime developer console</a></li><li><a href="https://link.medium.com/kgJj0sKZP1" target="_blank" rel="noopener">Testing your Ruby code: IRB vs. Pry</a></li><li><a href="https://www.sitepoint.com/rubyists-time-pry-irb/" target="_blank" rel="noopener">Rubyists, It’s Time to PRY Yourself Off IRB!</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;說明&quot;&gt;說明&lt;/h1&gt;
&lt;p&gt;欲測試想法(但懶得開新檔案)或抓 bug 時，最常使用的工具，將針對 &lt;code&gt;irb&lt;/code&gt; 、 &lt;code&gt;pry&lt;/code&gt; 、 &lt;code&gt;rails console&lt;/code&gt; 進行介紹。&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="教學文" scheme="https://riverye.com/categories/%E6%95%99%E5%AD%B8%E6%96%87/"/>
    
    
      <category term="Ruby" scheme="https://riverye.com/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://riverye.com/tags/Rails/"/>
    
      <category term="IRB" scheme="https://riverye.com/tags/IRB/"/>
    
      <category term="Pry" scheme="https://riverye.com/tags/Pry/"/>
    
      <category term="rails console" scheme="https://riverye.com/tags/rails-console/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu sudo 免輸入密碼 no password 設定</title>
    <link href="https://riverye.com/2019/11/22/Ubuntu-sudo-%E5%85%8D%E8%BC%B8%E5%85%A5%E5%AF%86%E7%A2%BC-no-password-%E8%A8%AD%E5%AE%9A/"/>
    <id>https://riverye.com/2019/11/22/Ubuntu-sudo-免輸入密碼-no-password-設定/</id>
    <published>2019-11-21T16:00:00.000Z</published>
    <updated>2019-11-25T15:18:13.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="說明">說明</h1><p>在 Ubuntu 使用 sudo 權限時，總需要輸入密碼，好麻煩，透過以下設定，能一勞永逸。</p><p><img src="https://i.imgur.com/dWkifdp.png" alt></p><h1 id="步驟">步驟</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入</span></span><br><span class="line">$ sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure></p><p>將約第 26 行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%sudo   ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></p><p>改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%sudo   ALL=(ALL:ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ohoumhT.png" alt></p><p>存檔，大功告成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;說明&quot;&gt;說明&lt;/h1&gt;
&lt;p&gt;在 Ubuntu 使用 sudo 權限時，總需要輸入密碼，好麻煩，透過以下設定，能一勞永逸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/dWkifdp.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;步驟&quot;
      
    
    </summary>
    
    
      <category term="教學文" scheme="https://riverye.com/categories/%E6%95%99%E5%AD%B8%E6%96%87/"/>
    
    
      <category term="Ubuntu" scheme="https://riverye.com/tags/Ubuntu/"/>
    
      <category term="sudo" scheme="https://riverye.com/tags/sudo/"/>
    
      <category term="no password" scheme="https://riverye.com/tags/no-password/"/>
    
  </entry>
  
  <entry>
    <title>透過 Freenom 幫 Heroku 網址做 Cloudflare 的設定(Domain 買起來!!)</title>
    <link href="https://riverye.com/2019/11/19/%E9%80%8F%E9%81%8E-Freenom-%E5%B9%AB-Heroku-%E7%B6%B2%E5%9D%80%E5%81%9A-Cloudflare-%E7%9A%84%E8%A8%AD%E5%AE%9A-Domain-%E8%B2%B7%E8%B5%B7%E4%BE%86/"/>
    <id>https://riverye.com/2019/11/19/透過-Freenom-幫-Heroku-網址做-Cloudflare-的設定-Domain-買起來/</id>
    <published>2019-11-18T16:00:00.000Z</published>
    <updated>2019-11-22T16:56:45.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="說明">說明</h1><p>Ruby on Rails 專案完成且部署到 <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> 後，想要有一個專屬 <a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">Domain Name</a> 網址並有 <a href="https://zh.wikipedia.org/wiki/https" target="_blank" rel="noopener">HTTPS</a> 的話，本文以 Freenom 購買 Domain 網址，在 Cloudflare 進行 CDN 及 DNS 設定為例。</p><h1 id="heroku-cloudflare-freenom-是什麼">Heroku、Cloudflare、Freenom 是什麼？</h1><h3 id="heroku">Heroku</h3><p>Heroku 是一個支援多種程式語言的雲平台即服務。Heroku 作為最元祖的雲平台之一，從 2007 年 6 月起開發，當時它僅支援 Ruby，但後來增加了對 Java、Node.js、Scala、Clojure、Python 以及（未記錄在正式檔案上）PHP 和 Perl 的支援。基礎作業系統是 Debian，在最新的技術堆疊則是基於 Debian 的 Ubuntu。更重要的是 Ruby 程式語言的發明之父<a href="https://zh.wikipedia.org/wiki/%E6%9D%BE%E6%9C%AC%E8%A1%8C%E5%BC%98" target="_blank" rel="noopener">松本行弘</a>（日文：まつもとゆきひろ，網路上大家通常稱他 Matz）也在這上班。</p><p>出處：<a href="https://zh.wikipedia.org/wiki/Heroku" target="_blank" rel="noopener">維基百科</a></p><h3 id="cloudflare">Cloudflare</h3><p>Cloudflare 是一間總部位於舊金山的美國跨國 IT 企業，以向客戶提供基於反向代理的內容傳遞網路（Content Delivery Network, CDN）及分布式域名解析服務（Distributed Domain Name Server）為主要業務。Cloudflare可以幫助受保護站點抵禦包拒絕服務攻擊等網路攻擊，確保該網站長期在線，同時提升網站的效能、載入速度以改善訪客體驗。</p><p>出處：<a href="https://zh.wikipedia.org/wiki/CloudFlare" target="_blank" rel="noopener">維基百科</a></p><h3 id="freenom">Freenom</h3><p>Freenom 是世界上第一個也是唯一一個免費功能變數名稱的供應商，運用最近的網路建設和託管技術，打破了壁壘，整合了免費的功能變數名稱，這使得任何企業或個人不花一分錢就可以建立網站和目錄。</p><p>出處：<a href="https://www.freenom.com/zu/aboutfreenom.html" target="_blank" rel="noopener">公司介紹</a></p><h1 id="開始前">開始前</h1><p>你要有：</p><ol><li><a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> 的帳號密碼 (上面要有已部署好的專案)</li><li><a href="https://www.freenom.com/zu/index.html" target="_blank" rel="noopener">Freenom</a>  的帳號密碼</li><li><a href="https://www.cloudflare.com/zh-tw/" target="_blank" rel="noopener">Cloudflare</a>  的帳號密碼</li></ol><blockquote><p>備註：以下說明，皆在登入 Heroku、Freenom、Cloudflare 狀態下操作</p></blockquote><h1 id="如何設定-heroku-freenom-cloudflare">如何設定 Heroku、Freenom、Cloudflare</h1><h3 id="1-先到-freenom-挑一組喜歡的-domain-購買">1. 先到 Freenom 挑一組喜歡的 Domain 購買</h3><p>文章以「this-is-test.tk」為例</p><h3 id="2-在-heroku-首頁點選該專案的-settings先確認部署的專案能正常執行以下兩種方法將-domain-加入擇一即可">2. 在 Heroku 首頁點選該專案的 Settings，先確認部署的專案能正常執行，以下兩種方法將 Domain 加入(擇一即可)</h3><p><img src="https://i.imgur.com/62TqU8u.png" alt></p><h3 id="3-1-在-heroku-網頁點選add-domain輸入買的-domain例如this-is-testtk">3-1. 在 Heroku 網頁點選「Add domain」輸入「買的 domain」，例如：「this-is-test.tk」</h3><p><img src="https://i.imgur.com/FGiUWpe.png" alt></p><p><img src="https://i.imgur.com/BGLEM8V.png" alt></p><h3 id="3-2-在專案目錄的終端機輸入如下">3-2. 在專案目錄的終端機輸入如下</h3><p>(已做 3-1. 可省略此步驟)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 記得先切換到該專案資料夾</span></span><br><span class="line"></span><br><span class="line">$ heroku domains:add &lt;你買的domain&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">$ heroku domains:add this-is-test.tk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接著回 Heroku 網頁確認是否已加入</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/NJhfgOb.png" alt></p><h3 id="4-cloudflare-網頁點選add-a-site">4. Cloudflare 網頁點選「+Add a Site」</h3><p><img src="https://i.imgur.com/rKAxR5l.png" alt></p><h3 id="5-輸入購買的-domain">5. 輸入購買的 Domain</h3><p><img src="https://i.imgur.com/NUUIr6p.png" alt></p><h3 id="6-選-free-接著下一步">6. 選 Free 接著下一步</h3><p><img src="https://i.imgur.com/IaVD23J.png" alt></p><h3 id="7-輸入-dns-設定-後面說明">7. 輸入 DNS 設定 (後面說明)</h3><p><img src="https://i.imgur.com/wYA92yk.png" alt></p><h3 id="8-設定如下確認無誤點continue">8. 設定如下，確認無誤點「Continue」</h3><table><thead><tr><th>Type</th><th>Name</th><th>Value</th><th>TTL</th></tr></thead><tbody><tr><td>CNAME</td><td>&lt;你買的 Domain&gt;</td><td>&lt;原本 Heroku 網址&gt;</td><td>Automatic</td></tr><tr><td>CNAME</td><td>www</td><td>&lt;你買的 Domain&gt;</td><td>Automatic</td></tr></tbody></table><p>範例如下：(此範例連結之後會失效)</p><table><thead><tr><th>Type</th><th>Name</th><th>Value</th><th>TTL</th></tr></thead><tbody><tr><td>CNAME</td><td>this-is-test.tk</td><td>test-freenom-and-cloudflare.herokuapp.com</td><td>Automatic</td></tr><tr><td>CNAME</td><td>www</td><td>this-is-test.tk</td><td>Automatic</td></tr></tbody></table><p><img src="https://i.imgur.com/kTTFgke.png" alt></p><h3 id="9-確認無誤後點done-check-nameservers">9. 確認無誤後點「Done, check nameservers」</h3><p><img src="https://i.imgur.com/ws04oId.png" alt></p><h3 id="10-複製這-2-個-nameserver在-freenom-會用到">10. 複製這 2 個 Nameserver，在 freenom 會用到</h3><blockquote><p>可能會與我的不同</p></blockquote><table><thead><tr><th>Nameserver 1</th><th>Nameserver 2</th></tr></thead><tbody><tr><td>dara.ns.cloudflare.com</td><td>scott.ns.cloudflare.com</td></tr></tbody></table><p><img src="https://i.imgur.com/s2WcK0l.png" alt></p><h3 id="11-在-freenom-網頁設定-nameserver">11. 在 freenom 網頁設定 Nameserver</h3><blockquote><p>流程：<br>freenom → Services → My Domains → Manage Domain → Management Tools → Nameservers → User custom nameservers(enter below) → 輸入 cloudflare 的 Nameserver → 點「Change Nameservers」</p></blockquote><p><img src="https://i.imgur.com/sBOBFeu.png" alt></p><h3 id="12-將-cloudflare-的-nameserver-貼在-freenom">12. 將 Cloudflare 的 Nameserver 貼在 freenom</h3><blockquote><p>可能會與我的不同</p></blockquote><table><thead><tr><th>Nameserver 1</th><th>Nameserver 2</th></tr></thead><tbody><tr><td>dara.ns.cloudflare.com</td><td>scott.ns.cloudflare.com</td></tr></tbody></table><p><img src="https://i.imgur.com/ouCGjwS.png" alt></p><h3 id="13-設定成功畫面如下">13. 設定成功畫面如下</h3><p><img src="https://i.imgur.com/DX6HABx.png" alt></p><h3 id="14-回-cloudflare-點re-check-now">14. 回 Cloudflare 點「Re-check now」</h3><p><img src="https://i.imgur.com/ImNemsA.png" alt></p><h3 id="15-在-cloudflare-首頁會看到更新中等待同時先把-https-設定開啟">15. 在 Cloudflare 首頁會看到更新中，等待同時，先把 HTTPS 設定開啟</h3><p><img src="https://i.imgur.com/qPhcfQw.png" alt></p><h3 id="16-cloudflare-之後若要改-dns-可在此調整">16. Cloudflare 之後若要改 DNS 可在此調整</h3><p><img src="https://i.imgur.com/gqgsuJj.png" alt></p><h3 id="17-在-ssltls-的-edge-certificates-設定中啟動always-use-https">17. 在 SSL/TLS 的 Edge Certificates 設定中，啟動「Always Use HTTPS」</h3><p><img src="https://i.imgur.com/tNP2I4J.png" alt></p><h3 id="18-在-ssltls-的-overview-中設定成full">18. 在 SSL/TLS 的 Overview 中，設定成「Full」</h3><p><img src="https://i.imgur.com/Qxe39NM.png" alt></p><h3 id="19-回-ssltls-的-edge-certificates-中status-目前為pending-validation">19. 回 SSL/TLS 的 Edge Certificates 中，Status 目前為「Pending Validation」</h3><blockquote><p>等它從黃燈變綠燈，所需時間短則 10-30 分鐘，長則 1 天左右</p></blockquote><p><s>人品好壞就看這次了</s></p><p><img src="https://i.imgur.com/RfAJDna.png" alt></p><h3 id="20-經過漫長等待變綠燈時網址就能瀏覽囉">20. 經過漫長等待，變綠燈時，網址就能瀏覽囉</h3><blockquote><p>測試下來約 2 小時左右才變綠燈</p></blockquote><p><img src="https://i.imgur.com/odMdnFU.png" alt></p><h1 id="小結">小結</h1><p>寫這篇真的是漫長的等待，後面把 HTTPS 設定完成後，再來就是被動地等待，前面只要設定正確，時間會證明一切的~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;說明&quot;&gt;說明&lt;/h1&gt;
&lt;p&gt;Ruby on Rails 專案完成且部署到 &lt;a href=&quot;https://www.heroku.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Heroku&lt;/a&gt; 後，想要有一個專屬 &lt;a href=
      
    
    </summary>
    
    
      <category term="教學文" scheme="https://riverye.com/categories/%E6%95%99%E5%AD%B8%E6%96%87/"/>
    
    
      <category term="Cloudflare" scheme="https://riverye.com/tags/Cloudflare/"/>
    
      <category term="Freenom" scheme="https://riverye.com/tags/Freenom/"/>
    
      <category term="Heroku" scheme="https://riverye.com/tags/Heroku/"/>
    
      <category term="Domain" scheme="https://riverye.com/tags/Domain/"/>
    
  </entry>
  
  <entry>
    <title>如何在 GitHub 設定 Travis CI，以 Ruby on Rails 專案為例。</title>
    <link href="https://riverye.com/2019/11/18/%E5%A6%82%E4%BD%95%E5%9C%A8-GitHub-%E8%A8%AD%E5%AE%9A-Travis-CI%EF%BC%8C%E4%BB%A5-Ruby-on-Rails-%E5%B0%88%E6%A1%88%E7%82%BA%E4%BE%8B%E3%80%82/"/>
    <id>https://riverye.com/2019/11/18/如何在-GitHub-設定-Travis-CI，以-Ruby-on-Rails-專案為例。/</id>
    <published>2019-11-17T16:00:00.000Z</published>
    <updated>2020-07-05T03:52:58.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="說明">說明</h1><p>如何在 GitHub 設定 Travis CI，以 Ruby on Rails 專案為例</p><h1 id="環境介紹">環境介紹</h1><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ruby version 2.6.3</span><br><span class="line">Rails version 5.2.3</span><br><span class="line">Git version 2.23.0</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/River-Ye/travis_ci_test" target="_blank" rel="noopener">教學範例 GitHub</a></p><h1 id="travis-ci">Travis CI</h1><p><a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> 是在軟體開發領域中的一個在線的，分布式的持續集成服務，用來構建及測試在 GitHub 託管的代碼。</p><p>它提供了多種程式語言的支持，包括 Ruby、JavaScript、Java、Scala、PHP、Haskell 和 Erlang 在內的多種語言。許多知名的開源項目使用它來在每次提交的時候進行構建測試，比如 Ruby on Rails，Ruby 和 Node.js。</p><p>出處：<a href="https://zh.wikipedia.org/wiki/Travis_CI" target="_blank" rel="noopener">維基百科</a></p><h1 id="開始前">開始前</h1><p>你要有：</p><ol><li>Ruby、Rails、Git、Postgresql 等的基本環境(<a href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/">沒有可參考這篇建置</a>)</li><li><a href="https://github.com" target="_blank" rel="noopener">GitHub</a> 及 <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> 的帳號密碼 (免費註冊)</li></ol><h1 id="如何設定-ruby-on-rails-專案">如何設定 Ruby on Rails 專案</h1><h3 id="1-裝-rspec-rails-gem">1. 裝 <a href="https://rubygems.org/gems/rspec-rails" target="_blank" rel="noopener">rspec-rails gem</a></h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">group <span class="symbol">:development</span>, <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  gem <span class="string">'rspec-rails'</span>, <span class="string">'~&gt; 3.9'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>換好資料庫後，終端機輸入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bundle</span><br><span class="line">$ rails g rspec:install</span><br></pre></td></tr></table></figure></p><h3 id="2-將原本-sqlite-換成-pg-gem">2. 將原本 sqlite 換成 <a href="https://rubygems.org/gems/pg" target="_blank" rel="noopener">pg gem</a></h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'pg'</span>, <span class="string">'~&gt; 1.1'</span>, <span class="string">'&gt;= 1.1.4'</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/database.yml</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">default:</span> &amp;default</span><br><span class="line">  <span class="symbol">adapter:</span> postgresql</span><br><span class="line">  <span class="symbol">encoding:</span> unicode</span><br><span class="line">  <span class="symbol">pool:</span> &lt;%= ENV.fetch(<span class="string">"RAILS_MAX_THREADS"</span>) &#123; <span class="number">5</span> &#125; %&gt;</span><br><span class="line">  <span class="symbol">timeout:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">development:</span></span><br><span class="line">  &lt;&lt;: *default</span><br><span class="line">  <span class="symbol">database:</span> travis_ci_test_development</span><br><span class="line"></span><br><span class="line"><span class="symbol">test:</span></span><br><span class="line">  &lt;&lt;: *default</span><br><span class="line">  <span class="symbol">database:</span> travis_ci_test_test</span><br><span class="line"></span><br><span class="line"><span class="symbol">production:</span></span><br><span class="line">  &lt;&lt;: *default</span><br><span class="line">  <span class="symbol">database:</span> travis_ci_test_production</span><br><span class="line"></span><br><span class="line"><span class="comment"># database 名稱自取</span></span><br></pre></td></tr></table></figure></p><p>換完資料庫後，記得要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bundle</span><br><span class="line">$ rails db:migrate:reset</span><br></pre></td></tr></table></figure></p><h3 id="3-以-rails-scaffold-測試為例-可忽略">3. 以 Rails scaffold 測試為例 (可忽略)</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rails g scaffold User name role:integer email gender:integer tel</span><br><span class="line">$ rails db:migrate</span><br><span class="line">$ rspec</span><br></pre></td></tr></table></figure></p><p>顯示如下</p><p><img src="https://i.imgur.com/Erf8NC3.png" alt></p><h3 id="4-在專案目錄底下新增travisyml">4. 在專案目錄底下新增「.travis.yml」</h3><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">ruby</span></span><br><span class="line"><span class="attr">rvm:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">2.6</span><span class="number">.3</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">nvm</span> <span class="string">install</span> <span class="number">10</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">i</span> <span class="bullet">-g</span> <span class="string">yarn</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rake</span> <span class="attr">db:migrate:reset</span> <span class="string">RAILS_ENV=test</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rspec</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可依需求調整</span></span><br></pre></td></tr></table></figure></p><h3 id="5-建立-github-專案-或在現有的專案-push-上去也可以">5. 建立 GitHub 專案 (或在現有的專案 push 上去也可以)</h3><p><strong>要先有 GitHub 專案，Travis CI 同步時才能找到喔。</strong></p><h3 id="6-設定-travis-ci-與-github-同步專案">6. 設定 Travis CI 與 GitHub 同步專案</h3><p>Travis CI 登入後，右上角 <a href="https://travis-ci.org/account/repositories" target="_blank" rel="noopener">Settings</a> 即可設定。</p><p><img src="https://i.imgur.com/XIbBSOf.png" alt></p><h3 id="7-回-travis-ci-首頁點左側邊專案名稱">7. 回 Travis CI 首頁，點左側邊專案名稱</h3><p><img src="https://i.imgur.com/ZGM49x7.png" alt></p><h3 id="8-將帶有travisyml的-commit-push-至-github">8. 將帶有「.travis.yml」的 commit push 至 GitHub</h3><p><img src="https://i.imgur.com/joWXDI1.png" alt></p><h3 id="9-push-至-github-後在-travis-ci-會看見正在執行的畫面">9. push 至 GitHub 後，在 Travis CI 會看見正在執行的畫面</h3><p>需要跑一些時間(幾分鐘不等)，基本上有在執行，代表有順利載入 Travis CI</p><p><img src="https://i.imgur.com/hpHdPhK.jpg" alt></p><h3 id="10-回-github-點-commits-能看見已執行通過有綠色v">10. 回 GitHub 點 commits 能看見已執行通過(有綠色V)</h3><p><img src="https://i.imgur.com/myAhzQU.png" alt></p><h3 id="11-將-test_ci-branch-push-至-github-發-pr">11. 將 test_ci branch push 至 GitHub 發 pr</h3><p><img src="https://i.imgur.com/9XEwOUw.png" alt></p><h1 id="小結">小結</h1><p>設定過一次再回想時，會發現比想像中簡單，精簡流程如下：</p><ol><li>設定「.travis.yml」檔</li><li>push Github</li><li>設定 Travis CI</li></ol><p>簡單來說是這樣</p><p>上述不清楚部分，能參考<a href="https://github.com/River-Ye/travis_ci_test" target="_blank" rel="noopener">教學範例 GitHub</a></p><hr><p>本文同步於 <a href="https://riverye.com">小菜的 Blog</a> <a href="https://riverye.com">https://riverye.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;說明&quot;&gt;說明&lt;/h1&gt;
&lt;p&gt;如何在 GitHub 設定 Travis CI，以 Ruby on Rails 專案為例&lt;/p&gt;
&lt;h1 id=&quot;環境介紹&quot;&gt;環境介紹&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="教學文" scheme="https://riverye.com/categories/%E6%95%99%E5%AD%B8%E6%96%87/"/>
    
    
      <category term="Ruby" scheme="https://riverye.com/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://riverye.com/tags/Rails/"/>
    
      <category term="Travis CI" scheme="https://riverye.com/tags/Travis-CI/"/>
    
      <category term="GitHub" scheme="https://riverye.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Ruby 中的 Block、Proc、Lambda 是什麼？</title>
    <link href="https://riverye.com/2019/11/15/Ruby-%E4%B8%AD%E7%9A%84-Block%E3%80%81Proc%E3%80%81Lambda-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/"/>
    <id>https://riverye.com/2019/11/15/Ruby-中的-Block、Proc、Lambda-是什麼？/</id>
    <published>2019-11-14T16:00:00.000Z</published>
    <updated>2019-11-15T14:08:50.625Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ruby 中容易搞混(學不好)，且面試經常會被問的問題：</p><blockquote><p>「請說明 Block、Proc、Lambda 是什麼」<br>「Block 中的 do..end 與 花括號 { } 差異」<br>「請說明 Proc 與 Lambda 區別」<br>「Rails 的 scope 為什麼用 Lambda？」<br>「要怎麼把 Block 轉成 Proc、Lambda？」<br>「要怎麼把 Proc、Lambda 轉成 Block？」</p></blockquote><p>上述常見問題，一次滿足!!</p><h1 id="block-程式碼區塊">Block (程式碼區塊)</h1><h2 id="什麼是-block">什麼是 Block ?</h2><p><a href="https://zh.wikipedia.org/wiki/Ruby" target="_blank" rel="noopener">Ruby</a> 是一款相當徹底「<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="noopener">物件導向 OOP (Object-Oriented Programming)</a>」的程式語言，絕大部分的東西都是物件，而 Block 是少數的例外。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">list.map &#123; <span class="params">|i|</span> i * <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment"># map 印出如下</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"> =&gt; [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">24</span>]  <span class="comment"># 回傳值</span></span><br><span class="line"><span class="comment"># map 印出如上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list.select &#123; <span class="params">|j|</span> p j.even? &#125;</span><br><span class="line"><span class="comment"># select 印出如下</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"> =&gt; [<span class="number">10</span>, <span class="number">12</span>]  <span class="comment"># 回傳值</span></span><br><span class="line"><span class="comment"># select 印出如上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list.reduce &#123; <span class="params">|x, y|</span> p x + y &#125;</span><br><span class="line"><span class="comment"># reduce 印出如下</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">35</span></span><br><span class="line"><span class="number">47</span></span><br><span class="line"> =&gt; <span class="number">47</span>  <span class="comment"># 回傳值</span></span><br><span class="line"><span class="comment"># reduce 印出如上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list.each <span class="keyword">do</span> <span class="params">|num|</span></span><br><span class="line">  p num * <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># each 印出如下</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"> =&gt; [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>]  <span class="comment"># 回傳值</span></span><br><span class="line"> <span class="comment"># each 印出如上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 從上得知，map、select、reduce 與 each 的回傳值(return value)不同</span></span><br><span class="line"><span class="comment"># map、select、reduce 會回傳一個新陣列</span></span><br><span class="line"><span class="comment"># each 回傳 receiver</span></span><br></pre></td></tr></table></figure></p><p>在 Ruby 中，<code>花括號 {}</code> 與 <code>do..end</code> 就是 Block，要接在方法(method)後面，且無法單獨存活，否則會出錯。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; puts <span class="string">"無法單獨存活，會出錯"</span> &#125;  <span class="comment"># SyntaxError</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"無法單獨存活，會出錯"</span>    <span class="comment"># SyntaxError</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Block 無法單獨存活，會噴錯誤訊息</span></span><br></pre></td></tr></table></figure></p><blockquote><blockquote><p>Block 不是物件，不能單獨存在。</p></blockquote><blockquote><p>Block 只是附加在方法後面，等著被程式碼呼叫的一段程式碼。</p></blockquote></blockquote><h2 id="block-中-花括號-與-doend-差異">Block 中 <code>花括號 {}</code> 與 <code>do..end</code> 差異</h2><p>一般來說，若可以一行寫完會使用 <code>{}</code>，若遇上較複雜的判斷，需寫一行以上時，則會使用 <code>do..end</code>。</p><h3 id="除此之外還有別的差異嗎">除此之外，還有別的差異嗎？</h3><p>請看以下範例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">p list.map&#123; <span class="params">|x|</span> x * <span class="number">2</span> &#125;      <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line">p list.map <span class="keyword">do</span> <span class="params">|x|</span> x * <span class="number">2</span> <span class="keyword">end</span>  <span class="comment"># &lt;Enumerator: [1, 2, 3, 4, 5]:map&gt;</span></span><br></pre></td></tr></table></figure></p><p>原來 <code>花括號 {}</code> 與 <code>do..end</code> 還有 <strong><code>優先順序</code></strong> 的不同</p><blockquote><p><code>花括號 {}</code> 優先順序大於 <code>do..end</code></p></blockquote><p>上述範例原形為<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">p(list.map&#123; <span class="params">|x|</span> x * <span class="number">2</span> &#125;        <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line">p(list.map) <span class="keyword">do</span> <span class="params">|x|</span> x * <span class="number">2</span> <span class="keyword">end</span>   <span class="comment"># &lt;Enumerator: [1, 2, 3, 4, 5]:map&gt;</span></span><br><span class="line"><span class="comment"># 因為優先順序較低，所以變成先跟 p 結合了，造成後面附掛的 Block 就不會被處理了</span></span><br></pre></td></tr></table></figure></p><h2 id="如何執行-block-的內容">如何執行 Block 的內容？</h2><blockquote><p>使用 <code>yield</code> 方法</p></blockquote><p>如果想讓附掛的 Block 執行內容，可以使用 <code>yield</code> 方法，能暫時先把控制權交給 Block ，等 Block 執行結束後再把控制權交回來。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_block</span></span></span><br><span class="line">  puts <span class="string">"開始"</span></span><br><span class="line">  <span class="keyword">yield</span>               <span class="comment"># 把控制權暫時讓給 Block</span></span><br><span class="line">  puts <span class="string">"結束"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hi_block &#123; puts <span class="string">"這裡是 Block"</span> &#125;</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line">開始</span><br><span class="line">這裡是 Block</span><br><span class="line">結束</span><br><span class="line"> =&gt; nil</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br></pre></td></tr></table></figure></p><h2 id="傳參數給-block">傳參數給 Block</h2><p>會發現不管在 <code>list.map { |i| i * 2 }</code> 或 <code>list.each do |num| p num * 2 end</code> 的 Block 中，那個 <code>|i|</code> 和 <code>|num|</code> 是什麼？<br>Block 中包住 <code>i</code> 和 <code>num</code> 的 | 唸做 pipe，中間的 <code>i</code> 與 <code>num</code> 是匿名函數的參數，稱作 <code>token</code>，其實是 Block 範圍裡的區域變數，離開 Block 之後就會失效了。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">list.map &#123; <span class="params">|i|</span> i * <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment"># 變數 i 只有在 Block 裡有效，會產生 [2, 6, 10, 14, 18, 20, 24]</span></span><br><span class="line"></span><br><span class="line">list.each <span class="keyword">do</span> <span class="params">|num|</span></span><br><span class="line">  p num * <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 變數 num 只有在 Block 裡有效，會依序印出 2、6、10、14、18、20、24</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts i    <span class="comment"># 離開 Block 之後就失效，出現找不到變數的錯誤 (NameError)</span></span><br><span class="line">puts num  <span class="comment"># 離開 Block 之後就失效，出現找不到變數的錯誤 (NameError)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 變數名稱自定義，會取有意義的名稱，讓人看到能知道是什麼，而不是取無意義的 i</span></span><br></pre></td></tr></table></figure></p><p>所以， <code>i</code> 和 <code>num</code> 是怎麼來的？<br>事實上，它就只是你在使用 <code>yield</code> 方法把控制權轉讓給 Block 的時候，順便把值帶給 Block 而已。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_block</span></span></span><br><span class="line">  puts <span class="string">"開始"</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"媽，我在這"</span>  <span class="comment"># 也可寫 yield("媽，我在這")</span></span><br><span class="line">  puts <span class="string">"結束"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hi_block &#123; <span class="params">|x|</span> puts <span class="string">"這裡是 Block，<span class="subst">#&#123;x&#125;</span>"</span> &#125;</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line">開始</span><br><span class="line">這裡是 Block，媽，我在這</span><br><span class="line">結束</span><br><span class="line"> =&gt; nil</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br></pre></td></tr></table></figure></p><h3 id="yield-後面可以帶-1-個或以上的參數"><code>yield</code> 後面可以帶 1 個或以上的參數</h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 範例1 (帶 1 個參數)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_block</span></span></span><br><span class="line">  puts <span class="string">"開始"</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">123</span>         <span class="comment"># 把控制權暫時讓給 Block，並且傳數字 123 給 Block</span></span><br><span class="line">  puts <span class="string">"結束"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hi_block &#123; <span class="params">|x|</span>     <span class="comment"># 這個 x 是來自 yield 方法</span></span><br><span class="line">  puts <span class="string">"這裡是 Block，我收到了 <span class="subst">#&#123;x&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line">開始</span><br><span class="line">這裡是 Block，我收到了 <span class="number">123</span></span><br><span class="line">結束</span><br><span class="line"> =&gt; nil</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例2 (帶 2 個參數)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tow_parm</span></span></span><br><span class="line">  <span class="keyword">yield</span>(<span class="number">123</span>, <span class="string">"參數2"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tow_parm &#123; <span class="params">|m, n|</span></span><br><span class="line">  puts <span class="string">%Q(我說數字 <span class="subst">#&#123;m&#125;</span>，你回<span class="subst">#&#123;n&#125;</span>~)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line">我說數字 <span class="number">123</span>，你回參數<span class="number">2</span>~</span><br><span class="line"> =&gt; nil</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br></pre></td></tr></table></figure></p><h3 id="yield-進階使用"><code>yield</code> 進階使用</h3><p>範例 1：<br>第 7 行的 <code>i</code> 被 <code>yield</code> 出去找了第 11 行的 <code>i</code>， <code>x</code> 是實體變數 <code>@v</code> 用 <code>each</code> 方法印出陣列中的數字。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @v = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">each_print</span></span></span><br><span class="line">    @v.each &#123; <span class="params">|i|</span> puts <span class="keyword">yield</span> i &#125; <span class="keyword">if</span> block_given?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">i = <span class="string">"多看幾次就會理解了"</span></span><br><span class="line">a_obj = Map.new</span><br><span class="line">a_obj.each_print&#123; <span class="params">|x|</span> <span class="string">"<span class="subst">#&#123;i&#125;</span> <span class="subst">#&#123;x&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line">多看幾次就會理解了 <span class="number">1</span></span><br><span class="line">多看幾次就會理解了 <span class="number">2</span></span><br><span class="line">多看幾次就會理解了 <span class="number">3</span></span><br><span class="line">多看幾次就會理解了 <span class="number">4</span></span><br><span class="line"> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br></pre></td></tr></table></figure></p><p>範例 2：<br>第 4 行的 <code>yield</code> 將 counter 帶去 method 外面找 list 後面的 Block，因 first 預設為 1 ，得知 <code>yield</code> 後面的 counter 預設也為 1，成為外面 Block 中 <code>|ary|</code> 的參數，待 Block 執行完後再回到第 4 行繼續往下執行。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(array, first = <span class="number">1</span>)</span></span></span><br><span class="line">  counter = first</span><br><span class="line">  array.each <span class="keyword">do</span> <span class="params">|item|</span></span><br><span class="line">    puts <span class="string">"<span class="subst">#&#123;<span class="keyword">yield</span> counter&#125;</span>. <span class="subst">#&#123;item&#125;</span>"</span></span><br><span class="line">    counter = counter.<span class="keyword">next</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]) &#123; <span class="params">|ary|</span> ary * <span class="number">3</span> &#125;</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line"><span class="number">3</span>. a</span><br><span class="line"><span class="number">6</span>. b</span><br><span class="line"><span class="number">9</span>. c</span><br><span class="line"> =&gt; [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br><span class="line"></span><br><span class="line">list([<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>], <span class="number">100</span>) &#123; <span class="params">|ary|</span> ary * <span class="number">3</span> &#125;</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line"><span class="number">300</span>. a</span><br><span class="line"><span class="number">303</span>. b</span><br><span class="line"><span class="number">306</span>. c</span><br><span class="line"> =&gt; [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br><span class="line"></span><br><span class="line">list([<span class="string">"Ruby"</span>, <span class="string">"Is"</span>, <span class="string">"Fun"</span>], <span class="string">"A"</span>) &#123; <span class="params">|ary|</span> ary * <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line">AAA. Ruby</span><br><span class="line">BBB. Is</span><br><span class="line">CCC. Fun</span><br><span class="line"> =&gt; [<span class="string">"Ruby"</span>, <span class="string">"Is"</span>, <span class="string">"Fun"</span>]</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br></pre></td></tr></table></figure></p><h2 id="block-的回傳值">Block 的回傳值</h2><p>其實 <code>yield</code> 方法除了把控制權暫時的讓給後面的 Block 之外</p><h3 id="block-最後一行的執行結果也會自動變成-block-的回傳值">Block 最後一行的執行結果也會自動變成 Block 的回傳值</h3><p>所以可把 Block 當做判斷內容：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 範例1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span></span></span><br><span class="line">  puts <span class="string">"汪!!汪!!汪!!"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">dog &#123; puts <span class="string">"你看不見我~~"</span> &#125;                   <span class="comment"># 汪!!汪!!汪!!</span></span><br><span class="line"><span class="comment"># 如果沒有 yield，寫在 Block 裡面的東西，是不會有反應的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(list)</span></span></span><br><span class="line">  result = []</span><br><span class="line">  list.each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    result &lt;&lt; i <span class="keyword">if</span> <span class="keyword">yield</span>(i)                   <span class="comment"># 如果 yield 的回傳值是 true 的話...</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p say_hello([*<span class="number">1</span>..<span class="number">10</span>]) &#123; <span class="params">|x|</span> x % <span class="number">2</span> == <span class="number">0</span> &#125;      <span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line">p say_hello([*<span class="number">1</span>..<span class="number">10</span>]) &#123; <span class="params">|x|</span> x &lt; <span class="number">5</span> &#125;           <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">p say_hello([*<span class="number">1</span>..<span class="number">10</span>]) &#123; <span class="params">|x|</span> <span class="keyword">return</span> x &lt; <span class="number">5</span> &#125;    <span class="comment"># 會產生 LocalJumpError 的錯誤</span></span><br><span class="line">p say_hello([*<span class="number">1</span>..<span class="number">10</span>])                         <span class="comment"># 會產生 LocalJumpError (no block given (yield)) 錯誤訊息</span></span><br></pre></td></tr></table></figure></p><p>上述範例 <code>say_hello</code> 方法，會根據 Block 的設定條件，挑出符合條件的元素，需特別留意在 Block 裡加入 <code>return</code> 會造成 <code>LocalJumpError</code> 的錯誤，因為 Block 不是一個方法，它不知道你要 <code>return</code> 到哪裡去而造成錯誤。</p><h2 id="block-不是參數">Block 不是參數</h2><p>Block 像寄生蟲一樣得依附或寄生在其他的方法或物件，但它不是參數，以下範例中， name 才是參數，但 Block 不是。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(name)</span></span></span><br><span class="line">  p name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hello(<span class="string">"小菜"</span>) &#123; puts <span class="string">"這是 Block"</span>&#125;   <span class="comment"># "小菜"</span></span><br></pre></td></tr></table></figure></p><p>上面這段程式碼執行後不會有任何錯誤，但 Block 裡面也不會被執行。</p><h2 id="怎判斷有無-block">怎判斷有無 Block？</h2><p>有一種狀況是方法裡有 <code>yield</code>，但是呼叫方法的時候卻沒有 Block 的話...<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span></span></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hello    <span class="comment"># 會產生 LocalJumpError (no block given (yield)) 錯誤訊息</span></span><br></pre></td></tr></table></figure></p><p>會出現 <code>LocalJumpError (no block given (yield))</code> 的錯誤訊息。</p><p>在這種狀況，要讓方法呼叫的時候也能正常執行</p><h3 id="可以使用-ruby-提供的一個判斷方法-block_given">可以使用 Ruby 提供的一個判斷方法 <code>block_given?</code></h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 範例1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_block</span></span></span><br><span class="line">  <span class="keyword">if</span> block_given?               <span class="comment"># 判斷執行方法的後面有沒有跟 Block</span></span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="string">"no block"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="comment"># 上面 5 行可簡寫成 block_given? ? yield : "no block"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hi_block                        <span class="comment"># "no block"</span></span><br><span class="line">hi_block &#123; <span class="string">"hello"</span> &#125;            <span class="comment"># "hello"</span></span><br><span class="line">hi_block <span class="keyword">do</span> <span class="string">"hello"</span> <span class="keyword">end</span>         <span class="comment"># "hello"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span></span></span><br><span class="line">  <span class="keyword">yield</span>(<span class="string">'小菜'</span>) <span class="keyword">if</span> block_given? <span class="comment"># 判斷執行方法的後面有沒有跟 Block</span></span><br><span class="line">  <span class="comment"># 也可寫 yield '小菜' if block_given?</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p hello_world                   <span class="comment"># nil</span></span><br><span class="line">hello_world &#123;<span class="params">|x|</span> puts <span class="string">"<span class="subst">#&#123;x&#125;</span>"</span> &#125;  <span class="comment"># 小菜</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(name)</span></span></span><br><span class="line">  <span class="keyword">yield</span> name <span class="keyword">if</span> block_given?    <span class="comment"># 判斷執行方法的後面有沒有跟 Block</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">say_hello(puts <span class="string">"hi"</span>)            <span class="comment"># hi</span></span><br></pre></td></tr></table></figure></p><h2 id="block-特性">Block 特性</h2><p>總結上述所說特性</p><blockquote><ol><li>不是物件、不是參數</li><li>不能單獨存在，只是附加在方法後面，等著被程式碼呼叫的一段程式碼。</li><li>Block 最後一行的執行結果也會自動變成 Block 的回傳值</li><li>Block 內不能使用 return</li><li>不能賦值給其他物件</li></ol></blockquote><h3 id="雖然-block-不是物件不能單獨存在">雖然 Block 不是物件，不能單獨存在</h3><h3 id="但-ruby-有內建兩個方法使-block-物件化且單獨存在-proc-和-lamda">但 Ruby 有內建兩個方法使 Block 物件化且單獨存在: Proc 和 Lamda</h3><h1 id="proc">Proc</h1><p>Proc 是程序物件，可以將 Ruby 的程式碼保存起來，並且在需要的時候再執行它，或當作 Block 傳入其他函數。</p><p>在 <code>Proc.new</code> 後面接一個 Block 就可以產生一個 Proc 的物件，物件化後就是一個參數，接著可以使用 <code>call</code> 方法來執行 Block 內的程式碼。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proc1 = Proc.new &#123; puts <span class="string">"Block 被物件化囉"</span> &#125;   <span class="comment"># 使用 Proc 類別可把 Block 物件化</span></span><br><span class="line"><span class="comment"># 也可以寫成</span></span><br><span class="line">proc2 = Proc.new <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"Block 被物件化囉"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">proc1.call    <span class="comment"># Block 被物件化囉</span></span><br><span class="line">proc2.call    <span class="comment"># Block 被物件化囉</span></span><br></pre></td></tr></table></figure></p><h2 id="proc-中不能加入-return">Proc 中不能加入 <code>return</code></h2><p><code>return</code> 不要寫在 Proc 的 Block 裡，否則程式碼執行到這段後就會停止(return 完後立即結束執行)，程式碼不會繼續往下走。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_proc</span></span></span><br><span class="line">  p <span class="string">"strat"</span></span><br><span class="line">    hi_proc = Proc.new &#123; <span class="keyword">return</span> <span class="string">"執行完這段就停止了"</span> &#125;</span><br><span class="line">    hi_proc.call</span><br><span class="line">  p <span class="string">"end"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p hi_proc</span><br><span class="line"><span class="comment"># 顯示結果如下</span></span><br><span class="line"><span class="string">"strat"</span></span><br><span class="line"><span class="string">"執行完這段就停止了"</span></span><br><span class="line"> =&gt; <span class="string">"執行完這段就停止了"</span></span><br><span class="line"><span class="comment"># 顯示結果如上</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># "end"不會印出，因為執行完第 3 行就停止了</span></span><br></pre></td></tr></table></figure></p><h2 id="proc-可帶參數">Proc 可帶參數</h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 範例1</span></span><br><span class="line">hi_river = Proc.new &#123; <span class="params">|name|</span> puts <span class="string">"你好，<span class="subst">#&#123;name&#125;</span>"</span>&#125;</span><br><span class="line"><span class="comment"># 也可寫成 hi_river = proc &#123; |name| puts "你好，#&#123;name&#125;" &#125;</span></span><br><span class="line"></span><br><span class="line">hi_river.call(<span class="string">"小菜在這裡"</span>)    <span class="comment"># 你好，小菜在這裡</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例2 (帶參數)</span></span><br><span class="line">cal = Proc.new &#123; <span class="params">|num|</span> num * <span class="number">5</span> &#125;</span><br><span class="line"><span class="comment"># 也可寫成 cal = proc &#123; |num| num * 5 &#125;</span></span><br><span class="line"></span><br><span class="line">cal.call(<span class="number">3</span>)                   <span class="comment"># 15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例3 (帶參數)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">total_price</span><span class="params">(price)</span></span></span><br><span class="line">  Proc.new &#123; <span class="params">|num|</span> num * price &#125;</span><br><span class="line">  <span class="comment"># 也可寫成 proc &#123; |num| num * price &#125;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">n1 = total_price(<span class="number">50</span>)</span><br><span class="line">n2 = total_price(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">puts <span class="string">"n1 要 <span class="subst">#&#123;n1.call(<span class="number">2</span>)&#125;</span> 元，而 n2 要 <span class="subst">#&#123;n2.call(<span class="number">5</span>)&#125;</span> 元"</span></span><br><span class="line"><span class="comment"># n1 要 100 元，而 n2 要 150 元</span></span><br></pre></td></tr></table></figure></p><h2 id="proc-呼叫方式">Proc 呼叫方式</h2><p>要執行一個 Proc 物件，除了 <code>call</code> 方法之外，還有以下幾種使用方法：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hi_river = Proc.new &#123; <span class="params">|name|</span> puts <span class="string">"你好，<span class="subst">#&#123;name&#125;</span>"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hi_river.call(<span class="string">"小菜在這裡"</span>)    <span class="comment"># 使用 call 方法</span></span><br><span class="line">hi_river.(<span class="string">"小菜在這裡"</span>)        <span class="comment"># 使用小括號(注意，方法後面有多一個小數點)</span></span><br><span class="line">hi_river[<span class="string">"小菜在這裡"</span>]         <span class="comment"># 使用中括號</span></span><br><span class="line">hi_river === <span class="string">"小菜在這裡"</span>      <span class="comment"># 使用三個等號</span></span><br><span class="line">hi_river.<span class="keyword">yield</span> <span class="string">"小菜在這裡"</span>    <span class="comment"># 使用 yield 方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述 5 種方法皆印出</span></span><br><span class="line"><span class="comment"># 你好，小菜在這裡</span></span><br></pre></td></tr></table></figure></p><h1 id="lambda">Lambda</h1><p>Block 除了能轉成 Proc，Block 也可以轉成 Lambda，與 Proc 有些微不同：</p><blockquote><ol><li><code>retrun</code> 值</li><li>參數的判斷方式 (是否會檢查參數的數量正確性)</li></ol></blockquote><h2 id="proc-lambda-怎麼分">Proc、Lambda 怎麼分</h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p1 = Proc.new &#123;<span class="params">|x|</span> x + <span class="number">1</span> &#125;</span><br><span class="line">p2 = proc &#123;<span class="params">|x|</span> x + <span class="number">1</span> &#125;    <span class="comment"># Proc 的另種寫法</span></span><br><span class="line">l1 = lambda &#123;<span class="params">|x|</span> x + <span class="number">1</span> &#125;</span><br><span class="line">l2 = -&gt;(x) &#123; x + <span class="number">1</span> &#125;      <span class="comment"># lambda 的另種寫法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts <span class="string">"p1: <span class="subst">#&#123;p1.lambda?&#125;</span>, <span class="subst">#&#123;p1.<span class="keyword">class</span>&#125;</span>"</span> <span class="comment"># p1: false, Proc</span></span><br><span class="line">puts <span class="string">"p2: <span class="subst">#&#123;p2.lambda?&#125;</span>, <span class="subst">#&#123;p2.<span class="keyword">class</span>&#125;</span>"</span> <span class="comment"># p2: false, Proc</span></span><br><span class="line">puts <span class="string">"l1: <span class="subst">#&#123;l1.lambda?&#125;</span>, <span class="subst">#&#123;l1.<span class="keyword">class</span>&#125;</span>"</span> <span class="comment"># l1: true, Proc</span></span><br><span class="line">puts <span class="string">"l2: <span class="subst">#&#123;l2.lambda?&#125;</span>, <span class="subst">#&#123;l2.<span class="keyword">class</span>&#125;</span>"</span> <span class="comment"># l2: true, Proc</span></span><br></pre></td></tr></table></figure></p><p>現在我們知道</p><h3 id="proc-和-lambda-一樣都是屬於-proc-物件">Proc 和 Lambda 一樣都是屬於 Proc 物件</h3><p>上面 <code>p1</code>、<code>p2</code>、<code>l1</code>、<code>l2</code> 都可以使用 <code>call</code> 方法來執行，其中我們可以用 <code>lambda?</code> 來判斷它是不是 Lambda，如果不是那它就是 Proc。</p><h2 id="lambda-裡可加入-return">Lambda 裡可加入 <code>return</code></h2><p>Lambda 與 Proc 的其中一個差異是 <code>return</code> 值不一樣<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_lambda</span></span></span><br><span class="line">  p <span class="string">"strat"</span></span><br><span class="line">    hi_lambda = lambda &#123; <span class="keyword">return</span> p <span class="string">"會繼續往下執行"</span> &#125;</span><br><span class="line">    hi_lambda.call</span><br><span class="line">  p <span class="string">"end"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p hi_lambda</span><br><span class="line"><span class="comment"># 顯示結果如下</span></span><br><span class="line"><span class="string">"strat"</span></span><br><span class="line"><span class="string">"會繼續往下執行"</span></span><br><span class="line"><span class="string">"end"</span></span><br><span class="line"><span class="string">"end"</span></span><br><span class="line"> =&gt; <span class="string">"end"</span></span><br><span class="line"><span class="comment"># 顯示結果如上</span></span><br></pre></td></tr></table></figure></p><p>一次比較 Proc 和 Lambda 的 return 值<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_return</span><span class="params">(callable_object)</span></span></span><br><span class="line">  callable_object.call * <span class="number">5</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">la = lambda &#123; <span class="keyword">return</span> <span class="number">10</span> &#125;  <span class="comment"># 也可寫成 la = -&gt;&#123; return 10 &#125;</span></span><br><span class="line">pr = proc &#123; <span class="keyword">return</span> <span class="number">10</span> &#125;    <span class="comment"># 也可寫成 pr = Proc.new &#123; return 10 &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts test_return(la) <span class="comment"># 50</span></span><br><span class="line">puts test_return(pr) <span class="comment"># 顯示 LocalJumpError 錯誤訊息</span></span><br></pre></td></tr></table></figure></p><blockquote><blockquote><p>Lambda 的 return 是從 Lambda return</p></blockquote><blockquote><p>Proc 則是從定義 Proc 的 scope return</p></blockquote></blockquote><p>講得很清楚，聽得很模糊嗎? 直接看 code 理解<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_proc</span></span></span><br><span class="line">  pr = Proc.new &#123; <span class="keyword">return</span> <span class="number">10</span> &#125;</span><br><span class="line">  result = pr.call</span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">5</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_lambda</span></span></span><br><span class="line">  la = lambda &#123; <span class="keyword">return</span> <span class="number">10</span> &#125;</span><br><span class="line">  result = la.call</span><br><span class="line">  <span class="keyword">return</span> result * <span class="number">5</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts test_proc   <span class="comment"># 10</span></span><br><span class="line">puts test_lambda <span class="comment"># 50</span></span><br></pre></td></tr></table></figure></p><p><code>test_proc</code> 在 <code>pr.call</code> 那行就 retrun 結束執行了，而 <code>test_lambda</code> 可以執行完方法中的每行程式。</p><h2 id="lambda-處理參數較嚴謹">Lambda 處理參數較嚴謹</h2><blockquote><p>Proc 處理參數較有彈性，而 Lambda 較嚴謹<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pr = proc &#123; <span class="params">|a, b|</span> [a, b] &#125;    <span class="comment"># 也可寫成 pr = Proc.new&#123; |a, b| [a, b] &#125;</span></span><br><span class="line">la = lambda &#123; <span class="params">|a, b|</span> [a, b] &#125;  <span class="comment"># 也可寫成 la = -&gt;(a, b)&#123; [a, b] &#125;</span></span><br><span class="line"></span><br><span class="line">p pr.call(<span class="number">5</span>, <span class="number">6</span>)     <span class="comment"># [5, 6]</span></span><br><span class="line">p pr.call           <span class="comment"># [nil, nil]</span></span><br><span class="line">p pr.call(<span class="number">5</span>)        <span class="comment"># [5, nil]</span></span><br><span class="line">p pr.call(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)  <span class="comment"># [5, 6]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p la.call(<span class="number">5</span>, <span class="number">6</span>)     <span class="comment"># [5, 6]</span></span><br><span class="line">p la.call           <span class="comment"># 顯示 ArgumentError 錯誤訊息</span></span><br><span class="line">p la.call(<span class="number">5</span>)        <span class="comment"># 顯示 ArgumentError 錯誤訊息</span></span><br><span class="line">p la.call(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)  <span class="comment"># 顯示 ArgumentError 錯誤訊息</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>Proc 針對參數的數量不會進行檢查，不足補 nil ，過多會自動丟掉；Lambda 會要求參數數量正確才會執行，較嚴謹，否則會顯示 ArgumentError 錯誤訊息。</strong></p><h2 id="rails-的-scope-為什麼用-lambda">Rails 的 scope 為什麼用 Lambda？</h2><p>假設我們寫會帶入參數的 scope<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scope <span class="symbol">:product_price</span>, -&gt; (type) &#123; where(<span class="symbol">price:</span> type) &#125;</span><br></pre></td></tr></table></figure></p><p>以 Proc 來做的話，<code>Prodct.product_price</code> 沒帶參數時，SQL query 依舊能夠執行，不會噴錯，因為 Proc 會將沒帶入的參數值預設為 nil ，在 SQL query 等同於執行 <code>where(price: nil)</code> ，會出現你預料外的狀況，在 Debug 會比較不好找。</p><p>反而 Lambda 能夠確保參數的數量正確性，過多或太少皆會 error 告訴你不能這麼做，避免不必要的狀況。</p><p>這也就是為什麼 Rails 中的 <code>ActiveRecord</code> model 在使用 scope 時，會用 Lambda 進行傳遞，原因是相比 Proc 來說，更為謹慎。</p><p>反而 Lambda 表現更像是常見的匿名函數。</p><h1 id="使用-amp-符號將-block-與-proc-lambda-轉換">使用 <code>&amp;</code> 符號將 Block 與 Proc、Lambda 轉換</h1><h2 id="block-轉成-proc-lambda">Block 轉成 Proc、Lambda</h2><p>在 Rails 當中，假如我們要從資料庫找出所有使用者的姓名，利用 map 的話，寫法如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Block 轉 Proc 範例</span></span><br><span class="line">names = User.all.map &#123; <span class="params">|user|</span> user[<span class="symbol">:name</span>] &#125;</span><br><span class="line"><span class="comment"># 組成一個全都是姓名的 Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可寫成</span></span><br><span class="line">names = User.all.map(&amp;<span class="symbol">:name</span>)</span><br><span class="line"><span class="comment"># 將 Block 轉 Proc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Block 轉 Proc 範例</span></span><br><span class="line">pp = Proc.new &#123; <span class="params">|x|</span> puts x * <span class="number">2</span> &#125;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each(&amp;pp)</span><br><span class="line"><span class="comment"># 原形 [1, 2, 3].each&#123; |i| pp[i] &#125;</span></span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Block 轉 Lambda 範例            </span></span><br><span class="line">lam = lambda &#123; <span class="params">|x|</span> puts x * <span class="number">2</span> &#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].each(&amp;lam)</span><br><span class="line"><span class="comment"># 原形 [1, 2, 3].each&#123; |i| lam[i] &#125;</span></span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"> =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br></pre></td></tr></table></figure></p><p>那個奇怪的 <code>&amp;</code> 符號代表帶入一個 Proc 或 lambda，將 Block 轉成 Proc 使用。</p><h2 id="proc-或-lambda-轉成-block">Proc 或 lambda 轉成 Block</h2><p>剛才介紹 <code>&amp;</code> 的其中一個用法，那就是在方法宣告同時，指定從 Block 轉成 Proc 或 Lambda，除此 <code>&amp;</code> 還可以把 Proc 或 Lambda 轉成 Block：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hi_proc(<span class="string">"Hahaha"</span>, &amp;proc&#123; <span class="params">|s|</span> puts s&#125; )</span><br><span class="line"></span><br><span class="line">hi_lambda = (<span class="number">1</span>..<span class="number">5</span>).map &amp;-&gt;(x)&#123; x*x &#125;</span><br></pre></td></tr></table></figure></p><p>當 Proc 或 Lambda 碰到 <code>&amp;</code> 之後，會轉換成 Block，所以以上的示範意義與下相同：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hi_proc(<span class="string">"Hahaha"</span>)&#123; <span class="params">|s|</span> puts s &#125;</span><br><span class="line"></span><br><span class="line">hi_lambda = (<span class="number">1</span>..<span class="number">5</span>).map &#123; <span class="params">|x|</span> x * x &#125;</span><br></pre></td></tr></table></figure></p><h2 id="ampblock-放參數最後面"><code>&amp;block</code> 放參數最後面</h2><p>Block 無法得知被物件化(參數化)後的 Block，需在最後一個參數前面加上 <code>&amp;</code> ，這東西只能有一個，且必須放在最後面，否則會出現 syntax error。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 錯誤示範</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_block</span><span class="params">(&amp;p, n)</span></span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_block</span><span class="params">(n, &amp;p1, &amp;p2)</span></span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hi_block1</span><span class="params">(str, &amp;test01)</span></span></span><br><span class="line">  <span class="string">"<span class="subst">#&#123;str&#125;</span> <span class="subst">#&#123;test01.call(<span class="number">18</span>)&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hi_block1(<span class="string">"Hello"</span>) &#123; <span class="params">|age|</span> <span class="string">"I'm <span class="subst">#&#123;age&#125;</span> years old."</span> &#125;</span><br><span class="line"><span class="comment"># "Hello I'm 18 years old."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp_b1</span></span></span><br><span class="line">  <span class="keyword">yield</span>(<span class="string">"參數1"</span>) <span class="comment"># 小括號可省略</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp_b2</span><span class="params">(&amp;block)</span></span></span><br><span class="line">  block.call(<span class="string">"參數2"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">block1 = Proc.new &#123;<span class="params">|x|</span> puts <span class="string">"這是 Proc <span class="subst">#&#123;x&#125;</span>"</span>&#125;</span><br><span class="line">block2 = lambda &#123;<span class="params">|x|</span> puts <span class="string">"這是 lambda <span class="subst">#&#123;x&#125;</span>"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">temp_b1 &#123; <span class="params">|x|</span> puts <span class="string">"block0 <span class="subst">#&#123;x&#125;</span>"</span> &#125;  <span class="comment"># block0 參數1</span></span><br><span class="line">temp_b1(&amp;block1)                    <span class="comment"># 這是 Proc 參數1</span></span><br><span class="line">temp_b2(&amp;block2)                    <span class="comment"># 這是 lambda 參數2</span></span><br></pre></td></tr></table></figure></p><p>看完會發現 Ruby 中的 <code>&amp;</code> 非常的神奇，背後做了很多事情，實際上它是生出一個 Proc 物件，雖然好用，但若不了解背後原理的話，會不知怎麼用、錯在哪。</p><h2 id="有兩個以上-ampblock-該怎辦">有兩個以上 <code>&amp;block</code> 該怎辦？</h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_block</span><span class="params">(n, p1, p2)</span></span></span><br><span class="line">  p1[n]      <span class="comment"># 等同於 p1.call(n)</span></span><br><span class="line">  p2.call n  <span class="comment"># 括號可省略</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">two_block(<span class="string">'River'</span>, proc &#123; <span class="params">|i|</span> puts <span class="string">"<span class="subst">#&#123;i&#125;</span> 1"</span> &#125;, Proc.new &#123; <span class="params">|i|</span> puts <span class="string">"<span class="subst">#&#123;i&#125;</span> 2"</span> &#125; )</span><br><span class="line"><span class="comment"># 印出結果如下</span></span><br><span class="line">River <span class="number">1</span></span><br><span class="line">River <span class="number">2</span></span><br><span class="line"> =&gt; nil</span><br><span class="line"><span class="comment"># 印出結果如上</span></span><br></pre></td></tr></table></figure></p><p>建立一個 Proc 物件，並當參數傳入即可，但還是得在建立同時寫 Block 給 Proc.new 方法。乍看之下很冗長又不好看，當想同時傳入多個 Block 作為參數時，適用此技。</p><h1 id="小結">小結</h1><p>這篇很燒腦，找蠻多資料參考，從一開始撰寫時不太清楚，到後來能解釋，過程中有感覺變強一些。</p><p>寫不清楚或錯誤部分，歡迎提出討論。</p><hr><h1 id="參考">參考</h1><ol><li><a href="https://railsbook.tw/chapters/07-ruby-basic-3.html" target="_blank" rel="noopener">為你自己學 Ruby on Rails</a></li><li><a href="https://5xruby.tw/posts/discover-ruby-block" target="_blank" rel="noopener">Ruby 探索：Blocks 深入淺出</a></li><li><a href="https://tonytonyjan.net/2011/08/12/ruby-block-proc-lambda" target="_blank" rel="noopener">Ruby Block, Proc and Lambda</a></li><li><a href="https://devfun.tw/t/method-block-yield-proc-lambda/110" target="_blank" rel="noopener">method / block / yield / Proc / lambda 全面解釋</a></li><li><a href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block" target="_blank" rel="noopener">Build, Break, Learn.</a></li><li><a href="https://stackoverflow.com/questions/1217088/what-does-mapname-mean-in-ruby" target="_blank" rel="noopener">What does map(&amp;:name) mean in Ruby?</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Ruby 中容易搞混(學不好)，且面試經常會被問的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「請說明 Block、Proc、Lambda 是什麼」&lt;br&gt;
「Block 中的 do..end 與 花括號 { } 差異」&lt;br&gt;
「請說明 Proc 與 Lambda
      
    
    </summary>
    
    
      <category term="Ruby" scheme="https://riverye.com/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://riverye.com/tags/Ruby/"/>
    
      <category term="Block" scheme="https://riverye.com/tags/Block/"/>
    
      <category term="Proc" scheme="https://riverye.com/tags/Proc/"/>
    
      <category term="Lambda" scheme="https://riverye.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>修改 Ubuntu 終端機的標題顯示(只顯示當前路徑 + Git branch)</title>
    <link href="https://riverye.com/2019/11/10/%E4%BF%AE%E6%94%B9-Ubuntu-%E7%B5%82%E7%AB%AF%E6%A9%9F%E7%9A%84%E6%A8%99%E9%A1%8C%E9%A1%AF%E7%A4%BA-%E5%8F%AA%E9%A1%AF%E7%A4%BA%E7%95%B6%E5%89%8D%E8%B7%AF%E5%BE%91-Git-branch/"/>
    <id>https://riverye.com/2019/11/10/修改-Ubuntu-終端機的標題顯示-只顯示當前路徑-Git-branch/</id>
    <published>2019-11-09T16:00:00.000Z</published>
    <updated>2019-11-10T04:17:49.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>看過<a href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/">這篇文章</a>會知道裡面有教學如何修改「<a href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/#ubuntu-%E8%B7%AF%E5%BE%91%E5%90%8D%E7%A8%B1%E5%A4%AA%E9%95%B7%E5%A6%82%E4%BD%95%E7%B8%AE%E7%9F%AD">Ubuntu 路徑名稱太長，如何縮短 ?</a>」，若仍覺得顯示整個資料夾路徑很長，並想知道目前資料夾的 Git branch 的話，可參考以下方法，或<a href="http://xta.github.io/HalloweenBash" target="_blank" rel="noopener">參考這個網站 Bash Profile Generator</a>，先在網頁上改成想要的效果後，再把 code 貼回 <code>~/.bashrc</code></p><h1 id="開始前">開始前</h1><p>建議先把 <code>~/.bashrc</code> 備份，預防萬一</p><h1 id="步驟">步驟</h1><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>修改約第 60 行 <code>$color_prompt</code> 的內容</p><p><strong>是否顯示完整路徑差別在於 w 的大小寫，小寫 w 為完整路徑，大寫 W 為當前路徑</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 修改前</span><br><span class="line">PS1=&apos;$&#123;debian_chroot:+($debian_chroot)&#125;\[[\033[01;32m\]\w\[\033[00m\]]\$ &apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改後 + Git branch (顯示完整路徑)</span><br><span class="line">function parse_git_branch &#123;</span><br><span class="line">git branch --no-color 2&gt; /dev/null | sed -e &apos;/^[^*]/d&apos; -e &apos;s/* \(.*\)/(\1)/&apos;</span><br><span class="line">&#125;</span><br><span class="line">export PS1=&apos;$&#123;debian_chroot:+($debian_chroot)&#125;\[[\033[01;32m\]\w\[\033[00m\]]\033[01;32m\]$(parse_git_branch)\[\033[00m\]$ &apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改後 + Git branch (只顯示當前路徑)</span><br><span class="line">function parse_git_branch &#123;</span><br><span class="line">git branch --no-color 2&gt; /dev/null | sed -e &apos;/^[^*]/d&apos; -e &apos;s/* \(.*\)/(\1)/&apos;</span><br><span class="line">&#125;</span><br><span class="line">export PS1=&apos;$&#123;debian_chroot:+($debian_chroot)&#125;\[[\033[01;32m\]\W\[\033[00m\]]\033[01;32m\]$(parse_git_branch)\[\033[00m\]$ &apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/lNSbnt8.png" alt></p><h1 id="顯示效果">顯示效果</h1><p>修改儲存離開後，輸入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>即可看到修改狀態 (免重開 Ubuntu)</p><p><img src="https://i.imgur.com/1vP21Dh.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;看過&lt;a href=&quot;https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Gi
      
    
    </summary>
    
    
      <category term="教學文" scheme="https://riverye.com/categories/%E6%95%99%E5%AD%B8%E6%96%87/"/>
    
    
      <category term="Ubuntu" scheme="https://riverye.com/tags/Ubuntu/"/>
    
      <category term="terminal" scheme="https://riverye.com/tags/terminal/"/>
    
      <category term="git branch" scheme="https://riverye.com/tags/git-branch/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 踩到的雷(導覽列及站內搜尋功能)</title>
    <link href="https://riverye.com/2019/11/09/Hexo-%E8%B8%A9%E5%88%B0%E7%9A%84%E9%9B%B7-%E5%B0%8E%E8%A6%BD%E5%88%97%E5%8F%8A%E7%AB%99%E5%85%A7%E6%90%9C%E5%B0%8B%E5%8A%9F%E8%83%BD/"/>
    <id>https://riverye.com/2019/11/09/Hexo-踩到的雷-導覽列及站內搜尋功能/</id>
    <published>2019-11-08T16:00:00.000Z</published>
    <updated>2019-11-09T02:57:53.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="說在前面">說在前面</h1><blockquote><p>越小的細節，雷說不定越多</p></blockquote><p>最近對這段很有感觸，偶爾會遇到預料外的雷，需要花時間 debug，這次遇到的問題，之前踩過一次並解決，但沒記錄下來，隨<a href="https://zh.wikipedia.org/wiki/%E9%81%BA%E5%BF%98%E6%9B%B2%E7%B7%9A" target="_blank" rel="noopener">遺忘曲線</a>，生疏或健忘是可能的。</p><p><img src="https://i.imgur.com/2ICL0V9.png" alt></p><hr><h1 id="遇到的問題">遇到的問題</h1><ol><li>Blog 文章的側邊欄導覽列 Catalog 點擊時無法跳到對應位置，會顯示 null</li><li>Blog 站內搜尋突然失效無法使用</li></ol><h1 id="分析問題">分析問題</h1><p>新增「<a href="https://riverye.com/2019/11/08/%E6%9C%89%E8%B6%A3%E7%9A%84-4-%E9%A1%8C%E7%99%BD%E6%9D%BF%E9%A1%8C/">文章加密</a>」功能後，誤動到原本的 code。</p><h1 id="解決方法">解決方法</h1><h2 id="導覽列問題">導覽列問題</h2><h3 id="markdown-it-套件的-bug">markdown-it 套件的 bug</h3><p>安装 markdown-it-named-headings 來修復原本套件的 bug<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install markdown-it-named-headings --save</span><br></pre></td></tr></table></figure></p><p>進入 Blog 的根目錄修改 <code>node_modules\hexo-renderer-markdown-it\lib\renderer.js</code> 檔案，並在第 9 行後面新增如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.use(<span class="built_in">require</span>(<span class="string">'markdown-it-named-headings'</span>))</span><br></pre></td></tr></table></figure></p><p>修改後會像這樣：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">data, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> MdIt = <span class="built_in">require</span>(<span class="string">'markdown-it'</span>);</span><br><span class="line">  <span class="keyword">var</span> cfg = <span class="keyword">this</span>.config.markdown;</span><br><span class="line">  <span class="keyword">var</span> opt = (cfg) ? cfg : <span class="string">'default'</span>;</span><br><span class="line">  <span class="keyword">var</span> parser = (opt === <span class="string">'default'</span> || opt === <span class="string">'commonmark'</span> || opt === <span class="string">'zero'</span>) ?</span><br><span class="line">    <span class="keyword">new</span> MdIt(opt) :</span><br><span class="line">    <span class="keyword">new</span> MdIt(opt.render);</span><br><span class="line"></span><br><span class="line">  parser.use(<span class="built_in">require</span>(<span class="string">'markdown-it-named-headings'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opt.plugins) &#123;</span><br><span class="line">    parser = opt.plugins.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">parser, pugs</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> parser.use(<span class="built_in">require</span>(pugs));</span><br><span class="line">    &#125;, parser);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opt.anchors) &#123;</span><br><span class="line">    parser = parser.use(<span class="built_in">require</span>(<span class="string">'./anchors'</span>), opt.anchors);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parser.render(data.text);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接著 <code>hexo clean</code> 及 <code>hexo server</code> 測試是否解決問題<br>若解決，則恭喜你~</p><p>尚未解決請繼續往下看<br>改進入 Blog 根目錄 <code>node_modules\hexo-toc\lib\filter.js</code> ，把 28-31 行改成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$title.attr(<span class="string">'id'</span>, id);</span><br><span class="line"><span class="comment">// $title.children('a').remove();</span></span><br><span class="line"><span class="comment">// $title.html( '&lt;span id="' + id + '"&gt;' + $title.html() + '&lt;/span&gt;' );</span></span><br><span class="line"><span class="comment">// $title.removeAttr('id');</span></span><br></pre></td></tr></table></figure></p><blockquote><p>修改後，記得 <code>hexo clean</code> 及 <code>hexo server</code> ，「用無痕模式測試」，確保不受暫存檔影響。</p></blockquote><h3 id="造成原因">造成原因</h3><p>找的 theme 已經很久沒更新了，更新後導致 <code>hexo-toc</code> 不相容的問題。</p><p>沒踩到此雷的可能原因：</p><ol><li>theme 持續更新已解決問題</li><li>舊版本沒更新</li></ol><hr><h2 id="站內搜尋失效的問題">站內搜尋失效的問題</h2><h3 id="algolia-服務">Algolia 服務</h3><p>站內搜尋使用 <a href="https://www.algolia.com/" target="_blank" rel="noopener">Algolia</a> 服務製作而成，註冊後享有 14 天內所有功能免費使用，到期後需「手動」選擇免費方案，否則無法繼續使用。</p><p>解決方法其實已經在描述中，到 Algolia 選擇免費方案即可。</p><p>補充紀錄 <code>_config.yml</code> 設定：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog 根目錄的 _config.yml</span></span><br><span class="line"><span class="symbol">algolia:</span></span><br><span class="line">  <span class="symbol">applicationID:</span> <span class="number">5</span>XXXXXXXR</span><br><span class="line">  <span class="symbol">apiKey:</span> eXXXXXXXXXXXXXXXXXXXXXXXXXXXX5</span><br><span class="line">  <span class="symbol">indexName:</span> rXXXXXXXg</span><br><span class="line">  <span class="symbol">chunkSize:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Blog 根目錄底下的/themes/&lt;主題名稱&gt;/_config.yml</span></span><br><span class="line"><span class="symbol">algolia_search:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">hits:</span></span><br><span class="line">    <span class="symbol">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="symbol">labels:</span></span><br><span class="line">    <span class="symbol">input_placeholder:</span> Search <span class="keyword">for</span> Posts</span><br><span class="line">    <span class="symbol">hits_empty:</span> <span class="string">"沒有找到任何搜尋結果： $&#123;query&#125;"</span></span><br><span class="line">    <span class="symbol">hits_stats:</span> <span class="string">"約有 $&#123;hits&#125; 項結果 (搜尋時間： $&#123;time&#125; 毫秒)"</span></span><br></pre></td></tr></table></figure></p><p>每次新增文章後，都要做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ export HEXO_ALGOLIA_INDEXING_KEY=eXXXXXXXXXXXXXXXXXXXXXXXXXXXX5</span><br><span class="line">$ hexo algolia</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/vJsVr3O.png" alt></p><hr><h1 id="小結">小結</h1><p>透過 <a href="https://zh.wikipedia.org/wiki/%E9%B4%A8%E5%AD%90%E9%A1%9E%E5%9E%8B" target="_blank" rel="noopener">Duck typing</a> 的方式，在描述問題的過程中，答案說不定就在裡面~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;說在前面&quot;&gt;說在前面&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;越小的細節，雷說不定越多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近對這段很有感觸，偶爾會遇到預料外的雷，需要花時間 debug，這次遇到的問題，之前踩過一次並解決，但沒記錄下來，隨&lt;a href
      
    
    </summary>
    
    
      <category term="踩到的雷" scheme="https://riverye.com/categories/%E8%B8%A9%E5%88%B0%E7%9A%84%E9%9B%B7/"/>
    
    
      <category term="Hexo" scheme="https://riverye.com/tags/Hexo/"/>
    
      <category term="導覽列" scheme="https://riverye.com/tags/%E5%B0%8E%E8%A6%BD%E5%88%97/"/>
    
      <category term="站內搜尋" scheme="https://riverye.com/tags/%E7%AB%99%E5%85%A7%E6%90%9C%E5%B0%8B/"/>
    
  </entry>
  
  <entry>
    <title>有趣的 4 題白板題</title>
    <link href="https://riverye.com/2019/11/08/%E6%9C%89%E8%B6%A3%E7%9A%84-4-%E9%A1%8C%E7%99%BD%E6%9D%BF%E9%A1%8C/"/>
    <id>https://riverye.com/2019/11/08/有趣的-4-題白板題/</id>
    <published>2019-11-07T16:00:00.000Z</published>
    <updated>2019-11-07T16:06:51.749Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="猜對就給你看">    <label for="hbePass">猜對就給你看</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5a15fba1ef3441cd9932603d0060c24fc874f9c42a76a4d7644806625cf7bc4b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      輸入密碼才看的到喔
    
    </summary>
    
    
      <category term="Ruby" scheme="https://riverye.com/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="https://riverye.com/tags/Ruby/"/>
    
      <category term="method" scheme="https://riverye.com/tags/method/"/>
    
      <category term="keyword arguments" scheme="https://riverye.com/tags/keyword-arguments/"/>
    
      <category term="block" scheme="https://riverye.com/tags/block/"/>
    
  </entry>
  
  <entry>
    <title>來個三題 LeetCode easy 吧</title>
    <link href="https://riverye.com/2019/11/07/%E4%BE%86%E5%80%8B%E4%B8%89%E9%A1%8C-Leetcode-easy-%E5%90%A7/"/>
    <id>https://riverye.com/2019/11/07/來個三題-Leetcode-easy-吧/</id>
    <published>2019-11-06T16:00:00.000Z</published>
    <updated>2019-11-07T14:53:53.903Z</updated>
    
    <content type="html"><![CDATA[<p>近期被問到用 Ruby 解三題 <a href="https://leetcode.com" target="_blank" rel="noopener">LeetCode</a> easy 題目，分別是：</p><ol><li><a href="https://leetcode.com/problems/single-number" target="_blank" rel="noopener">136. Single Number</a></li><li><a href="https://leetcode.com/problems/add-digits" target="_blank" rel="noopener">258. Add Digits</a></li><li><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array" target="_blank" rel="noopener">448. Find All Numbers Disappeared in an Array</a></li></ol><h2 id="題目">題目</h2><h3 id="題目136-single-number">題目(<a href="https://leetcode.com/problems/single-number" target="_blank" rel="noopener">136. Single Number</a>)：</h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Given a non-empty array of integers, every element appears twice except <span class="keyword">for</span> one. Find that single one.</span><br><span class="line"></span><br><span class="line"><span class="symbol">Note:</span></span><br><span class="line"></span><br><span class="line">Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</span><br><span class="line"></span><br><span class="line">Example <span class="number">1</span><span class="symbol">:</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Input:</span> [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="symbol">Output:</span> <span class="number">1</span></span><br><span class="line">Example <span class="number">2</span><span class="symbol">:</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Input:</span> [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="symbol">Output:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_number</span><span class="params">(nums)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="題目258-add-digits">題目(<a href="https://leetcode.com/problems/add-digits" target="_blank" rel="noopener">258. Add Digits</a>)：</h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Given a non-negative integer num, repeatedly add all its digits <span class="keyword">until</span> the result has only one digit.</span><br><span class="line"></span><br><span class="line"><span class="symbol">Example:</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Input:</span> <span class="number">38</span></span><br><span class="line"><span class="symbol">Output:</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">Explanation:</span> The process is <span class="symbol">like:</span> <span class="number">3</span> + <span class="number">8</span> = <span class="number">11</span>, <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span>.</span><br><span class="line">             Since <span class="number">2</span> has only one digit, <span class="keyword">return</span> it.</span><br><span class="line">Follow <span class="symbol">up:</span></span><br><span class="line">Could you <span class="keyword">do</span> it without any loop/recursion <span class="keyword">in</span> O(<span class="number">1</span>) runtime?</span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer&#125; num</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_digits</span><span class="params">(num)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="題目448-find-all-numbers-disappeared-in-an-array">題目(<a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array" target="_blank" rel="noopener">448. Find All Numbers Disappeared in an Array</a>)：</h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers where <span class="number">1</span> ≤ a[i] ≤ n (n = size of array), some elements appear twice <span class="keyword">and</span> others appear once.</span><br><span class="line"></span><br><span class="line">Find all the elements of [<span class="number">1</span>, n] inclusive that <span class="keyword">do</span> <span class="keyword">not</span> appear <span class="keyword">in</span> this array.</span><br><span class="line"></span><br><span class="line">Could you <span class="keyword">do</span> it without extra space <span class="keyword">and</span> <span class="keyword">in</span> O(n) runtime? You may assume the returned list does <span class="keyword">not</span> count as extra space.</span><br><span class="line"></span><br><span class="line"><span class="symbol">Example:</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Input:</span></span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="symbol">Output:</span></span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">@param</span> &#123;Integer[]&#125; nums</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> &#123;Integer[]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_disappeared_numbers</span><span class="params">(nums)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="答案">答案</h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 136. Single Number</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_number</span><span class="params">(nums)</span></span></span><br><span class="line">  <span class="comment"># 原本寫法 (時間複雜度不會過)</span></span><br><span class="line">  <span class="comment"># nums.select&#123; |x| nums.count(x) == 1&#125;.first</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 後來寫法</span></span><br><span class="line">  <span class="comment"># XOR 數位邏輯的互斥或閘(XOR)</span></span><br><span class="line">  nums.inject(<span class="symbol">:^</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 258. Add Digits</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_digits</span><span class="params">(num)</span></span></span><br><span class="line">  <span class="comment"># 原本寫法</span></span><br><span class="line">  <span class="keyword">return</span> num <span class="keyword">if</span> num &lt; <span class="number">10</span></span><br><span class="line">  add_digits(num / <span class="number">10</span> + num % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 後來寫法</span></span><br><span class="line">  <span class="comment"># 使用三元運算、遞迴</span></span><br><span class="line">  num &lt; <span class="number">10</span> ? num : add_digits(num / <span class="number">10</span> + num % <span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 448. Find All Numbers Disappeared in an Array</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_disappeared_numbers</span><span class="params">(nums)</span></span></span><br><span class="line">  [*<span class="number">1</span>..nums.size] - nums</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="小結">小結</h2><ol><li>先搞懂題目問什麼</li><li>可以先用 RSpec 在本地端測試 (可忽略步驟 2.)</li><li>再丟到 LeetCode 上測試</li><li><a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6" target="_blank" rel="noopener">時間複雜度</a>沒過再來思考如何解決 (先求有再求好)</li></ol>]]></content>
    
    <summary type="html">
    
      面試題目
    
    </summary>
    
    
      <category term="Ruby" scheme="https://riverye.com/categories/Ruby/"/>
    
    
      <category term="Leetcode" scheme="https://riverye.com/tags/Leetcode/"/>
    
      <category term="刷題" scheme="https://riverye.com/tags/%E5%88%B7%E9%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>修復 BIOS Boot Sequence 找不到 Windows 10</title>
    <link href="https://riverye.com/2019/11/03/%E4%BF%AE%E5%BE%A9-BIOS-Boot-Sequence-%E6%89%BE%E4%B8%8D%E5%88%B0-Windows-10/"/>
    <id>https://riverye.com/2019/11/03/修復-BIOS-Boot-Sequence-找不到-Windows-10/</id>
    <published>2019-11-02T16:00:00.000Z</published>
    <updated>2019-11-03T05:55:44.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="環境介紹">環境介紹</h1><p>新買 SSD M.2 SATA 240GB 當作主要系統裝到品牌電腦，並將原本品牌電腦中的 HDD 格式化後當資料碟使用，預計安裝作業系統如下</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作業系統：Windows <span class="number">10</span> x64</span><br><span class="line">系統版本：<span class="number">1903</span> (OS 組建 <span class="number">18362.418</span>)</span><br></pre></td></tr></table></figure></p><h1 id="什麼情況需要">什麼情況需要?</h1><p>安裝作業系統後，發現 BIOS 在 UEFI 及 Legacy Boot 皆抓不到安裝後的作業系統，且顯示「No bootable devices found.」</p><h1 id="開始前">開始前</h1><p>若有資料請先用 <a href="https://www.google.com/search?q=WinPE&amp;oq" target="_blank" rel="noopener">WinPE</a> 或其他方式將資料備份再開始進行。<br>若是新硬碟則沒有備份資料問題。</p><h1 id="操作流程">操作流程</h1><ol><li><p>自行準備 <a href="https://www.microsoft.com/zh-tw/download/windows-usb-dvd-download-tool" target="_blank" rel="noopener">USB Windows 10 安裝作業系統</a>，確認能用 USB 安裝作業系統。<br>備註：光碟安裝也 OK，速度較慢，建議以 USB 3.0 以上隨身碟安裝較快。</p></li><li><p>先將 BIOS 改 Legacy Boot，並以 USB 為開機第一順位。</p></li><li><p>安裝作業系統。</p></li><li><p>安裝完作業系統重開後，顯示「No bootable devices found.」，接著重開機回 USB 安裝作業系統內。</p></li><li><p>鍵盤同時鍵入「Shift + F10」，會跳出 Windows 命令提示字元 (cmd.exe)</p></li><li><p>進入 diskaprt 模式</p></li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br></pre></td></tr></table></figure></p><ol start="7"><li>檢視所有磁碟機</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list disk</span><br></pre></td></tr></table></figure></p><ol start="8"><li>選擇已安裝作業系統的磁碟</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select disk 1</span><br><span class="line"></span><br><span class="line"># select disk &lt;你的磁碟數字代號&gt;</span><br></pre></td></tr></table></figure></p><ol start="9"><li>顯示所有磁碟區</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list volume</span><br></pre></td></tr></table></figure></p><ol start="10"><li>選擇已安裝作業系統中磁碟容量約 557 MB 左右的磁碟</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select volume 2</span><br><span class="line"></span><br><span class="line"># select volume &lt;你的磁碟數字代號&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/OV3gwQy.png" alt></p><ol start="11"><li>移除磁碟代號並指定磁碟代號</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remove letter=c</span><br><span class="line"></span><br><span class="line">assign letter=l</span><br></pre></td></tr></table></figure></p><ol start="12"><li>選擇已安裝作業系統磁碟</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select volume 1</span><br></pre></td></tr></table></figure></p><ol start="13"><li>移除磁碟代號並指定磁碟代號</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remove letter=d</span><br><span class="line"></span><br><span class="line">assign letter=c</span><br></pre></td></tr></table></figure></p><ol start="14"><li>確認是否修改成功</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list volume</span><br></pre></td></tr></table></figure></p><ol start="15"><li>選擇磁碟容量約 557 MB 左右的磁碟</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select volume 2</span><br></pre></td></tr></table></figure></p><ol start="16"><li>調整格式</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FORMAT FS=FAT32 LABEL=&quot;BOOT&quot;</span><br><span class="line"></span><br><span class="line"># 會需要跑幾秒</span><br></pre></td></tr></table></figure></p><ol start="17"><li>離開 diskpart 模式</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></p><ol start="18"><li>路徑改磁碟機 l:</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l:</span><br></pre></td></tr></table></figure></p><ol start="19"><li>手動設定 <a href="https://www.google.com/search?q=bcdboot&amp;oq" target="_blank" rel="noopener">BCDBoot</a></li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">md efi</span><br><span class="line">cd edi</span><br><span class="line"></span><br><span class="line">md microsoft</span><br><span class="line">cd microsoft</span><br><span class="line"></span><br><span class="line">md boot</span><br><span class="line">cd boot</span><br><span class="line"></span><br><span class="line">bootrec /fixboot</span><br><span class="line">bcdboot c:\Windows /l en-us /s l: /f ALL</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><ol start="20"><li><p>關機，拔隨身碟</p></li><li><p>開機，確認是否會繼續執行 Windows 10</p></li><li><p>將 BIOS 的 Legacy Boot 改回 UEFI</p></li></ol><h1 id="小結">小結</h1><p>正常情況下，不太會遇到這問題，但某些品牌電腦安裝作業系統時，可能會踩到這雷，會花比較多時間和 BIOS 及指令交戰，由於太深刻了，寫此文紀錄解決方法，有更好方法歡迎在底下留言討論。</p><h1 id="參考">參考</h1><p><a href="https://youtu.be/6C0V7bneycU" target="_blank" rel="noopener">No UEFI Compatible file system was found.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;環境介紹&quot;&gt;環境介紹&lt;/h1&gt;
&lt;p&gt;新買 SSD M.2 SATA 240GB 當作主要系統裝到品牌電腦，並將原本品牌電腦中的 HDD 格式化後當資料碟使用，預計安裝作業系統如下&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="環境修復" scheme="https://riverye.com/categories/%E7%92%B0%E5%A2%83%E4%BF%AE%E5%BE%A9/"/>
    
    
      <category term="BIOS" scheme="https://riverye.com/tags/BIOS/"/>
    
      <category term="Boot" scheme="https://riverye.com/tags/Boot/"/>
    
      <category term="UEFI" scheme="https://riverye.com/tags/UEFI/"/>
    
      <category term="Windows 10" scheme="https://riverye.com/tags/Windows-10/"/>
    
  </entry>
  
  <entry>
    <title>如何在不重灌的情況下修復 Ubuntu OS</title>
    <link href="https://riverye.com/2019/10/27/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E9%87%8D%E7%81%8C%E7%9A%84%E6%83%85%E6%B3%81%E4%B8%8B%E4%BF%AE%E5%BE%A9-Ubuntu-OS/"/>
    <id>https://riverye.com/2019/10/27/如何在不重灌的情況下修復-Ubuntu-OS/</id>
    <published>2019-10-26T16:00:00.000Z</published>
    <updated>2019-10-27T13:49:40.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="環境介紹">環境介紹</h1><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作業系統：Windows <span class="number">10</span> x64</span><br><span class="line">系統版本：<span class="number">1903</span> (OS 組建 <span class="number">18362.418</span>)</span><br><span class="line">Ubuntu <span class="number">18.04</span> LTS</span><br></pre></td></tr></table></figure></p><h1 id="什麼情況需要">什麼情況需要?</h1><p>以我自己為例，在 Windows 10 底下安裝 Ubuntu 後，除了寫 code 外，也會摸索 Unbutu 的功能，各種測試，玩到系統有異常反應時，但又不想重灌 Ubuntu，此時就會需要！<br>好處是能解決大部分的問題，還能省去裝軟體的時間及繁瑣。<br>(遇到特例問題依然無解的話，重灌是最快的方式 XD)</p><h1 id="開始前">開始前</h1><p><strong>資料備份，這點非常重要！</strong></p><p>照以下所有步驟操作即可完成修復：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /var/lib/apt/lists/lock</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /var/lib/dpkg/lock-frontend</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg --configure -a</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt clean</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update --fix-missing</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -f</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dpkg --configure -a</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt upgrade</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt dist-upgrade</span><br></pre></td></tr></table></figure></p><p>最後，輸入以下指令並重開 Ubuntu 即完工！</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure></p><p>完成以上步驟後，Ubuntu 已經恢復正常狀態，資料也都還保留著。</p><p>此方法，不見得對所有情況都適用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;環境介紹&quot;&gt;環境介紹&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="環境修復" scheme="https://riverye.com/categories/%E7%92%B0%E5%A2%83%E4%BF%AE%E5%BE%A9/"/>
    
    
      <category term="Ubuntu" scheme="https://riverye.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>從無到有的 Blog 建置教學 (含 domain 購買轉址)</title>
    <link href="https://riverye.com/2019/10/23/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E7%9A%84-Blog-%E5%BB%BA%E7%BD%AE%E6%95%99%E5%AD%B8-%E5%90%AB-domain-%E8%B3%BC%E8%B2%B7%E8%BD%89%E5%9D%80/"/>
    <id>https://riverye.com/2019/10/23/從無到有的-Blog-建置教學-含-domain-購買轉址/</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2019-10-24T16:07:28.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="說在前面">說在前面</h2><p>本篇以 Windows 環境架設 Blog，同時記錄自己 Blog 建立的過程。</p><hr><h2 id="環境建置">環境建置</h2><p>開始前，你要先有：</p><ol><li>Node.js</li><li>Git (<a href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/">可參考這篇建置 Node.js 及 Git 環境</a>)</li><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub 帳號</a> (免費註冊使用)</li></ol><hr><h2 id="nvm-安裝">nvm 安裝</h2><p>完成上述基本環境建置後，需先安裝 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 才能安裝 Hexo，先在 Ubuntu 輸入</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/nvm</span>-sh/nvm/v<span class="number">0</span>.<span class="number">35.0</span>/install.sh <span class="params">| bash</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params"># 安裝 nvm</span></span><br><span class="line"><span class="params"># 接著重開 Ubuntu</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/rezazFO.png" alt></p><p>確認 nvm 是否安裝</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ command -v nvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm</span></span><br></pre></td></tr></table></figure></p><p>列出所有可以安裝的 nvm 版本</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm ls-remote</span><br></pre></td></tr></table></figure></p><p>安裝 node 12.13.0</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install <span class="number">12.13</span>.<span class="number">0</span></span><br><span class="line">$ nvm install &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截止至今，最新版本為 12.13.0</span></span><br></pre></td></tr></table></figure></p><p>檢視本地端可以使用的版本</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下為顯示結果</span></span><br><span class="line">-&gt;     v12.<span class="number">13.0</span></span><br><span class="line">         system</span><br><span class="line">default -&gt; <span class="number">12.13</span>.<span class="number">0</span> (-&gt; v12.<span class="number">13.0</span>)</span><br><span class="line">node -&gt; stable (-&gt; v12.<span class="number">13.0</span>) (default)</span><br><span class="line">stable -&gt; <span class="number">12.13</span> (-&gt; v12.<span class="number">13.0</span>) (default)</span><br><span class="line">iojs -&gt; N/A (default)</span><br><span class="line">unstable -&gt; N/A (default)</span><br><span class="line">lts/* -&gt; lts/erbium (-&gt; v12.<span class="number">13.0</span>)</span><br><span class="line">lts/argon -&gt; v4.<span class="number">9.1</span> (-&gt; N/A)</span><br><span class="line">lts/boron -&gt; v6.<span class="number">17.1</span> (-&gt; N/A)</span><br><span class="line">lts/carbon -&gt; v8.<span class="number">16.2</span> (-&gt; N/A)</span><br><span class="line">lts/dubnium -&gt; v1<span class="number">0</span>.<span class="number">16.3</span> (-&gt; N/A)</span><br><span class="line">lts/erbium -&gt; v12.<span class="number">13.0</span></span><br><span class="line"><span class="comment"># 以上為顯示結果</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/gaXlW0S.png" alt></p><p>確認 node 路徑來源</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ which node</span><br><span class="line"><span class="comment"># /home/river/.nvm/versions/node/v12.13.0/bin/node</span></span><br><span class="line"></span><br><span class="line">$ nvm use system</span><br><span class="line"><span class="comment"># 切換回系統的 Node.js</span></span><br><span class="line"><span class="comment"># Now using system version of node: v12.11.1 (npm v6.11.3)</span></span><br><span class="line"></span><br><span class="line">$ which node</span><br><span class="line"><span class="comment"># /usr/bin/node</span></span><br><span class="line"></span><br><span class="line">$ nvm use <span class="number">12.13</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 切換 nvm 版本</span></span><br><span class="line"><span class="comment"># Now using node v12.13.0 (npm v6.12.0)</span></span><br><span class="line"></span><br><span class="line">$ which node</span><br><span class="line"><span class="comment"># /home/river/.nvm/versions/node/v12.13.0/bin/node</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/il2HvsH.png" alt></p><hr><h2 id="安裝-hexo">安裝 Hexo</h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>查詢 Hexo 版本</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下為顯示結果</span></span><br><span class="line">hexo-<span class="symbol">cli:</span> <span class="number">3.1</span>.<span class="number">0</span></span><br><span class="line"><span class="symbol">os:</span> Linux <span class="number">4.4</span>.<span class="number">0</span>-<span class="number">18362</span>-Microsoft linux x64</span><br><span class="line"><span class="symbol">node:</span> <span class="number">12.13</span>.<span class="number">0</span></span><br><span class="line"><span class="symbol">v8:</span> <span class="number">7.7</span>.<span class="number">299.13</span>-node.<span class="number">12</span></span><br><span class="line"><span class="symbol">uv:</span> <span class="number">1.32</span>.<span class="number">0</span></span><br><span class="line"><span class="symbol">zlib:</span> <span class="number">1.2</span>.<span class="number">11</span></span><br><span class="line"><span class="symbol">brotli:</span> <span class="number">1.0</span>.<span class="number">7</span></span><br><span class="line"><span class="symbol">ares:</span> <span class="number">1.15</span>.<span class="number">0</span></span><br><span class="line"><span class="symbol">modules:</span> <span class="number">72</span></span><br><span class="line"><span class="symbol">nghttp2:</span> <span class="number">1.39</span>.<span class="number">2</span></span><br><span class="line"><span class="symbol">napi:</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">llhttp:</span> <span class="number">1.1</span>.<span class="number">4</span></span><br><span class="line"><span class="symbol">http_parser:</span> <span class="number">2.8</span>.<span class="number">0</span></span><br><span class="line"><span class="symbol">openssl:</span> <span class="number">1.1</span>.<span class="number">1</span>d</span><br><span class="line"><span class="symbol">cldr:</span> <span class="number">35.1</span></span><br><span class="line"><span class="symbol">icu:</span> <span class="number">64.2</span></span><br><span class="line"><span class="symbol">tz:</span> <span class="number">2019</span>a</span><br><span class="line"><span class="symbol">unicode:</span> <span class="number">12.1</span></span><br><span class="line"><span class="comment"># 以上為顯示結果</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Ra7FZmI.png" alt></p><p>初始化這個部落格</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;資料夾名稱&gt;</span><br><span class="line">$ hexo init RiverBlog</span><br><span class="line"># 自由命名</span><br><span class="line"></span><br><span class="line">$ npm install</span><br><span class="line"># 安裝相關套件</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/K8yL7nD.png" alt></p><p>執行 Hexo server</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 瀏覽器輸入 http://localhost:4000</span></span><br><span class="line"><span class="comment"># 預設 port 4000 想更換可改輸入 $ hexo s -p XXXX</span></span><br><span class="line"><span class="comment"># XXXX 可換成想輸入的數字</span></span><br><span class="line"><span class="comment"># 關閉 hexo server 指令 Ctrl + C</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/KCgdXng.png" alt></p><p><img src="https://i.imgur.com/hjEhPtU.png" alt></p><hr><h2 id="更換主題">更換主題</h2><p>預設 themes 不喜歡的話，可到 <a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">Hexo Themes</a> 挑喜歡的主題</p><p>備註：挑選喜歡的主題後，務必詳讀該主題 GitHub 及 <a href="https://hexo.io/zh-tw/api/index.html" target="_blank" rel="noopener">Hexo 官方文件</a>，後續才知道如何改 (各主題修改方式不盡相同，依該主題 GitHub 文件說明為主)</p><p>以「<a href="https://zhwangart.github.io/" target="_blank" rel="noopener">Ocean</a>」主題為例</p><p><img src="https://i.imgur.com/di5fei5.png" alt></p><p>進入 <a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank" rel="noopener">GitHub</a> 後，複製下載連結</p><p><img src="https://i.imgur.com/O3GNCcr.png" alt></p><p>切換到 themes 資料夾</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes</span><br><span class="line"><span class="comment"># 切換到 themes 資料夾</span></span><br><span class="line"></span><br><span class="line">$ git clone &lt;URL&gt;</span><br><span class="line">$ git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/zhwangart</span><span class="regexp">/hexo-theme-ocean.git</span></span><br><span class="line"><span class="regexp"># 將想要的主題 clone 下來</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$ cd ..</span></span><br><span class="line"><span class="regexp"># 回上一層資料夾</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$ code .</span></span><br><span class="line"><span class="regexp"># 開啟 VScode 編輯軟體</span></span><br></pre></td></tr></table></figure></p><p>備註：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code 官方網站</a></p><p><img src="https://i.imgur.com/3dvHaet.png" alt></p><p><strong>修改「_config.yml」前，先把 hexo server 關閉</strong></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line"><span class="symbol">theme:</span> landscape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改後</span></span><br><span class="line"><span class="symbol">theme:</span> hexo-theme-ocean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改的是「RiverBlog」底下的「_config.yml」</span></span><br><span class="line"><span class="comment"># 而非「themes」底下的「_config.yml」</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/37gv33Y.png" alt></p><p>theme 主題替換後，再次執行</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開啟瀏覽器，會發現主題已更換</span></span><br><span class="line"><span class="comment"># 若預設主題確定不會再使用，可把「themes」底下的資料夾「landscape」刪除</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/4DuZGry.png" alt></p><hr><h2 id="新增文章">新增文章</h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"&lt;title&gt;"</span></span><br><span class="line">$ hexo new <span class="string">"標題寫在這裡，Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 這指令很常用，每次新增文章都要這麼做</span></span><br></pre></td></tr></table></figure></p><p>Hexo 支援 <a href="https://markdown.tw/" target="_blank" rel="noopener">Markdown 語法</a>，使用方法自行翻閱 API</p><p><img src="https://i.imgur.com/2V6sZUo.png" alt></p><p><strong>編輯文章時 <code>$ hexo s</code> 免關，可直接重新整理瀏覽器，即時觀看內容</strong></p><p><img src="https://i.imgur.com/8TZSfNG.png" alt></p><hr><h2 id="部署-github">部署 GitHub</h2><p>當 Blog 改成想要的形狀後，接下來要部署到 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></p><h3 id="安装-deploy-git-插件">安装 deploy git 插件</h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要在對的路徑做這件事情喔</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/USbCTZ1.png" alt></p><h3 id="登入-github-後選new-repository">登入 GitHub 後，選「New repository」</h3><p><img src="https://i.imgur.com/w4qJh0t.png" alt></p><p>在 GitHub 新增一個名稱為 &lt;username&gt;.github.io 的專案</p><p>範例：<br>Repository name：RiverBlog.github.io</p><p><strong>備註：username 須與 GitHub 名稱一樣，後面「.github.io」不可省略，以免 CSS、JavaScript 效果吃不到 (這超重要!!!)</strong></p><p><img src="https://i.imgur.com/JCrh1bh.png" alt></p><p>產生的「.git」連結複製起來，「_config.yml」檔案會用到</p><p>備註：此網頁先不要關，後面會用到</p><p><img src="https://i.imgur.com/VYodIO4.png" alt></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">  <span class="symbol">type:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改後</span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">  <span class="symbol">type:</span> git</span><br><span class="line">  <span class="symbol">repo:</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/</span>River-Ye/riverye.github.io.git</span><br><span class="line">  <span class="symbol">branch:</span> master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空格不能省略</span></span><br><span class="line"><span class="comment"># 其中 repo 換成自己的 GitHub 連結</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/SCHMLfO.png" alt></p><p>在 Ubuntu 及 Git Bash 皆輸入</p><p>備註：已經有再用 git push 者，可省略此步驟</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 輸入 GitHub 名稱、信箱</span></span><br><span class="line">$ git config --global user.name <span class="string">"your_name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"your_email"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">$ git config --global user.name <span class="string">"River-Ye"</span></span><br><span class="line">$ git config --global user.email <span class="string">"xxxx@gmail.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 檢視目前設定</span></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/WyJKAFC.png" alt></p><p><img src="https://i.imgur.com/ygqrLBQ.png" alt></p><p>完成 GitHub 設定後，接下來要部署到 GitHub</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 產生靜態檔後就部署</span></span><br><span class="line"><span class="comment"># 這指令會很常用，每次有新文章或修改內容時，都會用到!!!</span></span><br><span class="line"><span class="comment"># 之前提過 Windows 底下的 Ubuntu push GitHub 輸入帳號密碼時，會說驗證錯誤</span></span><br><span class="line"><span class="comment"># 因此需透過 Git Bash push</span></span><br><span class="line"><span class="comment"># Mac 則無此問題</span></span><br></pre></td></tr></table></figure></p><p>備註：Mac 使用者，執行完 <code>$ hexo g -d</code> 即完成部署並推上 GitHub，可直接跳到「<a href="#rang-lian-jie-zheng-chang-hua">讓連結正常化</a>」開始觀看</p><p><img src="https://i.imgur.com/nE61zVL.png" alt></p><p>忽略此錯誤訊息，接下來改用 Git Bash push</p><p><img src="https://i.imgur.com/hXR1FAN.png" alt></p><p>Git Bash 輸入</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cd /c/demo/RiverBlog/.deploy_git/</span><br><span class="line"><span class="comment"># 切換到 「.deploy_git」 資料夾</span></span><br><span class="line"></span><br><span class="line">$ git remote add river_blog <span class="symbol">https:</span>/<span class="regexp">/github.com/</span>River-Ye/RiverBlog.github.io.git</span><br><span class="line">$ git remote add &lt;遠端 branch 名稱，自由命名&gt; &lt;遠端連結&gt;</span><br><span class="line"><span class="comment"># 手動新增 GitHub 遠端 branch 名稱、連結</span></span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line"><span class="comment"># 查詢 remote 有哪些</span></span><br><span class="line"></span><br><span class="line">$ git push -u river_blog master</span><br><span class="line">$ git push -u &lt;遠端 branch 名稱&gt; &lt;本地端 branch 名稱&gt;</span><br><span class="line"><span class="comment"># push 到 GitHub</span></span><br><span class="line"><span class="comment"># Windwos 第一次 push 以後，之後指令改成</span></span><br><span class="line"><span class="comment"># $ git push &lt;遠端 branch 名稱&gt; &lt;本地端 branch 名稱&gt; -f</span></span><br><span class="line"><span class="comment"># 範例：</span></span><br><span class="line"><span class="comment"># $ git push river master -f</span></span><br><span class="line"></span><br><span class="line">$ git log</span><br><span class="line"><span class="comment"># 查看 git log</span></span><br></pre></td></tr></table></figure></p><p>過程中，會需要輸入 GitHub 名稱、密碼</p><p>備註：第一次會需要輸入 GitHub 名稱、密碼，之後不用再輸入</p><p><img src="https://i.imgur.com/ncKGKVX.png" alt></p><p>打開 <a href="https://github.com/river-demo/river-demo.github.io" target="_blank" rel="noopener">GitHub project</a> 的 Settings，下方即可看到 GitHub 網址連結 <a href="https://river-demo.github.io/" target="_blank" rel="noopener">https://river-demo.github.io/</a></p><p><img src="https://i.imgur.com/l0Hp88A.png" alt></p><p>完成以上步驟即可獲得 username.github.io 的網址</p><hr><h2 id="讓連結正常化">讓連結正常化</h2><p><strong>此時會發現 Blog 中的連結幾乎失效</strong>，回到「_config.yml」中設定</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line"><span class="symbol">url:</span> <span class="symbol">http:</span>/<span class="regexp">/yoursite.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 修改後</span></span><br><span class="line"><span class="symbol">url:</span> <span class="symbol">https:</span>/<span class="regexp">/river-demo.github.io/</span></span><br><span class="line"><span class="symbol">url:</span> <span class="symbol">https:</span>/<span class="regexp">/riverye.com/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用 username.github.io 或自己的 domain</span></span><br><span class="line"><span class="comment"># 看需求調整</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/anXPrIa.png" alt></p><hr><h2 id="客製化-domain">客製化 domain</h2><p>有了 <a href="https://river-demo.github.io/" target="_blank" rel="noopener">https://river-demo.github.io/</a> 後，想把網址換成專屬網域名稱，以下兩個方法可供參考：</p><ol><li><a href="https://www.gandi.net/zh-hant" target="_blank" rel="noopener">Gandi.net</a> ( <a href="https://riverye.com">riverye.com</a> 在這買的)</li><li><a href="https://www.freenom.com/" target="_blank" rel="noopener">freenom</a> ( <a href="https://river-demo.tk" target="_blank" rel="noopener">river-demo.tk</a> 在這挑的，教學用，免費，但網址比較醜)</li></ol><hr><h3 id="gandinet"><a href="https://www.gandi.net/zh-hant" target="_blank" rel="noopener">Gandi.net</a></h3><p>搜尋想買的網域名稱後，信用卡刷一波就有了</p><p><img src="https://i.imgur.com/1FiBwYb.png" alt></p><p>新增 DNS 紀錄</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">類型： A</span><br><span class="line">TTL： <span class="number">1800</span></span><br><span class="line">IPv4： <span class="number">185.199</span>.<span class="number">108.153</span></span><br></pre></td></tr></table></figure></p><p>參考：<a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-a-records-with-your-dns-provider" target="_blank" rel="noopener">GitHub 官方列表</a></p><p><img src="https://i.imgur.com/NB3FJGB.png" alt></p><p>GitHub 設定如下</p><p><img src="https://i.imgur.com/xLTmPfr.png" alt></p><p>稍等片刻即完成 <a href="https://riverye.com">riverye.com</a></p><hr><h3 id="freenom"><a href="https://www.freenom.com/" target="_blank" rel="noopener">freenom</a></h3><p>搜尋想要的網域名稱後，可選擇信用卡刷一波，或挑免費的使用</p><p>備註： freenom 註冊按鈕藏在購物車內<br>跟著使用體驗流程走，便會看到註冊畫面 (很隱藏)</p><p><img src="https://i.imgur.com/N57PuPO.jpg" alt></p><p>購買完成後，從首頁上方「Services」點選「My Domains」接著設定「Manage Domain」中的「Manage Freenom DNS」</p><p><img src="https://i.imgur.com/A5nYfDo.png" alt></p><p>Manage Freenom DNS 設定如下</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| Name |</span> Type  <span class="params">| TTL  |</span>     Target      <span class="params">|</span></span><br><span class="line"><span class="params">|</span> ---- <span class="params">| ----- |</span> ---- <span class="params">| --------------- |</span></span><br><span class="line"><span class="params">|      |</span>   A   <span class="params">| 1800 |</span> <span class="number">185.199</span>.<span class="number">108.153</span> <span class="params">|</span></span><br><span class="line"><span class="params">|</span> ---- <span class="params">| ----- |</span> ---- <span class="params">| --------------- |</span></span><br><span class="line"><span class="params">|  WWW |</span> CNAME <span class="params">| 1800 |</span> river-demo.tk   <span class="params">|</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/jXWONT1.png" alt></p><p>GitHub 設定如下</p><p><img src="https://i.imgur.com/X3ZUwhD.png" alt></p><p>稍等片刻即完成 <a href="https://river-demo.tk" target="_blank" rel="noopener">river-demo.tk</a></p><h2 id="完成以上步驟恭喜有專屬-domain-blog-灑花">完成以上步驟，恭喜有專屬 domain Blog (灑花</h2><hr><h2 id="q-amp-a">Q &amp; A</h2><h3 id="1-之前裝過-nodejs-為何還要裝-nvm">1. 之前裝過 Node.js 為何還要裝 NVM ?</h3><p>先前我們有使用 Ubuntu 本身的 apt-get 安裝 Node.js<br>不過那是被安裝到 /usr/bin/node<br>有時候安裝套件需要 sudo 提供管理者權限<br>非常麻煩，因此我們使用 nvm 來安裝另一個 Node.js<br>這個 Node.js 的執行檔就任我們使用，不需要提供管理者權限了</p><h3 id="2-hexo-上沒喜歡的-themes有別的選擇嗎">2. Hexo 上沒喜歡的 themes，有別的選擇嗎 ?</h3><p>沒關係，給你滿滿的選擇：<br>jekyll <a href="https://jekyllrb.com/" target="_blank" rel="noopener">https://jekyllrb.com/</a><br>Ghost <a href="https://ghost.org" target="_blank" rel="noopener">https://ghost.org</a><br>Hugo <a href="https://gohugo.io" target="_blank" rel="noopener">https://gohugo.io</a><br>Hexo <a href="https://hexo.io" target="_blank" rel="noopener">https://hexo.io</a><br>Octopress <a href="http://octopress.org/" target="_blank" rel="noopener">http://octopress.org/</a><br>VuePress <a href="https://vuepress.vuejs.org" target="_blank" rel="noopener">https://vuepress.vuejs.org</a></p><p>附上：<a href="https://www.staticgen.com/" target="_blank" rel="noopener">靜態頁面產生器的比較</a></p><h3 id="3-為什麼你-github-settings-中的enforce-https可以勾">3. 為什麼你 GitHub Settings 中的「Enforce HTTPS」可以勾 ?</h3><p>讓子彈飛一回，就有了 (約半小時左右)</p><h3 id="4-為什麼更新-github-後原本-domain-會失效">4. 為什麼更新 GitHub 後，原本 domain 會失效 ?</h3><p>GitHub 的 Settings 跑掉，手動改回原本 domain 即可</p><p><img src="https://i.imgur.com/fdrStDS.png" alt></p><hr><h2 id="最後的最後">最後的最後</h2><p>照著上面操作，或許能畫葫蘆出一個 Blog，但沒相關知識 (HTML5、Git、Linux 指令...等) 的話，會發現改不太動，甚至玩壞時不知該如何處理，這時請擅用 Google 自行解決問題</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;說在前面&quot;&gt;說在前面&lt;/h2&gt;
&lt;p&gt;本篇以 Windows 環境架設 Blog，同時記錄自己 Blog 建立的過程。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;環境建置&quot;&gt;環境建置&lt;/h2&gt;
&lt;p&gt;開始前，你要先有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Node.js&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="教學文" scheme="https://riverye.com/categories/%E6%95%99%E5%AD%B8%E6%96%87/"/>
    
    
      <category term="Hexo" scheme="https://riverye.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://riverye.com/tags/GitHub/"/>
    
      <category term="Blog" scheme="https://riverye.com/tags/Blog/"/>
    
      <category term="部落格" scheme="https://riverye.com/tags/%E9%83%A8%E8%90%BD%E6%A0%BC/"/>
    
      <category term="domain" scheme="https://riverye.com/tags/domain/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 安裝 Ruby + Rails + Node.js + Git + postgresql</title>
    <link href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/"/>
    <id>https://riverye.com/2019/10/12/Windows 10 安裝 Ruby + Rails + Node.js + Git + postgresql/</id>
    <published>2019-10-11T16:00:00.000Z</published>
    <updated>2019-10-30T16:20:12.173Z</updated>
    
    <content type="html"><![CDATA[<p>一口氣將常用的軟體建置起來<br>包含 Ubuntu、Ruby、rvm、Rails、Node.js、npm、Git、postgresql...等<br>實用度滿分的大補帖~~</p><h1 id="環境建置">環境建置</h1><h2 id="環境介紹">環境介紹</h2><p>作業系統環境：<br>作業系統：Windows 10 x64<br>系統版本：1903 (OS 組建 18362.418)</p><p><img src="https://i.imgur.com/qrWaiDm.png" alt></p><p><img src="https://i.imgur.com/o9Cbjm2.png" alt></p><hr><h2 id="安裝-ubuntu">安裝 Ubuntu</h2><p><strong>為何要先安裝 Ubuntu ?</strong><br>因為許多 code 軟體在 Windows 上支援度很低甚至不支援<br>在 Windows 上安裝 Ubuntu 子系統來操作算是比較方便了<br>(還是比不過 Mac 方便...</p><p>接下來開始一連串安裝教學：</p><p>Windows 10 內建「Microsoft Store」，透過 Microsoft Store 安裝 <a href="https://www.microsoft.com/zh-tw/p/ubuntu-1804-lts/9n9tngvndl3q" target="_blank" rel="noopener">Ubuntu 18.04 LTS</a></p><p><img src="https://i.imgur.com/X9a93zl.png" alt></p><p><img src="https://i.imgur.com/XIEdVNL.png" alt></p><p><img src="https://i.imgur.com/ONrdnMj.png" alt></p><p>接著開啟 Ubuntu，出現以下的錯誤，用管理者權限開啟「Windows PowerShell」</p><p><img src="https://i.imgur.com/yGQQPtx.png" alt></p><p>開啟「Windows PowerSeell」，輸入</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure></p><p>並重新開機，再次開啟 Ubuntu 即可正常使用。</p><p><img src="https://i.imgur.com/BhMvAK9.png" alt></p><p><img src="https://i.imgur.com/gCMp9KN.png" alt></p><hr><p>第一次開啟 Ubuntu 需要跑幾分鐘，接著輸入自訂義的帳號及密碼。</p><p><img src="https://i.imgur.com/onytyQS.png" alt></p><hr><h2 id="安裝-ruby">安裝 Ruby</h2><p>在 Ubuntu (以下簡稱「終端機 (Terminal)」) 中輸入如下：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ruby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代表註解，不用輸入</span></span><br><span class="line"><span class="comment"># $ 代表這段指令要在 Terminal 輸入， $ 本身不用輸入</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/99qn2tB.png" alt></p><p><img src="https://i.imgur.com/EzHNA2q.png" alt></p><p><img src="https://i.imgur.com/UbmGboH.png" alt></p><hr><p>確認 Ruby 是否安裝及版本查詢</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v           # ruby 2.5.1p57 (2018-03-29 revision 63029 [x86_64-linux-gnu])</span><br><span class="line">$ ruby --version    # 與上面指令效果一樣，擇一使用即可</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/e6n3ISm.png" alt></p><hr><h2 id="安裝-rvm">安裝 rvm</h2><p>依序於 Terminal 輸入如下：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ \curl -sSL <span class="symbol">https:</span>/<span class="regexp">/get.rvm.io | bash -s stable</span></span><br><span class="line"><span class="regexp">$ gpg --keyserver hkp:/</span><span class="regexp">/pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span></span><br><span class="line"><span class="regexp">$ \curl -sSL https:/</span><span class="regexp">/get.rvm.io | bash -s stable</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># 安裝後，Ubuntu 要重開</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Y9LUDQX.png" alt></p><p><img src="https://i.imgur.com/LpHIgCm.png" alt></p><p><img src="https://i.imgur.com/B9FzlPj.png" alt></p><p>rvm 版本查詢</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rvm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># rvm 1.29.9 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/JG0rtYE.png" alt></p><p>列出目前所有可安裝的清單</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm list known</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/DIS7lDN.png" alt></p><h3 id="安裝-ruby-263-版本">安裝 Ruby 2.6.3 版本</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rvm install 2.6.3</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/dPB7opK.png" alt></p><p>版本確認</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-linux]</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="安裝-rails">安裝 Rails</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install rails</span><br></pre></td></tr></table></figure></p><p>上述指令會安裝目前最新版本 Rails (寫文章時最新版本為 Rails 6.0.0)</p><p><img src="https://i.imgur.com/Ft5ILs9.png" alt></p><h3 id="安裝特定版本-rails">安裝特定版本 Rails</h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gem install rails -v <span class="number">5.2</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 Rails 5.2.3 版本為例</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/iCY9R6m.png" alt></p><hr><h2 id="建立-rails-專案">建立 Rails 專案</h2><h3 id="建立-rails-600-專案">建立 Rails 6.0.0 專案</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rails new your_project_name</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/jpy36h7.png" alt></p><p><img src="https://i.imgur.com/qWiHRVF.png" alt></p><h2 id="安裝-nodejs">安裝 Node.js</h2><p>以安裝 Node.js 12.x 版本為例</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install build-essential apt-transport-https lsb-release ca-certificates curl</span><br><span class="line">$ curl -sL <span class="symbol">https:</span>/<span class="regexp">/deb.nodesource.com/setup</span>_12.x <span class="params">| sudo -E bash -</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/4ElSULN.png" alt></p><p>安裝 Node.js 和 npm</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install nodejs</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/gJPYGHa.png" alt></p><p>版本查詢</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v    # v12.11.1</span><br><span class="line">$ npm -v     # v6.11.3</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Yxa80zW.png" alt></p><p>參考：<br><a href="https://websiteforstudents.com/how-to-install-node-js-10-11-12-on-ubuntu-16-04-18-04-via-apt-and-snap/" target="_blank" rel="noopener">How To Install Node.Js 10 / 11 / 12 On Ubuntu 16.04 | 18.04 Via APT And SNAP</a></p><hr><p>裝好 Node.js 後，回到 Rails 專案繼續下一步<br>接著執行 rails server</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rails serever</span><br><span class="line">$ rails s</span><br><span class="line"></span><br><span class="line"># 上述兩個指令意思一樣</span><br></pre></td></tr></table></figure></p><p>會發現依然噴許多錯誤訊息</p><p><img src="https://i.imgur.com/SpfE9t6.png" alt></p><p>錯誤訊息中貼心提醒缺少 webpacker，由於 webpacker 需要 yarn<br>因此先安裝 yran 後再裝 webpacker<br>依序輸入：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ rails webpacker:install</span><br><span class="line">$ curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">$ echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br><span class="line">$ yarn --version</span><br><span class="line">$ rails webpacker:install</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/U1XTAmY.png" alt></p><p>成功開啟的畫面如下：</p><p><img src="https://i.imgur.com/IKYcI8r.png" alt></p><h3 id="建立特定版本-rails-專案">建立特定版本 Rails 專案</h3><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rails _5.<span class="number">2.3_</span> new your_project_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 rails 5.2.3 版本為例</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/fjeC86u.png" alt></p><p><img src="https://i.imgur.com/YtiO55b.png" alt></p><p>接著執行 Rails 專案</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rails server</span><br><span class="line">$ rails s</span><br><span class="line"></span><br><span class="line"># 上述兩個指令意思一樣</span><br></pre></td></tr></table></figure></p><p>成功開啟的畫面如下：</p><p><img src="https://i.imgur.com/laDbxHb.png" alt></p><p>參考：<br><a href="https://yarnpkg.com/lang/en/docs/install/#debian-stable" target="_blank" rel="noopener">Yarn Docs</a></p><hr><h2 id="安裝-git">安裝 Git</h2><p>下載連結：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p><p><img src="https://i.imgur.com/FPxfB7U.png" alt></p><p>下載後，執行，無腦安裝法，下一步直到安裝好為止。</p><p><img src="https://i.imgur.com/CiGOsTG.png" alt></p><p>輸入</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git version</span><br></pre></td></tr></table></figure></p><p>確認安裝版本即大功告成</p><p><img src="https://i.imgur.com/ndCsCAw.png" alt></p><h2 id="ubuntu-上-git-版本更新">Ubuntu 上 Git 版本更新</h2><p>Ubuntu 很貼心內建 Git v2.17.1 版本，覺得版本老舊更新如下：</p><ol><li>先更新本地端索引：</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install make libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>到 Git 的 <a href="https://github.com/git/git" target="_blank" rel="noopener">GitHub</a> 上挑選需要更新的版本<br><img src="https://i.imgur.com/e3DnTkm.png" alt></p></li><li><p>先移到暫存區</p></li></ol><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /tmp</span><br></pre></td></tr></table></figure></p><ol start="4"><li>使用 <code>wget</code> 命令安裝複製的 zip 文件鏈接。我們將為文件指定一個新名稱：git.zip</li></ol><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget <span class="symbol">https:</span>/<span class="regexp">/github.com/git</span><span class="regexp">/git/archive</span><span class="regexp">/v2.23.0.zip -O git.zip</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># 以 Git 2.23.0 版本為例</span></span><br></pre></td></tr></table></figure></p><ol start="5"><li>解壓縮下載的文件，並通過輸入以下內容進入目錄</li></ol><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ unzip git.zip</span><br><span class="line">$ cd git-*</span><br></pre></td></tr></table></figure></p><ol start="6"><li>輸入以下兩個指令來製作軟體並進行安裝</li></ol><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ make prefix=<span class="regexp">/usr/local</span> all</span><br><span class="line">$ sudo make prefix=<span class="regexp">/usr/local</span> install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝完後，Ubuntu 要重開</span></span><br></pre></td></tr></table></figure></p><ol start="7"><li>安裝完成後，確認 Git 版本</li></ol><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># git version 2.23.0</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/ElPiHRV.png" alt></p><p>參考：<br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-git-on-ubuntu-18-04" target="_blank" rel="noopener">How To Install Git on Ubuntu 18.04</a></p><hr><h2 id="安裝-postgresql">安裝 postgresql</h2><p>Rails 內建資料庫 SQLite 練習上很方便，但實務完全不會用<br>(詳細原因自行 Google)<br>因此我們要手動安裝 postgresql 資料庫，以備需要時可以使用<br>至於如何更換 Rails 專案內資料庫，有機會再寫一篇介紹</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install wget ca-certificates</span><br><span class="line">$ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class="line">$ sudo sh -c &apos;echo &quot;deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main&quot; &gt;&gt; /etc/apt/sources.list.d/pgdg.list&apos;</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/FujtKO7.png" alt></p><p>版本查詢</p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ psql <span class="comment">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># psql (PostgreSQL) 11.5 (Ubuntu 11.5-3.pgdg18.04+1)</span></span><br></pre></td></tr></table></figure></p><p><strong>接下來會比較繁瑣，建議先看下方圖片並瞭解後，再動作</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service postgresql <span class="keyword">start</span></span><br><span class="line">$ pg_lsclusters</span><br><span class="line"></span><br><span class="line"><span class="comment"># pg_lscluster &lt;version&gt; &lt;cluster&gt; start</span></span><br><span class="line">$ pg_ctlcluster <span class="number">11</span> <span class="keyword">main</span> <span class="keyword">start</span></span><br><span class="line"></span><br><span class="line">$ sudo service postgresql restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo -u postgres createuser &lt;username&gt;</span></span><br><span class="line">$ sudo -u postgres createuser river</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo -u postgres createdb &lt;database_name&gt;</span></span><br><span class="line">$ sudo -u postgres createdb river</span><br><span class="line"></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> libpq-dev</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/zSe6Fyb.png" alt></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres -i</span><br><span class="line">$ psql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例：</span></span><br><span class="line"><span class="comment">#= ALTER USER username CREATEDB;</span></span><br><span class="line"><span class="comment"># 我的：</span></span><br><span class="line">= <span class="keyword">ALTER</span> <span class="keyword">USER</span> river CREATEDB;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例：</span></span><br><span class="line"><span class="comment">#= GRANT ALL PRIVILEGES ON  DATABASE database_name to new_user;</span></span><br><span class="line"><span class="comment"># 我的：</span></span><br><span class="line">= <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span>  <span class="keyword">DATABASE</span> river <span class="keyword">to</span> river;</span><br><span class="line"></span><br><span class="line"><span class="comment"># SQL 語法以 = 表示，從 = 後面開始輸入</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/BI29e7j.png" alt></p><p>參考：<br><a href="https://tecadmin.net/install-postgresql-server-on-ubuntu/" target="_blank" rel="noopener">How to Install PostgreSQL 11 on Ubuntu 18.04 &amp; 16.04 LTS</a></p><hr><h1 id="q-amp-a">Q &amp; A</h1><h2 id="為何不用-ubuntu-的-git-而要安裝-git-bash">為何不用 Ubuntu 的 Git 而要安裝 Git Bash ?</h2><p>我也想都在 Ubuntu 上操作就好 (吶喊<br>但 <code>$ git push</code> 時，會遇到即使輸入正確的帳號密碼，仍會說驗證錯誤，無法上傳 <a href="https://github.com/River-Ye" target="_blank" rel="noopener">GitHub</a> 啊...<br>撇除 push 功能外， Ubuntu 上的 Git 功能還是可以用喔~</p><h2 id="ubuntu-路徑名稱太長如何縮短">Ubuntu 路徑名稱太長，如何縮短 ?</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>修改約第 60 - 62 行 <code>$color_prompt</code> 的內容</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 修改前</span><br><span class="line">if [ &quot;$color_prompt&quot; = yes ]; then</span><br><span class="line">    PS1=&apos;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &apos;</span><br><span class="line">else</span><br><span class="line">    PS1=&apos;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ &apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改後</span><br><span class="line">if [ &quot;$color_prompt&quot; = yes ]; then</span><br><span class="line">    PS1=&apos;$&#123;debian_chroot:+($debian_chroot)&#125;\[[\033[01;32m\]\w\[\033[00m\]]\$ &apos;</span><br><span class="line">else</span><br><span class="line">    PS1=&apos;$&#123;debian_chroot:+($debian_chroot)&#125;\$ &apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/G0RGtU4.png" alt></p><p>修改儲存離開後，輸入：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>即可看到修改狀態 (免重開 Ubuntu)</p><p><img src="https://i.imgur.com/Nm2JFfz.png" alt></p><p>參考：<br><a href="https://blog.csdn.net/jimson_zhu/article/details/81281972" target="_blank" rel="noopener">Ubuntu（Linux）命令行终端命令提示符过长和提示符颜色显示等效果设置</a></p><h2 id="ubuntu-的游標消失該怎辦">Ubuntu 的游標消失，該怎辦?</h2><ol><li><p>將 Windows 預設輸入模式從「中文模式」改為「英數模式」，並重開 Ubuntu。<img src="https://i.imgur.com/nXTMCW9.png" alt></p></li><li><p>在 Ubuntu 中若不小心切換到中文模式並輸入任意鍵時，游標又會消失，解決方法為<strong>在 Ubuntu 中輸入任意中文字後並按確認</strong> (並非送出指令喔)，此時游標再次出現，接著切換回「英數模式」即可。 (中英文切換快捷鍵：Shift 按一下)</p></li></ol><h2 id="ubuntu-顯示的顏色調整">Ubuntu 顯示的顏色調整</h2><p>Ubuntu 中文字、背景、字型、字型大小等全都可以修改，修方方法如下：<br><strong>滑鼠右鍵點選 Ubuntu 左上角 Logo，選擇「內容」即可進入修改。</strong></p><p>個人 Ubuntu 終端機設定可供參考：</p><p><img src="https://i.imgur.com/ZDWO51Z.png" alt><img src="https://i.imgur.com/x0KyibK.png" alt><img src="https://i.imgur.com/rjAD3In.png" alt></p><hr><h2 id="參考">參考</h2><ol><li><a href="https://railsbook.tw/chapters/02-environment-setup.html" target="_blank" rel="noopener">為你自己學 Ruby on Rails - 環境設定</a></li><li><a href="https://gitbook.tw/chapters/environment/install-git-in-windows.html" target="_blank" rel="noopener">為你自己學 Git - 安裝在 Windows 作業系統</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一口氣將常用的軟體建置起來&lt;br&gt;
包含 Ubuntu、Ruby、rvm、Rails、Node.js、npm、Git、postgresql...等&lt;br&gt;
實用度滿分的大補帖~~&lt;/p&gt;
&lt;h1 id=&quot;環境建置&quot;&gt;環境建置&lt;/h1&gt;
&lt;h2 id=&quot;環境介紹&quot;&gt;環境介紹&lt;
      
    
    </summary>
    
    
      <category term="環境建置" scheme="https://riverye.com/categories/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/"/>
    
    
      <category term="Ruby" scheme="https://riverye.com/tags/Ruby/"/>
    
      <category term="Rails" scheme="https://riverye.com/tags/Rails/"/>
    
      <category term="Node.js" scheme="https://riverye.com/tags/Node-js/"/>
    
      <category term="Git" scheme="https://riverye.com/tags/Git/"/>
    
      <category term="postgresql" scheme="https://riverye.com/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Day30-完賽是這種感覺啊</title>
    <link href="https://riverye.com/2019/10/09/Day30-%E5%AE%8C%E8%B3%BD%E6%98%AF%E9%80%99%E7%A8%AE%E6%84%9F%E8%A6%BA%E5%95%8A/"/>
    <id>https://riverye.com/2019/10/09/Day30-完賽是這種感覺啊/</id>
    <published>2019-10-08T16:00:00.000Z</published>
    <updated>2019-10-24T09:37:58.231Z</updated>
    
    <content type="html"><![CDATA[<p>且戰且走 30 天，老實說過程中 N 的 N 次方次想放棄，<br>要同時忙作業、複習、專案、生活等，<br>好幾次在失衡的邊緣，快撐不下去，<br>看著一起學習的夥伴比我還努力時，<br><strong>(同儕、mentor 超重要!!!)</strong><br>「不甘心」三個字會從中燃起鬥志，<br>同時得調適自己心情，擁抱自己的低潮、焦慮，<br>(像是做不出來、一直有新 bug、花很長時間研究別人卻是秒解..等)<br>甚至會忙到沒時間想東想西..</p><hr><p>如今 30 天終於結束了，人生好像多了一丁點自我成就，開心一下子，<br>接著繼續面對生活，還有許多要學習、要做的事情<br>感性什麼的，之後再說吧~</p><hr><p>最後來聽首歌結束這回合吧(灑花<br><a href="https://youtu.be/KZbswFDOOsY" target="_blank" rel="noopener">毛不易 - 消愁</a></p><p><a href="https://www.youtube.com/watch?v=KZbswFDOOsY" target="_blank" rel="noopener"><img src="https://img.youtube.com/vi/KZbswFDOOsY/0.jpg" alt="Yes"></a></p><h2 id="謝謝大家">謝謝大家</h2><p>本文同步發布於 <a href="https://riverye.com/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;且戰且走 30 天，老實說過程中 N 的 N 次方次想放棄，&lt;br&gt;
要同時忙作業、複習、專案、生活等，&lt;br&gt;
好幾次在失衡的邊緣，快撐不下去，&lt;br&gt;
看著一起學習的夥伴比我還努力時，&lt;br&gt;
&lt;strong&gt;(同儕、mentor 超重要!!!)&lt;/strong&gt;&lt;br
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="11th鐵人賽" scheme="https://riverye.com/tags/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day29 - Codewars 刷題</title>
    <link href="https://riverye.com/2019/10/08/Day29-Codewars-%E5%88%B7%E9%A1%8C/"/>
    <id>https://riverye.com/2019/10/08/Day29-Codewars-刷題/</id>
    <published>2019-10-07T16:00:00.000Z</published>
    <updated>2019-10-08T16:53:43.452Z</updated>
    
    <content type="html"><![CDATA[<p>挑戰 <a href="https://www.codewars.com/" target="_blank" rel="noopener">Codewars</a> LV3 題目</p><hr><p><a href="https://www.codewars.com/kata/calculator/train/ruby" target="_blank" rel="noopener">題目(Calculator)</a>：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create a simple calculator that given a string of operators (), +, -, *, <span class="regexp">/ and numbers separated by spaces returns the value of that expression</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Example:</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Calculator.new.evaluate("2 /</span> <span class="number">2</span> + <span class="number">3</span> * <span class="number">4</span> - <span class="number">6</span><span class="string">") # =&gt; 7</span></span><br><span class="line"><span class="string">Remember about the order of operations! Multiplications and divisions have a higher priority and should be performed left-to-right. Additions and subtractions have a lower priority and should also be performed left-to-right.</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(string)</span></span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">calc = Calculator.new</span><br><span class="line"></span><br><span class="line">Test.assert_equals(calc.evaluate(<span class="string">"4 + 5"</span>), <span class="number">9</span>)</span><br><span class="line">Test.assert_equals(calc.evaluate(<span class="string">"4 * 5"</span>), <span class="number">20</span>)</span><br><span class="line">Test.assert_equals(calc.evaluate(<span class="string">"4 / 5"</span>), <span class="number">0</span>.<span class="number">8</span>)</span><br><span class="line">Test.assert_equals(calc.evaluate(<span class="string">"4 - 5"</span>), -<span class="number">1</span>)</span><br><span class="line">Test.assert_equals(calc.evaluate(<span class="string">"4 + 5 * 6"</span>), <span class="number">34</span>)</span><br></pre></td></tr></table></figure></p><hr><p>影片解題：<a href="https://www.youtube.com/watch?v=l5QOXpqxj0I" target="_blank" rel="noopener"><img src="https://img.youtube.com/vi/l5QOXpqxj0I/0.jpg" alt="Yes"></a></p><hr><p>答案：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Calculator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(string)</span></span></span><br><span class="line">    [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>].each <span class="keyword">do</span> <span class="params">|cal|</span></span><br><span class="line">      <span class="keyword">if</span> string.<span class="keyword">include</span>?(cal)</span><br><span class="line">        <span class="keyword">return</span> string.split(cal).map&#123; <span class="params">|x|</span> evaluate(x) &#125;.inject(cal.strip)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    string.to_f</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>本文同步發布於 <a href="https://riverye.com/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;挑戰 &lt;a href=&quot;https://www.codewars.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codewars&lt;/a&gt; LV3 題目&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.codewars.com/k
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="11th鐵人賽" scheme="https://riverye.com/tags/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day28 - Codewars 刷題</title>
    <link href="https://riverye.com/2019/10/07/Day28-Codewars-%E5%88%B7%E9%A1%8C/"/>
    <id>https://riverye.com/2019/10/07/Day28-Codewars-刷題/</id>
    <published>2019-10-06T16:00:00.000Z</published>
    <updated>2019-10-08T17:15:07.804Z</updated>
    
    <content type="html"><![CDATA[<p>先補上昨天未解完 <a href="https://www.codewars.com/" target="_blank" rel="noopener">Codewars</a> LV4 的答案，<br>時間複雜度沒有解決，若有更好解法可在下方留言讓我知道喔~~</p><p>到 LV4 解起來花的時間比平常更久，<br>過程中會一直找方法，和專案蠻像的，<br>遇到問題，想辦法解決它。</p><hr><p><a href="https://www.codewars.com/kata/55983863da40caa2c900004e/train/ruby" target="_blank" rel="noopener">題目(Next bigger number with the same digits)</a>：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">You have to create a function that takes a positive integer number <span class="keyword">and</span> returns the <span class="keyword">next</span> bigger number formed by the same <span class="symbol">digits:</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span> ==&gt; <span class="number">21</span></span><br><span class="line"><span class="number">513</span> ==&gt; <span class="number">531</span></span><br><span class="line"><span class="number">2017</span> ==&gt; <span class="number">2071</span></span><br><span class="line">If no bigger number can be composed using those digits, <span class="keyword">return</span> -<span class="number">1</span><span class="symbol">:</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span> ==&gt; -<span class="number">1</span></span><br><span class="line"><span class="number">111</span> ==&gt; -<span class="number">1</span></span><br><span class="line"><span class="number">531</span> ==&gt; -<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_bigger</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">12</span>),<span class="number">21</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">513</span>),<span class="number">531</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">2017</span>),<span class="number">2071</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">414</span>),<span class="number">441</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">144</span>),<span class="number">414</span>)</span><br></pre></td></tr></table></figure></p><p><a href="https://www.codewars.com/kata/most-frequently-used-words-in-a-text/train/ruby" target="_blank" rel="noopener">題目(Most frequently used words in a text)</a>：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Write a function that, given a string of text (possibly with punctuation <span class="keyword">and</span> line-breaks), returns an array of the top-<span class="number">3</span> most occurring words, <span class="keyword">in</span> descending order of the number of occurrences.</span><br><span class="line"></span><br><span class="line"><span class="symbol">Assumptions:</span></span><br><span class="line">A word is a string of letters (A to Z) optionally containing one <span class="keyword">or</span> more apostrophes (<span class="string">') in ASCII. (No need to handle fancy punctuation.)</span></span><br><span class="line"><span class="string">Matches should be case-insensitive, and the words in the result should be lowercased.</span></span><br><span class="line"><span class="string">Ties may be broken arbitrarily.</span></span><br><span class="line"><span class="string">If a text contains fewer than three unique words, then either the top-2 or top-1 words should be returned, or an empty array if a text contains no words.</span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">top_3_words("In a village of La Mancha, the name of which I have no desire to call to</span></span><br><span class="line"><span class="string">mind, there lived not long since one of those gentlemen that keep a lance</span></span><br><span class="line"><span class="string">in the lance-rack, an old buckler, a lean hack, and a greyhound for</span></span><br><span class="line"><span class="string">coursing. An olla of rather more beef than mutton, a salad on most</span></span><br><span class="line"><span class="string">nights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra</span></span><br><span class="line"><span class="string">on Sundays, made away with three-quarters of his income.")</span></span><br><span class="line"><span class="string"># =&gt; ["a", "of", "on"]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">top_3_words("e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e")</span></span><br><span class="line"><span class="string"># =&gt; ["e", "ddd", "aa"]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">top_3_words("  //wont won'</span>t won<span class="string">'t")</span></span><br><span class="line"><span class="string"># =&gt; ["won'</span>t<span class="string">", "</span>wont<span class="string">"]</span></span><br><span class="line"><span class="string">Bonus points (not really, but just for fun):</span></span><br><span class="line"><span class="string">Avoid creating an array whose memory footprint is roughly as big as the input text.</span></span><br><span class="line"><span class="string">Avoid sorting the entire array of unique words.</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_3_words</span><span class="params">(text)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">"a a a  b  c c  d d d d  e e e e e"</span>), [<span class="string">"e"</span>, <span class="string">"d"</span>, <span class="string">"a"</span>])</span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">"e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e"</span>), [<span class="string">"e"</span>, <span class="string">"ddd"</span>, <span class="string">"aa"</span>])</span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">"  //wont won't won't "</span>), [<span class="string">"won't"</span>, <span class="string">"wont"</span>])</span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">"  , e   .. "</span>), [<span class="string">"e"</span>])</span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">"  ...  "</span>), [])</span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">"  '  "</span>), [])</span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">"  '''  "</span>), [])</span><br><span class="line">Test.assert_equals(top_3_words(<span class="string">""</span><span class="string">"In a village of La Mancha, the name of which I have no desire to call to</span></span><br><span class="line"><span class="string">mind, there lived not long since one of those gentlemen that keep a lance</span></span><br><span class="line"><span class="string">in the lance-rack, an old buckler, a lean hack, and a greyhound for</span></span><br><span class="line"><span class="string">coursing. An olla of rather more beef than mutton, a salad on most</span></span><br><span class="line"><span class="string">nights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra</span></span><br><span class="line"><span class="string">on Sundays, made away with three-quarters of his income."</span><span class="string">""</span>), [<span class="string">"a"</span>, <span class="string">"of"</span>, <span class="string">"on"</span>])</span><br></pre></td></tr></table></figure></p><hr><p>影片解題：<a href="https://www.youtube.com/watch?v=zvf6Nv3jlpQ" target="_blank" rel="noopener"><img src="https://img.youtube.com/vi/zvf6Nv3jlpQ/0.jpg" alt="Yes"></a></p><hr><p>答案：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Next bigger number with the same digits</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_bigger</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s.split(<span class="string">''</span>).permutation(n.to_s.length).map(&amp;<span class="symbol">:join</span>).select&#123; <span class="params">|x|</span> <span class="keyword">return</span> x.to_i <span class="keyword">if</span> x.to_i &gt; n &#125;</span><br><span class="line">  -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">next_bigger(<span class="number">1234567980</span>)</span><br><span class="line"><span class="comment">#會有時間複雜度喔</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Most frequently used words in a text</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_3_words</span><span class="params">(text)</span></span></span><br><span class="line">  text.scan(<span class="regexp">/[A-Za-z']+/</span>)</span><br><span class="line">      .select&#123; <span class="params">|x|</span> /[A-Za-z]/ =~ x &#125;</span><br><span class="line">      .group_by&#123; <span class="params">|x|</span> x.downcase &#125;</span><br><span class="line">      .sort_by&#123; <span class="params">|k, v|</span> -v.count &#125;</span><br><span class="line">      .first(<span class="number">3</span>)</span><br><span class="line">      .map(&amp;<span class="symbol">:first</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>本文同步發布於 <a href="https://riverye.com/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先補上昨天未解完 &lt;a href=&quot;https://www.codewars.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codewars&lt;/a&gt; LV4 的答案，&lt;br&gt;
時間複雜度沒有解決，若有更好解法可在下方留言讓我知道喔~~&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="11th鐵人賽" scheme="https://riverye.com/tags/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day27 - Codewars 刷題</title>
    <link href="https://riverye.com/2019/10/06/Day27-Codewars-%E5%88%B7%E9%A1%8C/"/>
    <id>https://riverye.com/2019/10/06/Day27-Codewars-刷題/</id>
    <published>2019-10-05T16:00:00.000Z</published>
    <updated>2019-10-08T17:14:52.782Z</updated>
    
    <content type="html"><![CDATA[<p>倒數三天強度不升級下怎行呢<br><a href="https://www.codewars.com/" target="_blank" rel="noopener">Codewars</a> LV4<br>打算一氣呵成寫完，結果後面卡住 (暈<br>正確解法明天補上~</p><hr><p><a href="https://www.codewars.com/kata/55983863da40caa2c900004e/train/ruby" target="_blank" rel="noopener">題目(Next bigger number with the same digits)</a>：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">You have to create a function that takes a positive integer number <span class="keyword">and</span> returns the <span class="keyword">next</span> bigger number formed by the same <span class="symbol">digits:</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span> ==&gt; <span class="number">21</span></span><br><span class="line"><span class="number">513</span> ==&gt; <span class="number">531</span></span><br><span class="line"><span class="number">2017</span> ==&gt; <span class="number">2071</span></span><br><span class="line">If no bigger number can be composed using those digits, <span class="keyword">return</span> -<span class="number">1</span><span class="symbol">:</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span> ==&gt; -<span class="number">1</span></span><br><span class="line"><span class="number">111</span> ==&gt; -<span class="number">1</span></span><br><span class="line"><span class="number">531</span> ==&gt; -<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_bigger</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">12</span>),<span class="number">21</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">513</span>),<span class="number">531</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">2017</span>),<span class="number">2071</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">414</span>),<span class="number">441</span>)</span><br><span class="line">Test.assert_equals(next_bigger(<span class="number">144</span>),<span class="number">414</span>)</span><br></pre></td></tr></table></figure></p><hr><p>影片解題：<a href="https://www.youtube.com/watch?v=kkYqoLFGJTE" target="_blank" rel="noopener"><img src="https://img.youtube.com/vi/kkYqoLFGJTE/0.jpg" alt="Yes"></a></p><hr><p>答案：</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Next bigger number with the same digits</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_bigger</span><span class="params">(n)</span></span></span><br><span class="line">  n.to_s.split(<span class="string">''</span>).permutation(n.to_s.length).map(&amp;<span class="symbol">:join</span>).select&#123; <span class="params">|x|</span> <span class="keyword">return</span> x.to_i <span class="keyword">if</span> x.to_i &gt; n &#125;</span><br><span class="line">  -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#非正確答案喔!!</span></span><br></pre></td></tr></table></figure></p><p><strong>下集待續..</strong></p><p>本文同步發布於 <a href="https://riverye.com/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;倒數三天強度不升級下怎行呢&lt;br&gt;
&lt;a href=&quot;https://www.codewars.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codewars&lt;/a&gt; LV4&lt;br&gt;
打算一氣呵成寫完，結果後面卡住 (暈&lt;br&gt;
正確解法明天補上
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="11th鐵人賽" scheme="https://riverye.com/tags/11th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
