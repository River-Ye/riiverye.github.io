<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://riverye.com/"/>
  <updated>2021-09-14T16:42:21.931Z</updated>
  <id>https://riverye.com/</id>
  
  <author>
    <name>River-Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day01 - 鐵人賽我又來囉</title>
    <link href="https://riverye.com/2021/09/14/Day01-%E9%90%B5%E4%BA%BA%E8%B3%BD%E6%88%91%E5%8F%88%E4%BE%86%E5%9B%89/"/>
    <id>https://riverye.com/2021/09/14/Day01-鐵人賽我又來囉/</id>
    <published>2021-09-13T16:00:00.000Z</published>
    <updated>2021-09-14T16:42:21.931Z</updated>
    
    <content type="html"><![CDATA[<p>避免像去年一樣焦頭爛額，這次提前至 7 月開始準備鐵人賽，<br>即便提早準備，也不知要寫什麼...<br>只準備了幾篇文章的庫存，<br>期許這次能迎刃有餘的完賽。</p><hr><h2><span id="目前想到的-30-天內容如下">目前想到的 30 天內容如下：</span></h2><p>Day01 - 參賽心得<br>Day02 - 修改 Rails console edit 編輯模式<br>Day03 - Gem-strip_attributes 介紹與應用<br>Day04 - Gem-activerecord-import 批次建立介紹與應用<br>Day05 - Gem-paranoia 軟刪除介紹與應用<br>Day06 - 監控 Sidekiq 有無正常運作(或執行超過多久)<br>Day07 - Gem-sidekiq-limit_fetch 限制 sidekiq queue 執行數量<br>Day08 - Gem-sidekiq-grouping 允許單個 sidekiq 處理多個相似(一樣)的 jobs<br>Day09 - Gem-jwt 介紹與應用<br>Day10 - 如何用手機連 Ruby on Rails Local 開發中的專案<br>Day11 - Gem-rqrcode 或 barby 產 QR Code<br>Day12 - 解析圖片中的 QR Code 資料<br>Day13 - Gem-grape 介紹與應用 3-1 應用篇<br>Day14 - Gem-grape 介紹與應用 3-2 應用篇<br>Day15 - Gem-grape 介紹與應用 3-3 應用篇<br>Day16 - Gem-grape 測試篇<br>Day17 - Gem-grape 測試篇<br>Day18 - PDF 解密與處理<br>Day19 - PDF 加浮水印<br>Day20 - 匯出 PDF<br>Day21 - 匯入 excel-應用篇<br>Day22 - 匯入 excel-測試篇<br>Day23 - 匯出 excel-應用篇<br>Day24 - 匯出 excel-測試篇<br>Day25 - 簡訊 API-三竹-應用篇<br>Day26 - 簡訊 API-三竹-測試篇<br>Day27 - 簡訊 API-Every8d-應用篇<br>Day28 - 簡訊 API-Every8d-測試篇<br>Day29 - 簡訊服務不中斷，自動切換<br>Day30 - 完賽心得</p><h3><span id="備註-以上標題-順序僅供參考依當天發文為主-xd">備註: 以上標題、順序僅供參考，依當天發文為主 XD</span></h3><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10264068" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10264068</a><br>medium 文章連結：<a href></a><br>本文同步發布於 <a href="http://localhost:4000/2021/09/14/Day01-%E9%90%B5%E4%BA%BA%E8%B3%BD%E6%88%91%E5%8F%88%E4%BE%86%E5%9B%89/" target="_blank" rel="noopener">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;避免像去年一樣焦頭爛額，這次提前至 7 月開始準備鐵人賽，&lt;br&gt;
即便提早準備，也不知要寫什麼...&lt;br&gt;
只準備了幾篇文章的庫存，&lt;br&gt;
期許這次能迎刃有餘的完賽。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&quot;目前想到的-30-天內容如下&quot;&gt;目前想到的 30 天內
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="13th鐵人賽" scheme="https://riverye.com/tags/13th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 10 底下的 Ubuntu 18.04 LTS 執行 Ruby on Rails 的 RSpec Capybara 能顯示 Chrome 瀏覽器 (selenium-webdriver) 跑 E2E 測試</title>
    <link href="https://riverye.com/2020/10/13/%E5%9C%A8-Windows-10-%E5%BA%95%E4%B8%8B%E7%9A%84-Ubuntu-18-04-LTS-%E5%9F%B7%E8%A1%8C-Ruby-on-Rails-%E7%9A%84-RSpec-Capybara-%E8%83%BD%E9%A1%AF%E7%A4%BA-Chrome-%E7%80%8F%E8%A6%BD%E5%99%A8-selenium-webdriver-%E8%B7%91-E2E-%E6%B8%AC%E8%A9%A6/"/>
    <id>https://riverye.com/2020/10/13/在-Windows-10-底下的-Ubuntu-18-04-LTS-執行-Ruby-on-Rails-的-RSpec-Capybara-能顯示-Chrome-瀏覽器-selenium-webdriver-跑-E2E-測試/</id>
    <published>2020-10-12T16:00:00.000Z</published>
    <updated>2020-10-12T17:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><blockquote><p>在 Windows 10 底下的 Ubuntu 18.04 LTS 執行 Ruby on Rails 的 RSpec Capybara 能顯示 Chrome 瀏覽器 (selenium-webdriver) 跑 E2E 測試</p></blockquote><p>這標題真的很長 XD</p><p>希望在 Windows 環境下的 Ruby on Rails 文章能多些 (雷真的很多...)，別老是霸凌 Windows 啊... (雖然我工作上也是用 Mac)</p><p>之前看 Mac 電腦，直接執行 <code>rspec spec</code> 就能有效果，換成在 Windows 上時，卻變得很艱辛，過程中很多環境的雷，且相關資源真的很少，之前搞過一陣子，如今終於可以順利執行 (撒花</p><p>此篇為鐵人賽加碼文章，本文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><h2><span id="環境介紹">環境介紹</span></h2><p>以下為個人在 Windows 電腦使用的環境，Ruby on Rails 相關版本，可參考 <a href="https://github.com/River-Ye/ironman_12th_2020/blob/master/Gemfile.lock" target="_blank" rel="noopener">repo 中的 Gemfile.lock</a></p><p>備註: 若還沒在 Windows 安裝 Ruby on Rails 環境，<a href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/">可參考這篇文章</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作業系統: Windows 10 家用版 1909 版 (OS 組建 18363.1082)</span><br><span class="line"></span><br><span class="line">Ubuntu: Ubuntu 18.04 LTS</span><br><span class="line"></span><br><span class="line">瀏覽器: Google Chrome 版本 86.0.4240.75 (正式版本) (64 位元)</span><br></pre></td></tr></table></figure></p><h2><span id="如何安裝">如何安裝</span></h2><p>以 Ruby on Rails -v 6.0.3.3 版本為例，建立專案時，在 <code>Gemfile</code> 的 <code>test</code> group 中，已經有 <code>capybara</code> 、 <code>selenium-webdriver</code> 、 <code>webdrivers</code> 這三個 Gem，可參考 <a href="https://github.com/River-Ye/ironman_12th_2020/blob/master/Gemfile#L68" target="_blank" rel="noopener">repo 中的 Gemfile</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile 檔案</span></span><br><span class="line"></span><br><span class="line">group <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">  gem <span class="string">'capybara'</span>, <span class="string">'&gt;= 2.15'</span></span><br><span class="line">  gem <span class="string">'selenium-webdriver'</span></span><br><span class="line">  gem <span class="string">'webdrivers'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何設定">如何設定</span></h2><p>可將下方寫在 <code>spec/support/capybara.rb</code> 的設定，統一寫在 <code>spec/rails_helper.rb</code> 的檔案中，兩種方式都可以，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/19/commits/a2e90488c50a3c61389baa735c9c0ca4d87e9db3" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spec/rails_helper.rb</span></span><br><span class="line">Dir[Rails.root.join(<span class="string">'spec'</span>, <span class="string">'support'</span>, <span class="string">'**'</span>, <span class="string">'*.rb'</span>)].sort.each &#123; <span class="params">|f|</span> <span class="keyword">require</span> f &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spec/support/capybara.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capybara'</span></span><br><span class="line"></span><br><span class="line">Capybara.register_driver <span class="symbol">:chrome</span> <span class="keyword">do</span> <span class="params">|app|</span></span><br><span class="line">  Capybara::Selenium::Driver.new(app, <span class="symbol">browser:</span> <span class="symbol">:chrome</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Capybara.javascript_driver = <span class="symbol">:chrome</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line">  - xvfb</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spec/features/sign_in_spec.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rails_helper'</span></span><br><span class="line"></span><br><span class="line">RSpec.feature <span class="string">'test'</span>, <span class="symbol">type:</span> <span class="symbol">:feature</span>, <span class="symbol">driver:</span> <span class="symbol">:chrome</span>, <span class="symbol">js:</span> <span class="literal">true</span>, <span class="symbol">slow:</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">  describe <span class="string">'Feature spec/功能測試'</span> <span class="keyword">do</span></span><br><span class="line">    before(<span class="symbol">:each</span>) <span class="keyword">do</span></span><br><span class="line">      visit users_path</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    scenario <span class="string">'User CRUD'</span> <span class="keyword">do</span></span><br><span class="line">      expect(User.count).to eq(<span class="number">0</span>)</span><br><span class="line">      click_on(<span class="string">'New User'</span>)</span><br><span class="line">      fill_in(<span class="string">'Name'</span>, <span class="symbol">with:</span> <span class="string">'小菜'</span>)</span><br><span class="line">      fill_in(<span class="string">'Email'</span>, <span class="symbol">with:</span> <span class="string">'river@riverye.com'</span>)</span><br><span class="line">      fill_in(<span class="string">'Phone'</span>, <span class="symbol">with:</span> <span class="string">'0987654321'</span>)</span><br><span class="line">      fill_in(<span class="string">'Address'</span>, <span class="symbol">with:</span> <span class="string">'某個地方'</span>)</span><br><span class="line">      click_button(<span class="string">'Create User'</span>)</span><br><span class="line">      expect(User.count).to eq(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2><span id="travis-ci-設定">Travis CI 設定</span></h2><p>實際 Travis CI 跑的 log 紀錄可參考這個 <a href="https://travis-ci.com/github/River-Ye/ironman_12th_2020/builds/189393212" target="_blank" rel="noopener">Job log 紀錄</a></p><p>更多設定可參考 <a href="https://docs.travis-ci.com/user/chrome" target="_blank" rel="noopener">Travis CI Docs</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line">  - xvfb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 別懷疑，就是這麼簡單 XD</span></span><br></pre></td></tr></table></figure></p><h2><span id="在-windows-的-ubuntu-執行-rspec-會顯示-chrome-瀏覽器模擬操作">在 Windows 的 Ubuntu 執行 RSpec 會顯示 Chrome 瀏覽器模擬操作</span></h2><p>備註: <a href="https://youtu.be/uNOmOK2FOYs" target="_blank" rel="noopener">影片版</a><br><img src="https://i.imgur.com/hyyNxeZ.gif" alt></p><h2><span id="參考資料">參考資料</span></h2><p><a href="https://qiita.com/jnchito/items/c7e6e7abf83598a6516d" target="_blank" rel="noopener">rspec-rails 3.7の新機能！System Specを使ってみた</a></p><h2><span id="小結">小結</span></h2><p>此方法也有在 MacOS 測試過，確認能在 Windows 、 MacOS 環境執行，前面鐵人賽文章幾乎都是在 MacOS 環境寫的，偶爾要替 Windows 平反下 XD</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10252686" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10252686</a><br>medium 文章連結：<a href="https://link.medium.com/hn69TJ6Qwab" target="_blank" rel="noopener">https://link.medium.com/hn69TJ6Qwab</a><br>本文同步發布於 <a href="https://riverye.com/2020/10/13/%E5%9C%A8-Windows-10-%E5%BA%95%E4%B8%8B%E7%9A%84-Ubuntu-18-04-LTS-%E5%9F%B7%E8%A1%8C-Ruby-on-Rails-%E7%9A%84-RSpec-Capybara-%E8%83%BD%E9%A1%AF%E7%A4%BA-Chrome-%E7%80%8F%E8%A6%BD%E5%99%A8-selenium-webdriver-%E8%B7%91-E2E-%E6%B8%AC%E8%A9%A6/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Windows 10 底下的 Ubuntu 18.04 LTS 執行 Ruby on Rails 的 RSpec Capybara 能顯示 Chrome 瀏覽器 (seleniu
      
    
    </summary>
    
    
      <category term="環境建置" scheme="https://riverye.com/categories/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/"/>
    
    
      <category term="Rails" scheme="https://riverye.com/tags/Rails/"/>
    
      <category term="Ruby" scheme="https://riverye.com/tags/Ruby/"/>
    
      <category term="Ubuntu" scheme="https://riverye.com/tags/Ubuntu/"/>
    
      <category term="RSpec" scheme="https://riverye.com/tags/RSpec/"/>
    
      <category term="Windows" scheme="https://riverye.com/tags/Windows/"/>
    
      <category term="Capybara" scheme="https://riverye.com/tags/Capybara/"/>
    
      <category term="selenium-webdriver" scheme="https://riverye.com/tags/selenium-webdriver/"/>
    
  </entry>
  
  <entry>
    <title>Day30 - 不免俗一定要來一下的完賽心得</title>
    <link href="https://riverye.com/2020/10/05/Day30-%E4%B8%8D%E5%85%8D%E4%BF%97%E4%B8%80%E5%AE%9A%E8%A6%81%E4%BE%86%E4%B8%80%E4%B8%8B%E7%9A%84%E5%AE%8C%E8%B3%BD%E5%BF%83%E5%BE%97/"/>
    <id>https://riverye.com/2020/10/05/Day30-不免俗一定要來一下的完賽心得/</id>
    <published>2020-10-04T16:00:00.000Z</published>
    <updated>2020-10-30T12:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="參賽動機">參賽動機</span></h2><p>當初參賽，單純只是想把工作這段期間所學，當作學習筆記紀錄起來</p><p>既然要寫，至少要做到輸出的資訊是正確的，以免混淆讀者，若有發現錯字、表達不夠清楚、資訊錯誤等，請不吝嗇的留言告訴我，我會很感激的!!!</p><h2><span id="回顧過程">回顧過程</span></h2><p>過程中，不得不說挺痛苦的，一邊要工作，一邊要想鐵人賽文章，整個焦頭爛額，</p><p>光是題目發想就夠困擾了，有些題目老實說一開始自己也沒什麼把握 (講白就是還不懂)，需要先花一段時間研究、看相關文章資料等進行內化，</p><p>加上後面 Ruby on Rails 文章，都有附上 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">commit</a> ，讓人可以更快理解怎麼做，</p><p>並附上 GIF 或相關截圖，弄下來所花的時間挺可觀的，這 30 篇加起來，至少花 120 小時以上準備、撰寫、截圖、發 pr 等，</p><p>連續一個月的平日、假日都窩在房間長香菇寫文章、假日待在咖啡廳寫文章，寫到眼睛看出去都變模糊了...</p><p>連與朋友約捷運站時，為了把握時間，坐在捷運的椅子上，筆電打開就開始寫文章，在朋友家吃完飯後，把握瑣碎時間，也是如此，</p><p>甚至誇張到前晚身體不適半夜送急診吊點滴，腦中也是想著鐵人賽還有 2 篇還沒寫...(不唬爛)</p><p>如今終於完賽了，問我後悔嗎? 答案是肯定的，不後悔，過程中可以感受到自己的成長，那種成長的喜悅是難以言喻形容，</p><p>雖不像當初剛學寫程式會動的那種極大成就感，但這種感覺棒極了，持續促使我前進的動力，覺得有逐漸在變強中，</p><p>接下來寫文章的步調會放慢，不定期更新在 <a href="https://riverye.com/">小菜的 Blog</a>，歡迎各位看官來看看</p><h2><span id="總結">總結</span></h2><p>終於到這段了，覺得開心，現在回想起來，能堅持 30 天真的很不容易，</p><p>哪怕寫的都沒人看、是廢文也都沒關係，</p><p>重點在於「自己」是否有成長，只要「有」，就值得了，</p><p>寫文章時，習慣性會戴上耳機，隨機聽著 Youtube 播放的音樂，</p><p>在這過程中認識了些平常不會接觸到的歌手、樂團，不得不說都很有潛力且好聽，</p><p>無形中自己常聽的音樂風格也正在轉變，不同季節，會有各自合適的音樂陪伴</p><p>送上其中一首好聽的音樂與大家分享 <a href="https://youtu.be/icOPUwJuzck" target="_blank" rel="noopener">任然 - 奇妙能力歌</a></p><p>最後，「你必須很努力，才能看起來毫不費力」</p><p>謝謝大家的觀看</p><h2><span id="大補帖">大補帖</span></h2><table><thead><tr><th style="text-align:center">編號</th><th>名稱</th><th style="text-align:center">小菜的 Blog</th><th style="text-align:center">鐵人賽</th><th style="text-align:center">Medium</th></tr></thead><tbody><tr><td style="text-align:center">01</td><td>不免俗一定要來一下的參賽宣言</td><td style="text-align:center"><a href="https://riverye.com/2020/09/06/Day01-%E4%B8%8D%E5%85%8D%E4%BF%97%E4%B8%80%E5%AE%9A%E8%A6%81%E4%BE%86%E4%B8%80%E4%B8%8B%E7%9A%84%E5%8F%83%E8%B3%BD%E5%AE%A3%E8%A8%80/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10233527" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/i4b4cs2Yy9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">02</td><td>Chrome 的小技巧 - 內建截圖功能</td><td style="text-align:center"><a href="https://riverye.com/2020/09/07/Day02-Chrome-%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-%E5%85%A7%E5%BB%BA%E6%88%AA%E5%9C%96%E5%8A%9F%E8%83%BD/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10234563" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/oZb6FTK0y9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">03</td><td>Chrome 的小技巧 - 內建 URL 轉 QRcode</td><td style="text-align:center"><a href="https://riverye.com/2020/09/08/Day03-Chrome-%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-%E5%85%A7%E5%BB%BA-URL-%E8%BD%89-QRcode/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10234819" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/9vaGB6oFA9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">04</td><td>Mac 上常用的軟體 (iTerm2、Dash、Alfred、Spectacle、Kap、GIPHY Capture)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/09/Day04-Mac-%E4%B8%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BB%9F%E9%AB%94-iTerm2%E3%80%81Dash%E3%80%81Alfred%E3%80%81Spectacle%E3%80%81Kap%E3%80%81GIPHY-Capture/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10235051" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/MtQHdCtkC9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">05</td><td>Mac、Chrome、iTerm2、Visual Studio Code 上常用的快捷鍵</td><td style="text-align:center"><a href="https://riverye.com/2020/09/10/Day05-Mac%E3%80%81Chrome%E3%80%81iTerm2%E3%80%81Visual-Studio-Code-%E4%B8%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%8D%B5/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10235273" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/BZq1ehbZD9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">06</td><td>一些常用 Linux 指令 - 1-7 - 基礎篇 (exit、pwd、ls、cd、touch、mkdir、rm、cp、scp、mv、sudo、man、help、clear、which、find)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/11/Day06-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-1-7-%E5%9F%BA%E7%A4%8E%E7%AF%87-exit%E3%80%81pwd%E3%80%81ls%E3%80%81cd%E3%80%81touch%E3%80%81mkdir%E3%80%81rm%E3%80%81cp%E3%80%81scp%E3%80%81mv%E3%80%81sudo%E3%80%81man%E3%80%81help%E3%80%81clear%E3%80%81which%E3%80%81find/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10235530" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/fi1zYzsEF9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">07</td><td>一些常用 Linux 指令 - 2-7 (ps、top、htop、free、df、du、kill)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/12/Day07-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-2-7-ps%E3%80%81top%E3%80%81htop%E3%80%81free%E3%80%81df%E3%80%81du%E3%80%81kill/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10235798" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/KnBM0DriH9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">08</td><td>一些常用 Linux 指令 - 3-7 (cat、tac、head、tail、vi、sed)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/13/Day08-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-3-7-cat%E3%80%81tac%E3%80%81head%E3%80%81tail%E3%80%81vi%E3%80%81sed/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10236105" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/4hDsZdhXI9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">09</td><td>一些常用 Linux 指令 - 4-7 (grep、rg、luit、iconv、cal、date)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/14/Day09-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-4-7-grep%E3%80%81rg%E3%80%81luit%E3%80%81iconv%E3%80%81cal%E3%80%81date/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10236391" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/YFjvigcCK9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">10</td><td>一些常用 Linux 指令 - 5-7 (lsof、dig、curl、nc、nice、cpulimit)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/15/Day10-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-5-7-lsof%E3%80%81dig%E3%80%81curl%E3%80%81nc%E3%80%81nice%E3%80%81cpulimit/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10236845" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/It3HtR6gM9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">11</td><td>一些 Linux 套件 - 6-7 - 實用篇 (fzf、tldr)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/16/Day11-%E4%B8%80%E4%BA%9B-Linux-%E5%A5%97%E4%BB%B6-6-7-%E5%AF%A6%E7%94%A8%E7%AF%87-fzf%E3%80%81tldr/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10237413" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/W5OE67YVN9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">12</td><td>一些 Linux 套件 - 7-7 - 不實用篇 (cowsay、cmatrix)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/17/Day12-%E4%B8%80%E4%BA%9B-Linux-%E5%A5%97%E4%BB%B6-7-7-%E4%B8%8D%E5%AF%A6%E7%94%A8%E7%AF%87-cowsay%E3%80%81cmatrix/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10238183" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/IaMPuOTAP9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">13</td><td>一些 Git 指令</td><td style="text-align:center"><a href="https://riverye.com/2020/09/18/Day13-%E4%B8%80%E4%BA%9B-Git-%E6%8C%87%E4%BB%A4/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10238939" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/Mmx5PSNfR9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">14</td><td>在 Ruby 中使用 Benchmark 比較哪個方法比較快</td><td style="text-align:center"><a href="https://riverye.com/2020/09/19/Day14-%E5%9C%A8-Ruby-%E4%B8%AD%E4%BD%BF%E7%94%A8-Benchmark-%E6%AF%94%E8%BC%83%E5%93%AA%E5%80%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BC%83%E5%BF%AB/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10239641" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/epApulKUS9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">15</td><td>如何看自己打出去的 request 完整資訊，以 PostBin 和 Webhook.site 為例</td><td style="text-align:center"><a href="https://riverye.com/2020/09/20/Day15-%E5%A6%82%E4%BD%95%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%89%93%E5%87%BA%E5%8E%BB%E7%9A%84-request-%E5%AE%8C%E6%95%B4%E8%B3%87%E8%A8%8A%EF%BC%8C%E4%BB%A5-PostBin-%E5%92%8C-Webhook-site-%E7%82%BA%E4%BE%8B/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10240421" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/jTboFdd7U9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">16</td><td>Ruby on Rails 中的風格管理套件 RuboCop</td><td style="text-align:center"><a href="https://riverye.com/2020/09/21/Day16-Ruby-on-Rails-%E4%B8%AD%E7%9A%84%E9%A2%A8%E6%A0%BC%E7%AE%A1%E7%90%86%E5%A5%97%E4%BB%B6-RuboCop/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10240956" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/fx6sSkzeW9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">17</td><td>Ruby on Rails 中的 awesome_print 讓你的 console 更好閱讀</td><td style="text-align:center"><a href="https://riverye.com/2020/09/22/Day17-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-awesome-print-%E8%AE%93%E4%BD%A0%E7%9A%84-console-%E6%9B%B4%E5%A5%BD%E9%96%B1%E8%AE%80/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10241726" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/RDfLdOCrY9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">18</td><td>Ruby on Rails 中的 Logger 紀錄的介紹與應用</td><td style="text-align:center"><a href="https://riverye.com/2020/09/23/Day18-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Logger-%E7%B4%80%E9%8C%84%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10242280" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/9T7n8giyZ9" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">19</td><td>Ruby on Rails 測試篇 - RSpec</td><td style="text-align:center"><a href="https://riverye.com/2020/09/24/Day19-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-RSpec/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10242906" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/M8qWBUbd19" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">20</td><td>Ruby on Rails 測試篇 - Cucumber (內文有範例教如何寫中文測試)</td><td style="text-align:center"><a href="https://riverye.com/2020/09/25/Day20-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-Cucumber-%E5%85%A7%E6%96%87%E6%9C%89%E7%AF%84%E4%BE%8B%E6%95%99%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10243344" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/uP1cmw5R29" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">21</td><td>Ruby on Rails 中常見的 N+1 與解法</td><td style="text-align:center"><a href="https://riverye.com/2020/09/26/Day21-Ruby-on-Rails-%E4%B8%AD%E5%B8%B8%E8%A6%8B%E7%9A%84-N-1-%E8%88%87%E8%A7%A3%E6%B3%95/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10244142" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/w4c3ApZw49" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">22</td><td>Ruby on Rails 中的 Race Condition</td><td style="text-align:center"><a href="https://riverye.com/2020/09/27/Day22-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Race-Condition/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10244812" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/AUCVQnUb69" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">23</td><td>Ruby on Rails 中的 Redis 的介紹與應用</td><td style="text-align:center"><a href="https://riverye.com/2020/09/28/Day23-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Redis-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10245246" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/V8n6I2TQ79" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">24</td><td>Ruby on Rails 中的 Resque 的介紹與應用</td><td style="text-align:center"><a href="https://riverye.com/2020/09/29/Day24-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Resque-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10245939" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/Qz9SocIv99" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">25</td><td>Ruby on Rails 中的 Sidekiq 的介紹與應用</td><td style="text-align:center"><a href="https://riverye.com/2020/09/30/Day25-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Sidekiq-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10246607" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/RPXFvaCabab" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">26</td><td>Ruby on Rails 中使用 FFmpeg 處理影音轉檔、合併、上字幕</td><td style="text-align:center"><a href="https://riverye.com/2020/10/01/Day26-Ruby-on-Rails-%E4%B8%AD%E4%BD%BF%E7%94%A8-FFmpeg-%E8%99%95%E7%90%86%E5%BD%B1%E9%9F%B3%E8%BD%89%E6%AA%94%E3%80%81%E5%90%88%E4%BD%B5%E3%80%81%E4%B8%8A%E5%AD%97%E5%B9%95/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10247454" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/Z5b8hjxVdab" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">27</td><td>Ruby on Rails 中使用 Foreman 打包所有要啟動的 server</td><td style="text-align:center"><a href="https://riverye.com/2020/10/02/Day27-Ruby-on-Rails-%E4%B8%AD%E4%BD%BF%E7%94%A8-Foreman-%E6%89%93%E5%8C%85%E6%89%80%E6%9C%89%E8%A6%81%E5%95%9F%E5%8B%95%E7%9A%84-server/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10247491" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/bWT6dLpueab" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">28</td><td>Ruby on Rails 中串 Slack 通知</td><td style="text-align:center"><a href="https://riverye.com/2020/10/03/Day28-Ruby-on-Rails-%E4%B8%AD%E4%B8%B2-Slack-%E9%80%9A%E7%9F%A5/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10247920" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/tYwlNOicgab" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">29</td><td>Ruby 中的 Struct 與 OpenStruct</td><td style="text-align:center"><a href="https://riverye.com/2020/10/04/Day29-Ruby-%E4%B8%AD%E7%9A%84-Struct-%E8%88%87-OpenStruct/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10249081" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/YGEc5Qnqjab" target="_blank" rel="noopener">點我</a></td></tr><tr><td style="text-align:center">30</td><td>不免俗一定要來一下的完賽心得</td><td style="text-align:center"><a href="https://riverye.com/2020/10/05/Day30-%E4%B8%8D%E5%85%8D%E4%BF%97%E4%B8%80%E5%AE%9A%E8%A6%81%E4%BE%86%E4%B8%80%E4%B8%8B%E7%9A%84%E5%AE%8C%E8%B3%BD%E5%BF%83%E5%BE%97/">點我</a></td><td style="text-align:center"><a href="https://ithelp.ithome.com.tw/articles/10249150" target="_blank" rel="noopener">點我</a></td><td style="text-align:center"><a href="https://link.medium.com/0GPyFPxqkab" target="_blank" rel="noopener">點我</a></td></tr></tbody></table><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10249150" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10249150</a><br>medium 文章連結：<a href="https://link.medium.com/0GPyFPxqkab" target="_blank" rel="noopener">https://link.medium.com/0GPyFPxqkab</a><br>本文同步發布於 <a href="https://riverye.com/2020/10/05/Day30-%E4%B8%8D%E5%85%8D%E4%BF%97%E4%B8%80%E5%AE%9A%E8%A6%81%E4%BE%86%E4%B8%80%E4%B8%8B%E7%9A%84%E5%AE%8C%E8%B3%BD%E5%BF%83%E5%BE%97/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;參賽動機&quot;&gt;參賽動機&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;當初參賽，單純只是想把工作這段期間所學，當作學習筆記紀錄起來&lt;/p&gt;
&lt;p&gt;既然要寫，至少要做到輸出的資訊是正確的，以免混淆讀者，若有發現錯字、表達不夠清楚、資訊錯誤等，請不吝嗇的留言告訴我，我會很感
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day29 - Ruby 中的 Struct 與 OpenStruct</title>
    <link href="https://riverye.com/2020/10/04/Day29-Ruby-%E4%B8%AD%E7%9A%84-Struct-%E8%88%87-OpenStruct/"/>
    <id>https://riverye.com/2020/10/04/Day29-Ruby-中的-Struct-與-OpenStruct/</id>
    <published>2020-10-03T16:00:00.000Z</published>
    <updated>2020-10-30T12:18:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>Ruby 是物件化非常徹底的程式語言，幾乎所有東西都是物件 (除了 <code>block</code> 外)，<br>很常使用 <code>class</code> 來實現物件導向，但每次都要寫 <code>class xxx</code> 建立新的類別挺麻煩的，這時可以使用 <code>Struct</code> 和 <code>OpenStruct</code></p><hr><h2><span id="openstruct">OpenStruct</span></h2><p>比 Struct 更有彈性, 可以任意增加 Attribute，不像 Struct 需先定義好有哪些 Attribute，無法定義 method，相對效能會較差些</p><h4><span id="openstruct-的祖先分別是">OpenStruct 的祖先分別是</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">irb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 irb 中，使用 OpenStruct 需 require 'ostruct'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'ostruct'</span></span><br><span class="line">OpenStruct.ancestors</span><br><span class="line"><span class="comment"># [OpenStruct, Object, Kernel, BasicObject]</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何使用">如何使用</span></h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 irb 中，使用 OpenStruct 需 require 'ostruct'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'ostruct'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">Book = OpenStruct.new</span><br><span class="line">Book.<span class="keyword">class</span>    <span class="comment"># OpenStruct</span></span><br><span class="line">Book.name = <span class="string">'Ruby on Rails 與它們相關的東西'</span></span><br><span class="line">Book.url = <span class="string">'https://riverye.com/'</span></span><br><span class="line">Book.price = <span class="number">999</span></span><br><span class="line">Book.isbn = <span class="string">'987-654-321-0'</span></span><br><span class="line">Book          <span class="comment">#&lt;OpenStruct name="Ruby on Rails 與它們相關的東西", url="https://riverye.com/", price=999, isbn="987-654-321-0"&gt;</span></span><br><span class="line"></span><br><span class="line">Book.name     <span class="comment"># Ruby on Rails 與它們相關的東西'</span></span><br><span class="line">Book[<span class="symbol">:name</span>]   <span class="comment"># Ruby on Rails 與它們相關的東西'</span></span><br><span class="line">Book[<span class="string">'name'</span>]  <span class="comment"># Ruby on Rails 與它們相關的東西'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">Book = OpenStruct.new(<span class="symbol">name:</span> <span class="string">'Ruby on Rails 與它們相關的東西'</span>, <span class="symbol">isbn:</span> <span class="string">'987-654-321-0'</span>)</span><br><span class="line">Book.name     <span class="comment"># Ruby on Rails 與它們相關的東西'</span></span><br><span class="line">Book[<span class="symbol">:name</span>]   <span class="comment"># Ruby on Rails 與它們相關的東西'</span></span><br><span class="line">Book[<span class="string">'name'</span>]  <span class="comment"># Ruby on Rails 與它們相關的東西'</span></span><br><span class="line">Book.name = <span class="string">'小菜'</span></span><br><span class="line">Book.price = <span class="number">999</span></span><br><span class="line">Book.name     <span class="comment"># 小菜</span></span><br><span class="line">Book[<span class="symbol">:name</span>]   <span class="comment"># 小菜</span></span><br><span class="line">Book[<span class="string">'name'</span>]  <span class="comment"># 小菜</span></span><br></pre></td></tr></table></figure></p><h4><span id="刪除某一個元素">刪除某一個元素</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Book</span><br><span class="line"><span class="comment">#&lt;OpenStruct name="小菜", isbn="987-654-321-0", price=999, hello=13&gt;</span></span><br><span class="line"></span><br><span class="line">Book.delete_field(<span class="symbol">:price</span>)</span><br><span class="line"><span class="comment">#&lt;OpenStruct name="小菜", isbn="987-654-321-0", hello=13&gt;</span></span><br></pre></td></tr></table></figure></p><h2><span id="struct">Struct</span></h2><p>使用前，需先定義好 Attribute，不像 OpenStruct 那麼彈性(較嚴謹)，但可以定義方法 (method) ，相對效能較好些</p><h4><span id="struct-的祖先分別是">Struct 的祖先分別是</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book = Struct.new(<span class="symbol">:name</span>)</span><br><span class="line">Book.ancestors</span><br><span class="line">[#&lt;Class:0x00007fa7ee9bb048&gt;, Struct, Enumerable, Object, Kernel, BasicObject]</span><br></pre></td></tr></table></figure></p><h2><span id="如何使用">如何使用</span></h2><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 irb 中可直接使用</span></span><br><span class="line">Book = Struct.new(<span class="symbol">:name</span>, <span class="symbol">:price</span>, <span class="symbol">:url</span>, <span class="symbol">:isbn</span>)</span><br><span class="line">book_1 = Book.new(<span class="string">'Ruby on Rails 與它們相關的東西'</span>, <span class="number">999</span>, <span class="string">'https://riverye.com/'</span>, <span class="string">'987-654-321-0'</span>)</span><br></pre></td></tr></table></figure></p><h4><span id="需要照順序放-attribute-喔若不想照順序放-attribute-的話可使用-keyword_init-true">需要照順序放 Attribute 喔，若不想照順序放 Attribute 的話，可使用 <code>keyword_init: true</code></span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Book = Struct.new(<span class="symbol">:name</span>, <span class="symbol">:price</span>, <span class="symbol">:url</span>, <span class="symbol">:isbn</span>, <span class="symbol">keyword_init:</span> <span class="literal">true</span>)</span><br><span class="line">book_hash = &#123; <span class="symbol">url:</span> <span class="string">'https://riverye.com/'</span>, <span class="symbol">isbn:</span> <span class="string">'987-654-321-0'</span>, <span class="symbol">name:</span> <span class="string">'Ruby on Rails 與它們相關的東西'</span>, <span class="symbol">price:</span> <span class="number">999</span>&#125;</span><br><span class="line">book_1 = Book.new(book_hash)</span><br><span class="line"><span class="comment">#&lt;Struct:Book:0x00000168</span></span><br><span class="line">  <span class="comment"># isbn = "987-654-321-0",</span></span><br><span class="line">  <span class="comment"># name = "Ruby on Rails 與它們相關的東西",</span></span><br><span class="line">  <span class="comment"># price = 999,</span></span><br><span class="line">  <span class="comment"># url = "https://riverye.com/"</span></span><br></pre></td></tr></table></figure></p><h4><span id="struct-可以定義方法">Struct 可以定義方法</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Book = Struct.new(<span class="string">'Book'</span>, <span class="symbol">:price</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">over_thousand?</span></span></span><br><span class="line">    price &gt;= <span class="number">1000</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Book.new(<span class="number">1000</span>).over_thousand?</span><br><span class="line"><span class="comment"># true</span></span><br></pre></td></tr></table></figure></p><h4><span id="struct-比較嚴謹">Struct 比較嚴謹</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Book = Struct.new(<span class="symbol">:name</span>, <span class="symbol">:url</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 未帶入的變數會自動變成 nil</span></span><br><span class="line">book_1 = Book.new(<span class="string">'Ruby on Rails 與它們相關的東西'</span>)</span><br><span class="line">book_1.name <span class="comment"># 'Ruby on Rails 與它們相關的東西'</span></span><br><span class="line">book_1.url  <span class="comment"># nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 無法隨時新增屬性</span></span><br><span class="line">Book.tatal = <span class="number">1</span></span><br><span class="line"><span class="comment"># NoMethodError (undefined method `total=' for Book:Class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 宣告時帶入太多參數會產生錯誤，比 OpenStruct 嚴謹許多</span></span><br><span class="line">book_1 = Book.new(<span class="string">'Ruby on Rails 與它們相關的東西'</span>, <span class="symbol">isbn:</span> <span class="string">'987-654-321-0'</span>)</span><br><span class="line"><span class="comment"># ArgumentError (struct size differs)</span></span><br></pre></td></tr></table></figure></p><h2><span id="openstruct-vs-struct-比較">OpenStruct VS. Struct 比較</span></h2><p>效能上兩者差異蠻大的，可參考 <a href="https://stackoverflow.com/questions/1177594/when-should-i-use-struct-vs-openstruct#answer-4459132" target="_blank" rel="noopener">Stack Overflow</a> 這篇，個人也是比較常用 Struct</p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="https://ckmarkoh.github.io/blog/2014/03/12/ruby-struct-vs-openstruct/" target="_blank" rel="noopener">Ruby -- Struct v.s openStruct</a></li><li><a href="https://adlerhsieh.com/blog/20150406-ruby-struct-and-ostruct" target="_blank" rel="noopener">模擬class物件：Ruby當中Struct及OpenStruct的使用</a></li><li><a href="https://mgleon08.github.io/blog/2016/05/29/struct-vs-openstruct/" target="_blank" rel="noopener">Ruby - Struct vs OpenStruct</a></li><li><a href="https://link.medium.com/qdxuTxIjjab" target="_blank" rel="noopener">OpenStruct in Ruby</a></li><li><a href="https://www.codenong.com/1177594/" target="_blank" rel="noopener">关于ruby：何时应该使用Struct vs. OpenStruct？</a></li></ol><hr><h2><span id="小結">小結</span></h2><p>個人蠻常在測試中使用，像是要要測試 Sidekiq 的 <a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/api.rb#L681" target="_blank" rel="noopener"><code>Sidekiq::RetrySet.new</code></a>，使用 Struct 來模擬，挺方便的，也會用在不同地方，下一篇會是鐵人賽總結(終於~~</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10249081" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10249081</a><br>medium 文章連結：<a href="https://link.medium.com/YGEc5Qnqjab" target="_blank" rel="noopener">https://link.medium.com/YGEc5Qnqjab</a><br>本文同步發布於 <a href="https://riverye.com/2020/10/04/Day29-Ruby-%E4%B8%AD%E7%9A%84-Struct-%E8%88%87-OpenStruct/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Ruby 是物件化非常徹底的程式語言，幾乎所有東西都是物件 (除了 &lt;code&gt;block&lt;/code&gt; 外)，&lt;br&gt;
很常使用 &lt;code&gt;class&lt;/code&gt; 來實現物件導向，但每次都要寫 &lt;cod
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day28 - Ruby on Rails 中串 Slack 通知</title>
    <link href="https://riverye.com/2020/10/03/Day28-Ruby-on-Rails-%E4%B8%AD%E4%B8%B2-Slack-%E9%80%9A%E7%9F%A5/"/>
    <id>https://riverye.com/2020/10/03/Day28-Ruby-on-Rails-中串-Slack-通知/</id>
    <published>2020-10-02T16:00:00.000Z</published>
    <updated>2020-10-02T16:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p><a href="https://slack.com/" target="_blank" rel="noopener">Slack</a> 是工程師常用的通訊軟體之一，能貼程式碼、分成多個頻道 (Channel) 管理等，比 Line 更適合在工作上應用，這次分享如何串 Slack 服務，並設定機器人傳送訊息</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="介紹">介紹</span></h2><p>開始前，你要先有 <a href="https://slack.com/ssb/get-started#/create" target="_blank" rel="noopener">Slack 帳號</a>，若想測試的話，可創一人 workspace ，並新增頻道 (Add channels)，以 <code>river-demo</code> 為例<br><img src="https://i.imgur.com/dTbtnyc.png" alt></p><p>這次會用到三個 Gem ，分別是</p><table><thead><tr><th>No</th><th>Name</th><th>RubyGems</th><th>GitHub</th><th>Description</th></tr></thead><tbody><tr><td>01</td><td>Slack Ruby Client</td><td><a href="https://rubygems.org/gems/slack-ruby-client" target="_blank" rel="noopener">slack-ruby-client</a></td><td><a href="https://github.com/slack-ruby/slack-ruby-client" target="_blank" rel="noopener">click me</a></td><td>可設定特定訊息傳到指定 Slack Channel ， 比第 2 個複雜些</td></tr><tr><td>02</td><td>slack-notifier</td><td><a href="https://rubygems.org/gems/slack-notifier" target="_blank" rel="noopener">slack-notifier</a></td><td><a href="https://github.com/stevenosloan/slack-notifier" target="_blank" rel="noopener">click me</a></td><td>可設定特定訊息傳到指定 Slack Channel ， 比第 1 個簡單些，下載量比較高</td></tr><tr><td>03</td><td>Exception Notification</td><td><a href="https://rubygems.org/gems/exception_notification" target="_blank" rel="noopener">exception_notification</a></td><td><a href="https://github.com/smartinez87/exception_notification" target="_blank" rel="noopener">click me</a></td><td>Exception 時有訊息通知，支援 Slack 等</td></tr></tbody></table><p>備註: 其中 <code>slack-ruby-client</code> 與 <code>slack-notifier</code> 擇一安裝即可，那為何會介紹兩個類似的? 因為第一個已經寫完，索性都寫好惹 XD</p><h2><span id="如何安裝">如何安裝</span></h2><h3><span id="一-slack-ruby-client">一、<code>slack-ruby-client</code></span></h3><p>放在 Gemfile 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/17/commits/866ab4164f46ade870504c5e436b1510fcd7302d" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'slack-ruby-client'</span>, <span class="string">'~&gt; 0.15.1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><h4><span id="1-接著到-slack-api-網站-create-new-app">1. 接著到 Slack API 網站 </span></h4><p><img src="https://i.imgur.com/ZcUprrh.png" alt></p><h4><span id="2-選oauth-amp-permissions的bot-token-scopes並新增send-messages-as-lt你取的名稱gt要是chatwrite這個喔完成後拉到該頁面上面的tokens-for-your-workspace才能點install-app-to-workspace這個按鈕並取得一組bot-user-oauth-access-token">2. 選「OAuth &amp; Permissions」的「Bot Token Scopes」，並新增「Send messages as &lt;你取的名稱&gt;」，要是「chat:write」這個喔，完成後，拉到該頁面上面的「Tokens for Your Workspace」才能點「Install App to Workspace」這個按鈕，並取得一組「Bot User OAuth Access Token」</span></h4><p><img src="https://i.imgur.com/N8dZMdA.png" alt></p><h4><span id="3-回到-slack-app-的該頻道-channel選右上角show-channel-detailsmore中的add-apps將建立的-bot-加入至該頻道中">3. 回到 Slack App 的該頻道 (Channel)，選右上角「Show channel details」「More」中的「Add apps」將建立的 Bot 加入至該頻道中</span></h4><p><img src="https://i.imgur.com/xPpmL6y.png" alt></p><p><img src="https://i.imgur.com/TqkJGAh.png" alt></p><h4><span id="4-將取得的-slack-token-bot-user-oauth-access-token-放在專案中">4. 將取得的 Slack token (Bot User OAuth Access Token) 放在專案中</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/initializers/slack_bot.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'slack-ruby-client'</span></span><br><span class="line"></span><br><span class="line">Slack.configure <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  config.token = <span class="string">'xoxb-xxxxxx-xxxx-xxxx'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建議 token 不要直接貼在這，可放 ENV 或其他地方</span></span><br></pre></td></tr></table></figure></p><h4><span id="5-若想-tag-人的話至profilemore便可看到member-id">5. 若想 Tag 人的話，至「Profile」「More」便可看到「member ID」</span></h4><p><img src="https://i.imgur.com/SbYillD.png" alt></p><h4><span id="6-在-rails-console-測試看能否正常傳送訊息">6. 在 <code>rails console</code> 測試，看能否正常傳送訊息</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client = Slack::Web::Client.new</span><br><span class="line">client.auth_test</span><br><span class="line">client.chat_postMessage(<span class="symbol">channel:</span> <span class="string">'#river-demo'</span>, <span class="symbol">text:</span> <span class="string">'Hello World'</span>, <span class="symbol">as_user:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/sTWsULP.jpg" alt></p><h4><span id="7-確認可以傳送訊息後示範寫在-sidekiq-worker-執行可參考此-commit">7. 確認可以傳送訊息後，示範寫在 Sidekiq worker 執行，可參考此 </span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/initializers/slack_bot.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'slack-ruby-client'</span></span><br><span class="line"></span><br><span class="line">Slack.configure <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  config.token = Rails.application.secrets.slack[<span class="symbol">:slack_api_token</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/secrets.yml</span></span><br><span class="line"><span class="symbol">development:</span></span><br><span class="line">  <span class="symbol">slack:</span></span><br><span class="line">    <span class="symbol">slack_api_token:</span> <span class="string">'xoxb-xxxxxx-xxxx-xxxx'</span></span><br><span class="line">    <span class="symbol">river:</span> <span class="string">'UXXXXXX4'</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">test:</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">production:</span></span><br><span class="line">  <span class="symbol">slack:</span></span><br><span class="line">    <span class="symbol">slack_api_token:</span> <span class="string">''</span></span><br><span class="line">    <span class="symbol">river:</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/sidekiq.yml</span></span><br><span class="line">- [<span class="string">'robot'</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/worker/slack_bot_worker.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlackBotWorker</span></span></span><br><span class="line">  <span class="keyword">include</span> Sidekiq::Worker</span><br><span class="line">  sidekiq_options <span class="symbol">queue:</span> <span class="string">'robot'</span>, <span class="symbol">retry:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  DEFAULT_CHANNEL = <span class="string">'river-demo'</span></span><br><span class="line">  SLACK_ID_TABLE = &#123; <span class="symbol">river:</span> Rails.application.secrets.slack[<span class="symbol">:river</span>] &#125;.freeze</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">perform</span><span class="params">(msg, options = &#123;&#125;)</span></span></span><br><span class="line">    hostname = Socket.gethostname</span><br><span class="line">    ip_address = Socket.ip_address_list.find &#123; <span class="params">|ai|</span> ai.ipv4? &amp;&amp; !ai.ipv4_loopback? &#125;.ip_address</span><br><span class="line">    slack_bot = Slack::Web::Client.new</span><br><span class="line">    channel = options[<span class="string">'channel'</span>].presence <span class="params">||</span> DEFAULT_CHANNEL</span><br><span class="line">    names = options[<span class="string">'names'</span>].present? ? [options[<span class="string">'names'</span>]].flatten : []</span><br><span class="line">    names_tags = names.map &#123; <span class="params">|name|</span> <span class="string">"&lt;@<span class="subst">#&#123;SLACK_ID_TABLE[name.to_sym]&#125;</span>&gt;"</span> &#125;.join(<span class="string">''</span>)</span><br><span class="line">    slack_bot.chat_postMessage(</span><br><span class="line">      <span class="symbol">channel:</span> channel,</span><br><span class="line">      <span class="symbol">text:</span> <span class="string">"[<span class="subst">#&#123;hostname&#125;</span>][<span class="subst">#&#123;ip_address&#125;</span>] <span class="subst">#&#123;names_tags&#125;</span><span class="subst">#&#123;msg&#125;</span>"</span>,</span><br><span class="line">      <span class="symbol">as_user:</span> <span class="literal">true</span>,</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line"><span class="comment"># 想 Tag 人的話</span></span><br><span class="line">SlackBotWorker.perform_async(<span class="string">'Hello World'</span>, <span class="symbol">names:</span> <span class="string">'river'</span>)</span><br><span class="line"><span class="comment"># 不想 Tag 人的話</span></span><br><span class="line">SlackBotWorker.perform_async(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure></p><h4><span id="參考資料">參考資料</span></h4><p><a href="https://encr.jp/blog/posts/20200311_morning/" target="_blank" rel="noopener">lambdaからslackにメッセージ送信してみる</a></p><hr><h3><span id="二-slack-notifier">二、<code>slack-notifier</code></span></h3><p>放在 Gemfile 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/17/commits/866ab4164f46ade870504c5e436b1510fcd7302d" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'slack-notifier'</span>, <span class="string">'~&gt; 2.3'</span>, <span class="string">'&gt;= 2.3.2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><h4><span id="1-接著到-slack-api-網站-create-new-app">1. 接著到 Slack API 網站 </span></h4><p><img src="https://i.imgur.com/v5PfYuz.png" alt></p><h4><span id="2-選incoming-webhooks將activate-incoming-webhooks開啟並點add-new-webhook-to-workspace按鈕">2. 選「Incoming Webhooks」將「Activate Incoming Webhooks」開啟，並點「Add New Webhook to Workspace」按鈕</span></h4><p><img src="https://i.imgur.com/E6Usuqp.png" alt></p><h4><span id="3-選allow-謎之聲允許啦哪次不允許-xd">3. 選「Allow」 (謎之聲，允許啦，哪次不允許 XD</span></h4><p><img src="https://i.imgur.com/NuXhRdF.png" alt></p><h4><span id="4-將取得webhook-url複製在-rails-console-測試">4. 將取得「Webhook URL」複製，在 <code>rails console</code> 測試</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">notifier = Slack::Notifier.new <span class="string">"https://hooks.slack.com/services/xxxx/xxxx/xxxx"</span></span><br><span class="line">notifier.ping <span class="string">"Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 就是這麼簡單 XD</span></span><br><span class="line"><span class="comment"># 這個就不寫範例了...</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Yq0Z8je.png" alt></p><hr><h3><span id="三-exception_notification">三、<code>exception_notification</code></span></h3><p>放在 Gemfile 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/17/commits/ea9a88054fe12c74068b2a3619e366c20cdf49b9" target="_blank" rel="noopener">commit</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'exception_notification'</span>, <span class="string">'~&gt; 4.4'</span>, <span class="string">'&gt;= 4.4.3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>將剛才取得的 Slack Webhook URL 放在 <code>exception_notification.rb</code> ，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/17/commits/00d8e261fe2b287d80a0fedccce325ad33f4ed92" target="_blank" rel="noopener">commit</a></p><p>備註: 也可將 Webhook URL 放別的地方<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/initializers/exception_notification.rb</span></span><br><span class="line">Rails.application.config.middleware.use ExceptionNotification::Rack, <span class="symbol">slack:</span> &#123;</span><br><span class="line">  <span class="symbol">webhook_url:</span> <span class="string">'https://hooks.slack.com/services/xxx/xxx'</span>,</span><br><span class="line">  <span class="symbol">channel:</span> <span class="string">'river-demo'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可直接將 Rails.application.secrets.slack[:webhook_url] 換成 Webhook URL</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/n0fgllv.png" alt></p><hr><h2><span id="小結">小結</span></h2><p>想省事的話，可直接用 <code>slack-notifier</code> 這個 Gem 即可，步驟簡單，再寫一個 worker 處理即可，有了 <code>exception_notification</code> 後，發生預期外的錯誤訊息時，Slack 會即時通知，也能增加 Email 通知 (可至官方 GitHub 看文件，蠻簡單的)，三個 Gem 的使用皆是看文件寫出來的，記得，別把 Token 或密碼暴露在公開場合，包括不要 push 到 GitHub 或 GitLab 上...</p><p>鐵人賽這系列文章接近尾聲，有幫助到你的地方，可在底下留言，有任何錯誤也歡迎指正，我會很感激的!!</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10247920" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10247920</a><br>medium 文章連結：<a href="https://link.medium.com/tYwlNOicgab" target="_blank" rel="noopener">https://link.medium.com/tYwlNOicgab</a><br>本文同步發布於 <a href="https://riverye.com/2020/10/03/Day28-Ruby-on-Rails-%E4%B8%AD%E4%B8%B2-Slack-%E9%80%9A%E7%9F%A5/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://slack.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Slack&lt;/a&gt; 是工程師常用的通訊軟體之一，能貼程式碼、分成多個頻道 (Channe
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day27 - Ruby on Rails 中使用 Foreman 打包所有要啟動的 server</title>
    <link href="https://riverye.com/2020/10/02/Day27-Ruby-on-Rails-%E4%B8%AD%E4%BD%BF%E7%94%A8-Foreman-%E6%89%93%E5%8C%85%E6%89%80%E6%9C%89%E8%A6%81%E5%95%9F%E5%8B%95%E7%9A%84-server/"/>
    <id>https://riverye.com/2020/10/02/Day27-Ruby-on-Rails-中使用-Foreman-打包所有要啟動的-server/</id>
    <published>2020-10-01T16:00:00.000Z</published>
    <updated>2020-10-01T16:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>從原本啟動 Rails server 、 Webpacker 外，後續增加了 <a href="https://ithelp.ithome.com.tw/articles/10245939" target="_blank" rel="noopener">Resque</a>、<a href="https://ithelp.ithome.com.tw/articles/10246607" target="_blank" rel="noopener">Sidekiq</a> ，變成要開四個視窗啟動，有時還會忘記要開其中一個...</p><p>這時可透過領班 (<a href="https://github.com/ddollar/foreman" target="_blank" rel="noopener">foreman</a>) 解決此痛點，啟動一個抵全部 :-)</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="如何安裝">如何安裝</span></h2><p>放在 <code>:development</code> 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/16/commits/88c45325076ce0043daa536653061b37f44ba66e" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'foreman'</span>, <span class="string">'~&gt; 0.87.2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>接著在專案的目錄新增 <code>Procfile</code> 檔案，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/16/commits/5c8e74823b4cd3d8133e83878cc15625c0a5cb30" target="_blank" rel="noopener">commit</a></p><p>備註: 前面 <code>web</code>、<code>webpack</code>、<code>resque</code>、<code>sidekiq</code> 名稱可自取<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Procfile</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">web:</span> ./bin/rails s -p <span class="number">3000</span></span><br><span class="line"><span class="symbol">webpack:</span> ./bin/webpack-dev-server</span><br><span class="line"><span class="symbol">resque:</span> QUEUE=* INTERVAL=<span class="number">1</span> rake <span class="symbol">resque:</span>work</span><br><span class="line"><span class="symbol">sidekiq:</span> bundle exec sidekiq</span><br></pre></td></tr></table></figure></p><h2><span id="如何執行">如何執行</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">foreman start</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">foreman s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只執行指定 PROCESS</span></span><br><span class="line">foreman start [PROCESS]</span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">foreman start web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 檔名不想取 Procfile，需指定檔案才能執行</span></span><br><span class="line">foreman start -f file</span><br><span class="line"><span class="comment"># 範例 (檔名為 hello)</span></span><br><span class="line">foreman start -f hello</span><br></pre></td></tr></table></figure></p><h3><span id="增加-foreman-前需開-4-個視窗啟動">增加 Foreman 前，需開 4 個視窗啟動</span></h3><p><img src="https://i.imgur.com/gaZl8D7.jpg" alt></p><h3><span id="增加-foreman-後只需啟動-foreman-start">增加 Foreman 後，只需啟動 <code>foreman start</code></span></h3><p><img src="https://i.imgur.com/pJvRZt7.jpg" alt></p><h2><span id="更多指令">更多指令</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">foreman -h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  foreman check                   <span class="comment"># Validate your application's Procfile</span></span><br><span class="line">  foreman <span class="built_in">export</span> FORMAT LOCATION  <span class="comment"># Export the application to another process management format</span></span><br><span class="line">  foreman <span class="built_in">help</span> [COMMAND]          <span class="comment"># Describe available commands or one specific command</span></span><br><span class="line">  foreman run COMMAND [ARGS...]   <span class="comment"># Run a command using your application's environment</span></span><br><span class="line">  foreman start [PROCESS]         <span class="comment"># Start the application (or a specific PROCESS)</span></span><br><span class="line">  foreman version                 <span class="comment"># Display Foreman gem version</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, [--procfile=PROCFILE]  <span class="comment"># Default: Procfile</span></span><br><span class="line">  -d, [--root=ROOT]          <span class="comment"># Default: Procfile directory</span></span><br></pre></td></tr></table></figure></p><h2><span id="小結">小結</span></h2><p>Foreman 是蠻好用的工具，當有多個要啟動時，挺有感的，且突然忘記某個啟動指令怎輸入的話，還能看下 <code>Procfile</code> 檔案</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10247491" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10247491</a><br>medium 文章連結：<a href="https://link.medium.com/bWT6dLpueab" target="_blank" rel="noopener">https://link.medium.com/bWT6dLpueab</a><br>本文同步發布於 <a href="https://riverye.com/2020/10/02/Day27-Ruby-on-Rails-%E4%B8%AD%E4%BD%BF%E7%94%A8-Foreman-%E6%89%93%E5%8C%85%E6%89%80%E6%9C%89%E8%A6%81%E5%95%9F%E5%8B%95%E7%9A%84-server/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;從原本啟動 Rails server 、 Webpacker 外，後續增加了 &lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10245939&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day26 - Ruby on Rails 中使用 FFmpeg 處理影音轉檔、合併、上字幕</title>
    <link href="https://riverye.com/2020/10/01/Day26-Ruby-on-Rails-%E4%B8%AD%E4%BD%BF%E7%94%A8-FFmpeg-%E8%99%95%E7%90%86%E5%BD%B1%E9%9F%B3%E8%BD%89%E6%AA%94%E3%80%81%E5%90%88%E4%BD%B5%E3%80%81%E4%B8%8A%E5%AD%97%E5%B9%95/"/>
    <id>https://riverye.com/2020/10/01/Day26-Ruby-on-Rails-中使用-FFmpeg-處理影音轉檔、合併、上字幕/</id>
    <published>2020-09-30T16:00:00.000Z</published>
    <updated>2020-10-01T07:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><blockquote><p><a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 是一個開放原始碼的自由軟體，可以執行音訊和視訊多種格式的錄影、轉檔、串流功能，包含了libavcodec——這是一個用於多個專案中音訊和視訊的解碼器函式庫，以及libavformat——一個音訊與視訊格式轉換函式庫。 「FFmpeg」這個單詞中的「FF」指的是「Fast Forward」。</p></blockquote><p>以上擷取自 <a href="https://zh.wikipedia.org/zh-tw/FFmpeg" target="_blank" rel="noopener">Wiki</a> 介紹</p><p>前陣子在處理影片時，以 Ruby on Rails 實作，將多個影片合併、剪輯指定時間範圍 (ex: 影片長度 00:30 ，只保留 00:05 ~ 00:15 的畫面)、上字幕、合併成一個檔案，透過 FFmpeg 來處理</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><h4><span id="備註-本文以此影片為例-digital-countdown-timer-出處-videvo">備註: 本文以此影片為例  (出處: )</span></h4><h2><span id="如何安裝">如何安裝</span></h2><p>雖然在 <a href="https://rubygems.org/" target="_blank" rel="noopener">RubyGems</a> 中搜尋「<a href="https://rubygems.org/search?utf8=%E2%9C%93&amp;query=ffmpeg" target="_blank" rel="noopener">FFmpeg</a>」能找到一些 Gem 使用，但這次不透過 Gem ，直接在 MacOS / Linux 環境直接安裝 FFmpeg 使用，在終端機輸入</p><p>備註: 此文以 <code>ffmpeg version 4.3.1</code> 版本為範例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install ffmpeg</span><br><span class="line"></span><br><span class="line"><span class="comment"># note: 安裝完成後，輸入 ffmpeg -v 確認版本及是否安裝成功</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何轉檔">如何轉檔</span></h2><p>終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input_video.mkv -codec copy output_video.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例:</span></span><br><span class="line">ffmpeg -i DigitalCountdownTimerVidevo.mov -codec copy test.mp4</span><br></pre></td></tr></table></figure></p><h2><span id="如何合併">如何合併</span></h2><p>例如想把多支影片合併，將 <a href="https://www.videvo.net/video/milky-way-timelapse/2659/" target="_blank" rel="noopener">Milky Way Timelapse</a> 、 <a href="https://www.videvo.net/video/digital-countdown-timer/1325/" target="_blank" rel="noopener">Digital Countdown Timer</a> 合併，可用以下方法，或參考 <a href="https://stackoverflow.com/questions/7333232/how-to-concatenate-two-mp4-files-using-ffmpeg" target="_blank" rel="noopener">Stack Overflow</a> 這篇<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 檔案名稱不要有空格 (檔案路徑要是正確的喔)</span></span><br><span class="line"><span class="comment"># list.txt</span></span><br><span class="line">file Saint_Barthelemy.mov</span><br><span class="line">file DigitalCountdownTimerVidevo.mov</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line">ffmpeg -f concat -i list.txt -c copy output.mp4</span><br></pre></td></tr></table></figure></p><h2><span id="如何剪輯指定時間範圍">如何剪輯指定時間範圍</span></h2><p>需特別留意計算方式是從 <code>mm:ss</code> (格式為 00:04 ，4 碼) 開始，接著計算保留的「長度」，不是直接寫該影片想結束的位置喔<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss mm:ss -to mm2:ss2 -i video.mp4 -codec copy output.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line"><span class="comment"># 從該影片 00:03 秒開始，保留長度為 5 秒 (至該影片 00:08 秒位置，不能直接寫 00:08 喔)</span></span><br><span class="line">ffmpeg -ss 00:03 -t 00:05 -i DigitalCountdownTimerVidevo.mov output.mp4</span><br></pre></td></tr></table></figure></p><h2><span id="如何上字幕">如何上字幕</span></h2><p><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E5%B9%95%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">字幕格式</a>有多種，常見有 SRT、SSA、ASS、SUB、TTS、WebVTT...等，單純上字幕不加任何效果，可用 SRT，若想要調整字形、字體大小、顏色、位置...等比較進階處理的話，可考慮直接用 ASS</p><p>備註: 以 <code>ffmpeg version 4.3.1</code> 為例，原生不支援 WebVTT<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># srt.srt</span></span><br><span class="line">1</span><br><span class="line">00:00:00,000 --&gt; 00:00:05,000</span><br><span class="line">Hello World</span><br><span class="line">2</span><br><span class="line">00:00:05,000 --&gt; 00:00:10,000</span><br><span class="line">看得到</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 將字幕嵌入影片中</span></span><br><span class="line">ffmpeg -i DigitalCountdownTimerVidevo.mov -vf <span class="string">'subtitles=srt.srt'</span> output.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字幕大小</span></span><br><span class="line">ffmpeg -i DigitalCountdownTimerVidevo.mov -vf <span class="string">"subtitles=srt.srt:force_style='Fontsize=32'"</span> output.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 備註: 針對字幕要做比較多處理的話，建議直接用 ASS 先調好，再嵌入比較方便</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何限制-cpu-使用量-非必要">如何限制 CPU 使用量 (非必要)</span></h2><p><a href="https://ithelp.ithome.com.tw/articles/10236845" target="_blank" rel="noopener">Linux 文章系列</a>，有提到 nice 與 cpulimit 指令，若想限制 CPU 使用量的話，可結合使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 說明: CPU 上限為 30% ，且使用雙核心處理 (threads 2)</span></span><br><span class="line">nice -n 20 cpulimit -l 30 ffmpeg -threads 2 -i DigitalCountdownTimerVidevo.mov output.mp4</span><br></pre></td></tr></table></figure></p><h4><span id="實際轉檔過程htop-畫面">實際轉檔過程，<code>htop</code> 畫面</span></h4><p><img src="https://i.imgur.com/kLcJzYo.png" alt></p><h2><span id="實作範例">實作範例</span></h2><p>上面都是在終端機操作，以下示範在 Sidekiq 上使用 FFmpeg 處理，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/15/commits/74e18ae7eb6c111923a25dd4cd8b94ff5909683f" target="_blank" rel="noopener">commit</a></p><p>備註:</p><ol><li>該範例為先下載影片、並限制 CPU 使用量在 80%</li><li>若想測試，可在 <code>rails console</code> 輸入 <code>Video::HandleVideoWorker.new.perform</code> 或先 <code>cd Video::HandleVideoWorker.new</code> 再接著輸入 <code>perform</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/sidekiq.yml</span></span><br><span class="line">- [<span class="string">'video_worker'</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/worker/video/handle_video_worker.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Video</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HandleVideoWorker</span></span></span><br><span class="line">    <span class="keyword">include</span> Sidekiq::Worker</span><br><span class="line">    sidekiq_options <span class="symbol">retry:</span> <span class="number">0</span>, <span class="symbol">dead:</span> <span class="literal">true</span>, <span class="symbol">queue:</span> <span class="string">'video_worker'</span></span><br><span class="line"></span><br><span class="line">    VIDEO_PATH = Rails.root.join(<span class="string">'data/attachments/videos'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">NOTE:</span></span></span><br><span class="line">    <span class="comment"># need install ffmpeg, url: https://github.com/FFmpeg/FFmpeg</span></span><br><span class="line">    <span class="comment"># need install cpulimit, url: https://github.com/opsengine/cpulimit</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform</span><span class="params">(url = <span class="literal">nil</span>)</span></span></span><br><span class="line">      <span class="comment"># 以此影片為範例，出處: Videvo</span></span><br><span class="line">      url = <span class="string">'https://cdn.videvo.net/videvo_files/video/free/2013-05/originalContent/DigitalCountdownTimerVidevo.mov'</span></span><br><span class="line">      video_name = parse_video_name(url)</span><br><span class="line">      video_file_path(video_name)</span><br><span class="line">      download_video(url)</span><br><span class="line">      converter</span><br><span class="line">    <span class="keyword">rescue</span> StandardError =&gt; e</span><br><span class="line">      logger.error <span class="string">"[Video::HandleVideoWorker] ERROR:\n <span class="subst">#&#123;e.inspect&#125;</span>\n <span class="subst">#&#123;e.backtrace&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    private</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logger</span></span></span><br><span class="line">      FileLog.logger(<span class="string">'worker/video/video_worker.log'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_video_name</span><span class="params">(url)</span></span></span><br><span class="line">      url.split(<span class="string">'/'</span>)[-<span class="number">1</span>] <span class="comment"># "DigitalCountdownTimerVidevo.mov"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">video_file_path</span><span class="params">(video_name)</span></span></span><br><span class="line">      @input_file = VIDEO_PATH.join(video_name)</span><br><span class="line">      mp4_format = video_name.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.mp4'</span></span><br><span class="line">      @output_file = VIDEO_PATH.join(<span class="string">"converted-<span class="subst">#&#123;mp4_format&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_video</span><span class="params">(url)</span></span></span><br><span class="line">      resp = HTTP.get(url)</span><br><span class="line">      save_origin_video(resp)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_origin_video</span><span class="params">(video_response)</span></span></span><br><span class="line">      FileUtils.mkdir_p(VIDEO_PATH)</span><br><span class="line">      File.write(@input_file, video_response.to_s.force_encoding(<span class="string">'UTF-8'</span>))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">converter</span></span></span><br><span class="line">      priority = <span class="string">'nice -n 20 cpulimit -l 80'</span> <span class="comment"># cpulimit: 限制 CPU usage (目前上限設 80%)</span></span><br><span class="line">      ffmpeg_threads = <span class="string">'ffmpeg -threads 2'</span>   <span class="comment"># ffmpeg -threads: 設定 CPU 核心數 (目前設定 2)</span></span><br><span class="line">      <span class="string">`<span class="subst">#&#123;priority&#125;</span> -i <span class="subst">#&#123;ffmpeg_threads&#125;</span> -i <span class="subst">#&#123;@input_file&#125;</span> <span class="subst">#&#123;@output_file&#125;</span>`</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol><h4><span id="指令範例-tldr">指令範例 (tldr)</span></h4><p><a href="https://ithelp.ithome.com.tw/articles/10237413" target="_blank" rel="noopener">在 Linux 文章系列</a>，有提到 <code>tldr</code> ，非常實用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">tldr ffmpeg</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line">ffmpeg</span><br><span class="line"></span><br><span class="line">Video conversion tool.</span><br><span class="line">More information: &lt;https://ffmpeg.org&gt;.</span><br><span class="line"></span><br><span class="line">- Extract the sound from a video and save it as MP3:</span><br><span class="line">    ffmpeg -i video.mp4 -vn sound.mp3</span><br><span class="line"></span><br><span class="line">- Convert frames from a video or GIF into individual numbered images:</span><br><span class="line">    ffmpeg -i video.mpg|video.gif frame_%d.png</span><br><span class="line"></span><br><span class="line">- Combine numbered images (frame_1.jpg, frame_2.jpg, etc) into a video or GIF:</span><br><span class="line">    ffmpeg -i frame_%d.jpg -f image2 video.mpg|video.gif</span><br><span class="line"></span><br><span class="line">- Quickly extract a single frame from a video at time mm:ss and save it as a 128x128 resolution image:</span><br><span class="line">    ffmpeg -ss mm:ss -i video.mp4 -frames 1 -s 128x128 -f image2 image.png</span><br><span class="line"></span><br><span class="line">- Trim a video from a given start time mm:ss to an end time mm2:ss2 (omit the -to flag to trim till the end):</span><br><span class="line">    ffmpeg -ss mm:ss -to mm2:ss2 -i video.mp4 -codec copy output.mp4</span><br><span class="line"></span><br><span class="line">- Convert AVI video to MP4. AAC Audio @ 128kbit, h264 Video @ CRF 23:</span><br><span class="line">    ffmpeg -i input_video.avi -codec:audio aac -b:audio 128k -codec:video libx264 -crf 23 output_video.mp4</span><br><span class="line"></span><br><span class="line">- Remux MKV video to MP4 without re-encoding audio or video streams:</span><br><span class="line">    ffmpeg -i input_video.mkv -codec copy output_video.mp4</span><br><span class="line"></span><br><span class="line">- Convert MP4 video to VP9 codec. For the best quality, use a CRF value (recommended range 15-35) and -b:video MUST be 0:</span><br><span class="line">    ffmpeg -i input_video.mp4 -codec:video libvpx-vp9 -crf 30 -b:video 0 -codec:audio libopus -vbr on -threads number_of_threads output_video.webm</span><br></pre></td></tr></table></figure></p><h4><span id="更多指令">更多指令</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ffmpeg version 4.3.1 Copyright (c) 2000-2020 the FFmpeg developers</span><br><span class="line">  built with Apple clang version 11.0.3 (clang-1103.0.32.62)</span><br><span class="line">  configuration: --prefix=/usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.3.1 --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-pthreads --<span class="built_in">enable</span>-version3 --<span class="built_in">enable</span>-avresample --cc=clang --host-cflags= --host-ldflags= --<span class="built_in">enable</span>-ffplay --<span class="built_in">enable</span>-gnutls --<span class="built_in">enable</span>-gpl --<span class="built_in">enable</span>-libaom --<span class="built_in">enable</span>-libbluray --<span class="built_in">enable</span>-libdav1d --<span class="built_in">enable</span>-libmp3lame --<span class="built_in">enable</span>-libopus --<span class="built_in">enable</span>-librav1e --<span class="built_in">enable</span>-librubberband --<span class="built_in">enable</span>-libsnappy --<span class="built_in">enable</span>-libsrt --<span class="built_in">enable</span>-libtesseract --<span class="built_in">enable</span>-libtheora --<span class="built_in">enable</span>-libvidstab --<span class="built_in">enable</span>-libvorbis --<span class="built_in">enable</span>-libvpx --<span class="built_in">enable</span>-libwebp --<span class="built_in">enable</span>-libx264 --<span class="built_in">enable</span>-libx265 --<span class="built_in">enable</span>-libxml2 --<span class="built_in">enable</span>-libxvid --<span class="built_in">enable</span>-lzma --<span class="built_in">enable</span>-libfontconfig --<span class="built_in">enable</span>-libfreetype --<span class="built_in">enable</span>-frei0r --<span class="built_in">enable</span>-libass --<span class="built_in">enable</span>-libopencore-amrnb --<span class="built_in">enable</span>-libopencore-amrwb --<span class="built_in">enable</span>-libopenjpeg --<span class="built_in">enable</span>-librtmp --<span class="built_in">enable</span>-libspeex --<span class="built_in">enable</span>-libsoxr --<span class="built_in">enable</span>-videotoolbox --<span class="built_in">disable</span>-libjack --<span class="built_in">disable</span>-indev=jack</span><br><span class="line">  libavutil      56. 51.100 / 56. 51.100</span><br><span class="line">  libavcodec     58. 91.100 / 58. 91.100</span><br><span class="line">  libavformat    58. 45.100 / 58. 45.100</span><br><span class="line">  libavdevice    58. 10.100 / 58. 10.100</span><br><span class="line">  libavfilter     7. 85.100 /  7. 85.100</span><br><span class="line">  libavresample   4.  0.  0 /  4.  0.  0</span><br><span class="line">  libswscale      5.  7.100 /  5.  7.100</span><br><span class="line">  libswresample   3.  7.100 /  3.  7.100</span><br><span class="line">  libpostproc    55.  7.100 / 55.  7.100</span><br><span class="line">Hyper fast Audio and Video encoder</span><br><span class="line">usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...</span><br><span class="line"></span><br><span class="line">Getting <span class="built_in">help</span>:</span><br><span class="line">    -h      -- <span class="built_in">print</span> basic options</span><br><span class="line">    -h long -- <span class="built_in">print</span> more options</span><br><span class="line">    -h full -- <span class="built_in">print</span> all options (including all format and codec specific options, very long)</span><br><span class="line">    -h <span class="built_in">type</span>=name -- <span class="built_in">print</span> all options <span class="keyword">for</span> the named decoder/encoder/demuxer/muxer/filter/bsf/protocol</span><br><span class="line">    See man ffmpeg <span class="keyword">for</span> detailed description of the options.</span><br><span class="line"></span><br><span class="line">Print <span class="built_in">help</span> / information / capabilities:</span><br><span class="line">-L                  show license</span><br><span class="line">-h topic            show <span class="built_in">help</span></span><br><span class="line">-? topic            show <span class="built_in">help</span></span><br><span class="line">-<span class="built_in">help</span> topic         show <span class="built_in">help</span></span><br><span class="line">--<span class="built_in">help</span> topic        show <span class="built_in">help</span></span><br><span class="line">-version            show version</span><br><span class="line">-buildconf          show build configuration</span><br><span class="line">-formats            show available formats</span><br><span class="line">-muxers             show available muxers</span><br><span class="line">-demuxers           show available demuxers</span><br><span class="line">-devices            show available devices</span><br><span class="line">-codecs             show available codecs</span><br><span class="line">-decoders           show available decoders</span><br><span class="line">-encoders           show available encoders</span><br><span class="line">-bsfs               show available bit stream filters</span><br><span class="line">-protocols          show available protocols</span><br><span class="line">-filters            show available filters</span><br><span class="line">-pix_fmts           show available pixel formats</span><br><span class="line">-layouts            show standard channel layouts</span><br><span class="line">-sample_fmts        show available audio sample formats</span><br><span class="line">-colors             show available color names</span><br><span class="line">-sources device     list sources of the input device</span><br><span class="line">-sinks device       list sinks of the output device</span><br><span class="line">-hwaccels           show available HW acceleration methods</span><br><span class="line"></span><br><span class="line">Global options (affect whole program instead of just one file):</span><br><span class="line">-loglevel loglevel  <span class="built_in">set</span> logging level</span><br><span class="line">-v loglevel         <span class="built_in">set</span> logging level</span><br><span class="line">-report             generate a report</span><br><span class="line">-max_alloc bytes    <span class="built_in">set</span> maximum size of a single allocated block</span><br><span class="line">-y                  overwrite output files</span><br><span class="line">-n                  never overwrite output files</span><br><span class="line">-ignore_unknown     Ignore unknown stream types</span><br><span class="line">-filter_threads     number of non-complex filter threads</span><br><span class="line">-filter_complex_threads  number of threads <span class="keyword">for</span> -filter_complex</span><br><span class="line">-stats              <span class="built_in">print</span> progress report during encoding</span><br><span class="line">-max_error_rate maximum error rate  ratio of errors (0.0: no errors, 1.0: 100% errors) above <span class="built_in">which</span> ffmpeg returns an error instead of success.</span><br><span class="line">-bits_per_raw_sample number  <span class="built_in">set</span> the number of bits per raw sample</span><br><span class="line">-vol volume         change audio volume (256=normal)</span><br><span class="line"></span><br><span class="line">Per-file main options:</span><br><span class="line">-f fmt              force format</span><br><span class="line">-c codec            codec name</span><br><span class="line">-codec codec        codec name</span><br><span class="line">-pre preset         preset name</span><br><span class="line">-map_metadata outfile[,metadata]:infile[,metadata]  <span class="built_in">set</span> metadata information of outfile from infile</span><br><span class="line">-t duration         record or transcode <span class="string">"duration"</span> seconds of audio/video</span><br><span class="line">-to time_stop       record or transcode stop time</span><br><span class="line">-fs limit_size      <span class="built_in">set</span> the <span class="built_in">limit</span> file size <span class="keyword">in</span> bytes</span><br><span class="line">-ss time_off        <span class="built_in">set</span> the start time offset</span><br><span class="line">-sseof time_off     <span class="built_in">set</span> the start time offset relative to EOF</span><br><span class="line">-seek_timestamp     <span class="built_in">enable</span>/<span class="built_in">disable</span> seeking by timestamp with -ss</span><br><span class="line">-timestamp time     <span class="built_in">set</span> the recording timestamp (<span class="string">'now'</span> to <span class="built_in">set</span> the current time)</span><br><span class="line">-metadata string=string  add metadata</span><br><span class="line">-program title=string:st=number...  add program with specified streams</span><br><span class="line">-target <span class="built_in">type</span>        specify target file <span class="built_in">type</span> (<span class="string">"vcd"</span>, <span class="string">"svcd"</span>, <span class="string">"dvd"</span>, <span class="string">"dv"</span> or <span class="string">"dv50"</span> with optional prefixes <span class="string">"pal-"</span>, <span class="string">"ntsc-"</span> or <span class="string">"film-"</span>)</span><br><span class="line">-apad               audio pad</span><br><span class="line">-frames number      <span class="built_in">set</span> the number of frames to output</span><br><span class="line">-filter filter_graph  <span class="built_in">set</span> stream filtergraph</span><br><span class="line">-filter_script filename  <span class="built_in">read</span> stream filtergraph description from a file</span><br><span class="line">-reinit_filter      reinit filtergraph on input parameter changes</span><br><span class="line">-discard            discard</span><br><span class="line">-disposition        disposition</span><br><span class="line"></span><br><span class="line">Video options:</span><br><span class="line">-vframes number     <span class="built_in">set</span> the number of video frames to output</span><br><span class="line">-r rate             <span class="built_in">set</span> frame rate (Hz value, fraction or abbreviation)</span><br><span class="line">-s size             <span class="built_in">set</span> frame size (WxH or abbreviation)</span><br><span class="line">-aspect aspect      <span class="built_in">set</span> aspect ratio (4:3, 16:9 or 1.3333, 1.7777)</span><br><span class="line">-bits_per_raw_sample number  <span class="built_in">set</span> the number of bits per raw sample</span><br><span class="line">-vn                 <span class="built_in">disable</span> video</span><br><span class="line">-vcodec codec       force video codec (<span class="string">'copy'</span> to copy stream)</span><br><span class="line">-timecode hh:mm:ss[:;.]ff  <span class="built_in">set</span> initial TimeCode value.</span><br><span class="line">-pass n             select the pass number (1 to 3)</span><br><span class="line">-vf filter_graph    <span class="built_in">set</span> video filters</span><br><span class="line">-ab bitrate         audio bitrate (please use -b:a)</span><br><span class="line">-b bitrate          video bitrate (please use -b:v)</span><br><span class="line">-dn                 <span class="built_in">disable</span> data</span><br><span class="line"></span><br><span class="line">Audio options:</span><br><span class="line">-aframes number     <span class="built_in">set</span> the number of audio frames to output</span><br><span class="line">-aq quality         <span class="built_in">set</span> audio quality (codec-specific)</span><br><span class="line">-ar rate            <span class="built_in">set</span> audio sampling rate (<span class="keyword">in</span> Hz)</span><br><span class="line">-ac channels        <span class="built_in">set</span> number of audio channels</span><br><span class="line">-an                 <span class="built_in">disable</span> audio</span><br><span class="line">-acodec codec       force audio codec (<span class="string">'copy'</span> to copy stream)</span><br><span class="line">-vol volume         change audio volume (256=normal)</span><br><span class="line">-af filter_graph    <span class="built_in">set</span> audio filters</span><br><span class="line"></span><br><span class="line">Subtitle options:</span><br><span class="line">-s size             <span class="built_in">set</span> frame size (WxH or abbreviation)</span><br><span class="line">-sn                 <span class="built_in">disable</span> subtitle</span><br><span class="line">-scodec codec       force subtitle codec (<span class="string">'copy'</span> to copy stream)</span><br><span class="line">-stag fourcc/tag    force subtitle tag/fourcc</span><br><span class="line">-fix_sub_duration   fix subtitles duration</span><br><span class="line">-canvas_size size   <span class="built_in">set</span> canvas size (WxH or abbreviation)</span><br><span class="line">-spre preset        <span class="built_in">set</span> the subtitle options to the indicated preset</span><br></pre></td></tr></table></figure></p><hr><h2><span id="小結">小結</span></h2><p>會發現影像處理，其實蠻有趣的，許多參數說明都是帶過，以實用為主，若對各參數細節調整有興趣，再自行 Google，FFmpeg 相關的文章挺多的，中文的資料也不少可參考，若想在 <code>rails console</code> 中執行 Linux 指令，可使用以下三種方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] pry(main)&gt; system(<span class="string">"echo 我是小菜"</span>)</span><br><span class="line">我是小菜</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">[<span class="number">2</span>] pry(main)&gt; <span class="string">`echo 我是小菜`</span></span><br><span class="line"><span class="string">"我是小菜\n"</span></span><br><span class="line">[<span class="number">3</span>] pry(main)&gt; .echo <span class="string">'我是小菜'</span></span><br><span class="line">我是小菜</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/5bxSdQT.png" alt></p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10247454" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10247454</a><br>medium 文章連結：<a href="https://link.medium.com/Z5b8hjxVdab" target="_blank" rel="noopener">https://link.medium.com/Z5b8hjxVdab</a><br>本文同步發布於 <a href>小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://ffmpeg.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FFmpeg&lt;/a&gt; 是一個開放原始碼的自由軟體，可以執行音
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day25 - Ruby on Rails 中的 Sidekiq 的介紹與應用</title>
    <link href="https://riverye.com/2020/09/30/Day25-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Sidekiq-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://riverye.com/2020/09/30/Day25-Ruby-on-Rails-中的-Sidekiq-的介紹與應用/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-09-29T16:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>Sidekiq 是 Ruby on Rails 中蠻常用的後台任務處理系統，上篇介紹了 <a href="https://github.com/resque/resque" target="_blank" rel="noopener">Resque</a> <a href="https://rubygems.org/gems/resque" target="_blank" rel="noopener">Gem</a>，已知這 2 套 Gem 相比，Sidekiq 的效能比較好...</p><p>本身提供的 API 十分簡潔，連 Source Code 也是易於閱讀 (例如<a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/api.rb#L832" target="_blank" rel="noopener">這段</a>)，Sidekiq 分成 3 種版本 (開源、專業、企業版)，欲知差異可到<a href="https://sidekiq.org/" target="_blank" rel="noopener">官方網站往下滑</a>便能看到差異比較表，本文以 OSS (Open Source Software) 進行操作</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><h2><span id="如何安裝">如何安裝</span></h2><p>放在 Gemfile 檔案中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/14/commits/bab4a4792053fb940222518537b6787949aa3780" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'sidekiq'</span>, <span class="string">'~&gt; 6.1'</span>, <span class="string">'&gt;= 6.1.2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>加上 Web 介面，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/14/commits/bfd8065bca5c12388dfc0719677a33e5a9384189" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sidekiq/web'</span></span><br><span class="line">mount Sidekiq::Web =&gt; <span class="string">'/sidekiq'</span></span><br></pre></td></tr></table></figure></p><p>將 ActiveJob 改由 Sidekiq 處理，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/1eda4b8920175c14e81e0e189b75755544388e3c" target="_blank" rel="noopener">commit</a></p><p>備註: 預設情況下的佇列 (Queue) 的優先順序都為 <code>1</code>，下方 <code>['default', 1]</code> 和 <code>['mailers', 1]</code> 可縮寫成 <code>default</code> 和 <code>mailers</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/application.rb</span></span><br><span class="line">config.active_job.queue_adapter = <span class="symbol">:sidekiq</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/sidekiq.yml</span></span><br><span class="line"><span class="symbol">:concurrency</span>: <span class="number">10</span></span><br><span class="line"><span class="symbol">:queues</span><span class="symbol">:</span></span><br><span class="line">  - [<span class="string">'default'</span>, <span class="number">1</span>]</span><br><span class="line">  - [<span class="string">'mailers'</span>, <span class="number">1</span>]</span><br><span class="line"><span class="symbol">:timeout</span>: <span class="number">86400</span></span><br></pre></td></tr></table></figure></p><h2><span id="寫個-worker-確認能否執行">寫個 Worker 確認能否執行</span></h2><p>可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/14/commits/81befca2d386a44d9378b6a51fa17d2a5eb696ed" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line">Api::CreateOrderWorker.perform_async(@user.id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/worker/api/create_order_worker.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Api</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CreateOrderWorker</span></span></span><br><span class="line">    <span class="keyword">include</span> Sidekiq::Worker</span><br><span class="line">    sidekiq_options <span class="symbol">retry:</span> <span class="number">7</span>, <span class="symbol">dead:</span> <span class="literal">true</span>, <span class="symbol">queue:</span> <span class="string">'create_order_worker'</span></span><br><span class="line"></span><br><span class="line">    sidekiq_retry_in &#123; <span class="params">|count|</span> count + <span class="number">86_400</span> &#125;</span><br><span class="line"></span><br><span class="line">    sidekiq_retries_exhausted <span class="keyword">do</span> <span class="params">|msg, _ex|</span></span><br><span class="line">      subject = <span class="string">"[Api::CreateOrderWorker]Out of retries! <span class="subst">#&#123;msg[<span class="string">'class'</span>]&#125;</span> with <span class="subst">#&#123;msg[<span class="string">'args'</span>]&#125;</span>"</span></span><br><span class="line">      _message = <span class="string">"error: <span class="subst">#&#123;msg[<span class="string">'error_message'</span>]&#125;</span>"</span></span><br><span class="line">      FileLog.logger(<span class="string">'worker/api/create_order_worker.log'</span>).error(subject)</span><br><span class="line">      <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform</span><span class="params">(user_id)</span></span></span><br><span class="line">      logger.info <span class="string">"====== start ====== user_id: <span class="subst">#&#123;user_id&#125;</span>"</span></span><br><span class="line">      puts <span class="string">'hello world'</span></span><br><span class="line">      logger.info <span class="string">'====== done ======'</span></span><br><span class="line">    <span class="keyword">rescue</span> StandardError =&gt; e</span><br><span class="line">      logger.error <span class="string">"[Api::CreateOrderWorker] ERROR:\n <span class="subst">#&#123;e.inspect&#125;</span>\n <span class="subst">#&#123;e.backtrace&#125;</span>"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    private</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logger</span></span></span><br><span class="line">      FileLog.logger(<span class="string">'worker/api/create_order_worker.log'</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/sidekiq.yml</span></span><br><span class="line">  - [<span class="string">'create_order_worker'</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure></p><h2><span id="如何執行">如何執行</span></h2><p>終端機輸入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sidekiq</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">bundle <span class="built_in">exec</span> sidekiq</span><br></pre></td></tr></table></figure></p><h4><span id="sidekiq-啟動成功畫面">Sidekiq 啟動成功畫面</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> sidekiq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               m,</span><br><span class="line">               `<span class="variable">$b</span></span><br><span class="line">          .ss,  $$:         .,d$</span><br><span class="line">          `$<span class="variable">$P</span>,d<span class="variable">$P</span><span class="string">'    .,md$P"'</span></span><br><span class="line">           ,$$$$<span class="variable">$b</span>/md$$<span class="variable">$P</span>^<span class="string">'</span></span><br><span class="line"><span class="string">         .d$$$$$$/$$$P'</span></span><br><span class="line">         $$^<span class="string">' `"/$$$'</span>       ____  _     _      _    _</span><br><span class="line">         $:     ,$$:       / ___|(_) __| | ___| | _(_) __ _</span><br><span class="line">         `b     :$$        \___ \| |/ _` |/ _ \ |/ / |/ _` |</span><br><span class="line">                $$:         ___) | | (_| |  __/   &lt;| | (_| |</span><br><span class="line">                $$         |____/|_|\__,_|\___|_|\_\_|\__, |</span><br><span class="line">              .d$$                                       |_|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-09-27T07:58:31.874Z pid=95276 tid=1z4c INFO: Booted Rails 6.0.3.3 application <span class="keyword">in</span> development environment</span><br><span class="line">2020-09-27T07:58:31.874Z pid=95276 tid=1z4c INFO: Running <span class="keyword">in</span> ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-darwin19]</span><br><span class="line">2020-09-27T07:58:31.874Z pid=95276 tid=1z4c INFO: See LICENSE and the LGPL-3.0 <span class="keyword">for</span> licensing details.</span><br><span class="line">2020-09-27T07:58:31.874Z pid=95276 tid=1z4c INFO: Upgrade to Sidekiq Pro <span class="keyword">for</span> more features and support: https://sidekiq.org</span><br><span class="line">2020-09-27T07:58:31.874Z pid=95276 tid=1z4c INFO: Booting Sidekiq 6.1.2 with redis options &#123;&#125;</span><br><span class="line">2020-09-27T07:58:31.876Z pid=95276 tid=1z4c INFO: Starting processing, hit Ctrl-C to stop</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Yp4aEP5.png" alt></p><h4><span id="sidekiq-web-介面">Sidekiq Web 介面</span></h4><p><img src="https://i.imgur.com/8qJ5JkE.png" alt></p><h2><span id="指定時間執行-sidekiq">指定時間執行 Sidekiq</span></h2><p>需額外安裝擴充套件 <code>sidekiq-scheduler</code> <a href="https://rubygems.org/gems/sidekiq-scheduler" target="_blank" rel="noopener">Gem</a>，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/14/commits/cf71dd3c9287afb574c9113ef0747562fdcdb89b" target="_blank" rel="noopener">commit</a></p><p>備註: 可參考 <a href="https://github.com/moove-it/sidekiq-scheduler" target="_blank" rel="noopener">sidekiq-scheduler GitHub 官方文件</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'sidekiq-scheduler'</span>, <span class="string">'~&gt; 3.0'</span>, <span class="string">'&gt;= 3.0.1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>相關設定及範例如下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/14/commits/bf2cacbec70e6c56c0a11c3dbef40a2436779e29" target="_blank" rel="noopener">commit</a></p><p>備註: 對 <a href="https://zh.wikipedia.org/wiki/Cron" target="_blank" rel="noopener">Cron</a> 不熟悉的話，可看 Wiki 說明，並搭配 <a href="https://crontab.guru/" target="_blank" rel="noopener">Crontab.guru</a> 這網站使用<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/application.rb</span></span><br><span class="line">Redis.exists_returns_integer = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sidekiq-scheduler/web'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/sidekiq.yml</span></span><br><span class="line">  - [<span class="string">'scheduler'</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="symbol">:schedule</span><span class="symbol">:</span></span><br><span class="line">  <span class="symbol">CheckWorker:</span></span><br><span class="line">    <span class="symbol">cron:</span> <span class="string">'30 * * * *'</span></span><br><span class="line">    <span class="symbol">queue:</span> scheduler</span><br><span class="line">    <span class="symbol">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/worker/check_worker.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckWorker</span></span></span><br><span class="line">  <span class="keyword">include</span> Sidekiq::Worker</span><br><span class="line">  sidekiq_options <span class="symbol">retry:</span> <span class="number">0</span>, <span class="symbol">queue:</span> <span class="string">'check_worker'</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">perform</span></span></span><br><span class="line">    puts <span class="string">'At minute 30.'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 這範例是每整點的 30 分，會執行一次 CheckWorker</span></span><br></pre></td></tr></table></figure></p><h4><span id="sidekiq-recurring-jobs-畫面">Sidekiq Recurring Jobs 畫面</span></h4><p><img src="https://i.imgur.com/3XyK2tl.png" alt></p><h4><span id="更多指令">更多指令</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sidekiq -h</span><br><span class="line"></span><br><span class="line">INFO: sidekiq [options]</span><br><span class="line">  -c, --concurrency INT            processor threads to use</span><br><span class="line">  -d, --daemon                     Daemonize process</span><br><span class="line">  -e, --environment ENV            Application environment</span><br><span class="line">  -g, --tag TAG                    Process tag <span class="keyword">for</span> procline</span><br><span class="line">  -q, --queue QUEUE[,WEIGHT]       Queues to process with optional weights</span><br><span class="line">  -r, --require [PATH|DIR]         Location of Rails application with workers or file to require</span><br><span class="line">  -t, --timeout NUM                Shutdown timeout</span><br><span class="line">  -v, --verbose                    Print more verbose output</span><br><span class="line">  -C, --config PATH                path to YAML config file</span><br><span class="line">  -L, --logfile PATH               path to writable logfile</span><br><span class="line">  -P, --pidfile PATH               path to pidfile</span><br><span class="line">  -V, --version                    Print version and <span class="built_in">exit</span></span><br><span class="line">  -h, --<span class="built_in">help</span>                       Show <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="http://railscasts.com/episodes/366-sidekiq" target="_blank" rel="noopener">RailsCasts - #366 Sidekiq</a></li><li><a href="https://itw01.com/8ALH6EV.html" target="_blank" rel="noopener">在 Rails 專案中使用 Sidekiq 處理非同步任務</a></li><li><a href="https://itw01.com/VUMREOT.html" target="_blank" rel="noopener">Sidekiq 如何處理非同步任務</a></li></ol><hr><h2><span id="小結">小結</span></h2><p>Sidekiq 功能非常強大且容易上手，工作上蠻常使用，舉例來說，它的 <code>retry</code> 機制很實用，像打 API 建立訂單，若過程中發生錯誤的話，透過 <code>retry</code> 機制，能重新執行該 <code>job</code> (能設定 <code>retry</code> 上限、每次間隔時間、超過 <code>retry</code> 上限的話...)，並設定 Slack 與 Email 通知 (這部分要自己實作)，能即時知道發生異常，進而判斷要如何處理，本身的 Wiki 文件也很完整，且網路上有許多文章、影片 (ex: <a href="https://www.youtube.com/results?search_query=sidekiq" target="_blank" rel="noopener">Youtube</a> 等) 可以參考</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10246607" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10246607</a><br>medium 文章連結：<a href="https://link.medium.com/RPXFvaCabab" target="_blank" rel="noopener">https://link.medium.com/RPXFvaCabab</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/30/Day25-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Sidekiq-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Sidekiq 是 Ruby on Rails 中蠻常用的後台任務處理系統，上篇介紹了 &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day24 - Ruby on Rails 中的 Resque 的介紹與應用</title>
    <link href="https://riverye.com/2020/09/29/Day24-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Resque-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://riverye.com/2020/09/29/Day24-Ruby-on-Rails-中的-Resque-的介紹與應用/</id>
    <published>2020-09-28T16:00:00.000Z</published>
    <updated>2020-09-28T16:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><blockquote><p>Resque (pronounced like &quot;rescue&quot;) is a Redis-backed library for creating background jobs, placing those jobs on multiple queues, and processing them later.</p></blockquote><p>以上擷取自 <a href="https://github.com/resque/resque" target="_blank" rel="noopener">Resque GitHub</a> 介紹</p><p><a href="https://github.com/resque/resque" target="_blank" rel="noopener">Resque</a> 是非同步處理任務的 <a href="https://rubygems.org/gems/resque" target="_blank" rel="noopener">Gem</a>，類似的 Gem 還有 <a href="https://rubygems.org/gems/sidekiq" target="_blank" rel="noopener">Sidekiq</a>...等，以這 2 個 Gem 為例，皆是使用 Redis 儲存 Job，兩者差異會在此文比較 (Resque vs Sidekiq 比較)，下篇文章會改介紹 Sidekiq</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><h2><span id="非同步處理">非同步處理</span></h2><p>使用者在瀏覽網頁時，舉凡像是操作到寄 Email、產生 PDF、匯入/匯出 Excel...等，不會希望網頁卡在那，等 Server 處理完後，才能繼續操作 (或要重新整理等)，此時會透過「非同步處理」的方式來實作，進而讓使用者可以邊瀏覽網頁時，Server 在背後處理，等完成後，再透通知使用者...</p><h2><span id="介紹">介紹</span></h2><p>在 Resque 中，一個後台任務被抽象為由三種角色共同完成:</p><table><thead><tr><th>角色</th><th>說明</th></tr></thead><tbody><tr><td>Job    (任務)</td><td>1 個 Job 就是 1 個需要在後台完成的任務，1 個 Job 就是 1 個 Class</td></tr><tr><td>Queue  (佇列)</td><td>佇列是由 Redis 實現的，Resque 還提供了佇列管理器，可以實現將 Job 插入/取出佇列等功能</td></tr><tr><td>Worker (執行者)</td><td>當佇列中有 Job 時，Worker 取出 Job 並執行</td></tr></tbody></table><p>一個 Worker，可以處理 1 個佇列，也可以處理多個佇列，並且可以透過增加 Worker 的程序/執行緒數來加快佇列的執行速度</p><h2><span id="如何安裝">如何安裝</span></h2><p>放在 Gemfile 檔案中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/804f51b8641ac78dd23afbff65eabf9a7b02e91f" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'resque'</span>, <span class="string">'~&gt; 2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>加上 Web 介面，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/297c3b91ed27008f0e665cd8a48ba2a8c79991f6" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'resque/server'</span></span><br><span class="line">mount Resque::Server.new, <span class="symbol">at:</span> <span class="string">'/resque'</span></span><br></pre></td></tr></table></figure></p><p>Rakefile 檔案中，加入以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/1eda4b8920175c14e81e0e189b75755544388e3c" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rakefile</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'resque/tasks'</span></span><br><span class="line">task <span class="string">'resque:setup'</span> =&gt; <span class="symbol">:environment</span></span><br></pre></td></tr></table></figure></p><h2><span id="寫個-resque-確認能否執行">寫個 Resque 確認能否執行</span></h2><p>可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/82d479d0c1f2bb1024990a6775374f63e62daf68" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line">Resque.enqueue(HelloWorldWorker, @user.id, <span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># app/jobs/hello_world_worker.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldWorker</span></span></span><br><span class="line">  @queue = <span class="symbol">:hello_world_worker</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">perform</span><span class="params">(user_id, string)</span></span></span><br><span class="line">    puts <span class="string">"<span class="subst">#&#123;user_id&#125;</span> say <span class="subst">#&#123;string&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何執行">如何執行</span></h2><p>終端機輸入</p><p>備註: 更多參數說明，請看 <a href="https://github.com/resque/resque" target="_blank" rel="noopener">Resque GitHub</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUEUE=* INTERVAL=1 rake resque:work</span><br></pre></td></tr></table></figure></p><h4><span id="更多指令">更多指令</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resque -h</span><br><span class="line"></span><br><span class="line">Usage: resque [options] COMMAND</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -r, --redis [HOST:PORT]          Redis connection string</span><br><span class="line">    -N, --namespace [NAMESPACE]      Redis namespace</span><br><span class="line">    -h, --<span class="built_in">help</span>                       Show this message</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  remove WORKER   Removes a worker</span><br><span class="line">  <span class="built_in">kill</span> WORKER     Kills a worker</span><br><span class="line">  list            Lists known workers</span><br></pre></td></tr></table></figure></p><h4><span id="resque-web-介面">Resque Web 介面</span></h4><p><img src="https://i.imgur.com/MOVlxHr.png" alt></p><h2><span id="resque-vs-sidekiq-比較">Resque vs Sidekiq 比較</span></h2><p>先說結論，較新的專案，會直接使用 Sidekiq，Resque 已不在考慮中...</p><p>Resque 是在 2009 年<a href="https://github.blog/2009-11-03-introducing-resque/" target="_blank" rel="noopener">發布</a>，而 Sidekiq 則是 2012 年<a href="https://en.wikipedia.org/wiki/Sidekiq" target="_blank" rel="noopener">發布</a>，Sidekiq 更新速度、效能也比 Resque 好，連 <a href="https://github.com/mperham/sidekiq" target="_blank" rel="noopener">Sidekiq GitHub</a> 介紹都直接說我比 Resque 快，還有一頁是<a href="https://github.com/mperham/sidekiq/wiki/Testimonials" target="_blank" rel="noopener">使用者感言</a>，裡面搜尋「Resque」也能看到被比較的心得感言。</p><p>若想看細節差異，可參考 Stack Overflow 這篇 <a href="https://stackoverflow.com/questions/11580954/resque-vs-sidekiq" target="_blank" rel="noopener">Resque vs Sidekiq?</a>，另外還有找到這篇 <a href="https://dev.to/molly_struve/switching-from-resque-to-sidekiq-3b04" target="_blank" rel="noopener">Switching From Resque to Sidekiq</a>，看完便知道為何現在較少用過 (甚至沒聽過 Resque) 的原因...</p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="https://ihower.tw/rails/background-process.html" target="_blank" rel="noopener">Ruby on Rails 實戰聖經 - 非同步處理</a></li><li><a href="http://railscasts.com/episodes/271-resque" target="_blank" rel="noopener">RailsCasts - #271 Resque</a></li></ol><hr><h2><span id="小結">小結</span></h2><p>剛進入公司時，一開始對於 Redis、Resque、Sidekiq 三者之間傻傻分不清，不知彼此的關係，以及為何要同時存在 2 套背景處理的 Gem，隨工作一段時間，加上這次鐵人賽寫相關文章時，才搞懂為何會有這樣的配置，隨專案越來越大，不斷增加新功能同時，舊 code 有可能變成舊技術 (甚至技術債)，就像現在 Ruby on Rails 最新版本為 <code>6.0.3.3</code> ，幾年後，也會變成舊版本，說不定寫法會大改也不是不無可能，更別提其他技術，也會有同樣的情況發生，端看團隊如何解決這件事，要是仍能正常運作且沒什麼問題的話，不一定要換或升到最新，除非有遇到版本相容性、或其他問題時，才會依當時情境想新的解決方案...</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10245939" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10245939</a><br>medium 文章連結：<a href="https://link.medium.com/Qz9SocIv99" target="_blank" rel="noopener">https://link.medium.com/Qz9SocIv99</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/29/Day24-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Resque-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Resque (pronounced like &amp;quot;rescue&amp;quot;) is a Redis-backed library for creating backgrou
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day23 - Ruby on Rails 中的 Redis 的介紹與應用</title>
    <link href="https://riverye.com/2020/09/28/Day23-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Redis-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://riverye.com/2020/09/28/Day23-Ruby-on-Rails-中的-Redis-的介紹與應用/</id>
    <published>2020-09-27T16:00:00.000Z</published>
    <updated>2020-09-27T16:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p><a href="https://redis.io/" target="_blank" rel="noopener">Redis</a> 是 <a href="https://zh.wikipedia.org/wiki/BSD%E6%8E%88%E6%AC%8A%E6%A2%9D%E6%AC%BE" target="_blank" rel="noopener">BSD 授權</a>的開源軟體，屬於 NoSQL 家族成員之一，是 in-memory 的 key-value 資料庫，基於資料存在記憶體的特性，其存取速度比硬碟快許多，常被應用在需要快取 (Cache) 的場合，也可使用在 Database 及簡單的 Message broker，與 Memcached 比，穩定性更好</p><p>以下擷取自 <a href="https://zh.wikipedia.org/wiki/Redis" target="_blank" rel="noopener">Wiki</a> 介紹</p><blockquote><p>Redis是一個使用ANSI C編寫的開源、支援網路、基於記憶體、可選永續性的鍵值對儲存資料庫。根據月度排行網站DB-Engines.com的資料，Redis是最流行的鍵值對儲存資料庫</p></blockquote><p>(謎之聲，有興趣想知道記憶體與硬碟的速度差異，可 <a href="https://www.google.com/search?q=ram+ssd+speed+comparison" target="_blank" rel="noopener">Google</a> 下，題外話，之前會用 RAM disk 在上面執行作業系統、軟體等，速度有感提升</p><hr><h2><span id="特色">特色</span></h2><ol><li>效能好 (與 database 比)、穩定性高 (與 Memcached 比)</li><li>資料是儲存在 Memory (記憶體)</li><li>Single Thread I/O Multiplex</li></ol><p>由於資料是儲存在 Memory 上，Memory 特性為斷電 (或關機、重開機) 會造成資料遺失，Redis 可以設定資料同步到硬碟，但如果剛好遇到同步前就斷電的話，資料就掰掰惹，或遇到 CPU、Memory 接近滿載，同時又有大量資料需要透過 Redis 處理，也可能會遇到資料遺失。</p><p>Redis 是 Single Thread，這點非常重要，不論 Server CPU Core (核心) 為幾核，1 個 Redis 只會使用到 1 個 CPU Core (核心)，無法同時運算多個 request，當有 1 個 request 佔用 CPU 太久時，會導致無法回應其他 connection request 而造成後面塞車。</p><p>(謎之聲，Redis 背後運作原理、處理機制等，網路上有許多資料可以參考，不在這一一描述</p><hr><h2><span id="如何安裝">如何安裝</span></h2><p>在終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install redis</span><br></pre></td></tr></table></figure></p><p>在 Ruby on Rails 專案的 Gemfile 加入<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'redis'</span>, <span class="string">'~&gt; 4.2'</span>, <span class="string">'&gt;= 4.2.2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 Rails 6.0.3.3 為例，預設 Gemfile 中，是註解，取消註解，再 bundle 即可</span></span><br></pre></td></tr></table></figure></p><h2><span id="常用指令介紹">常用指令介紹</span></h2><h4><span id="進入-redis-終端機-command-line-interface-畫面">進入 Redis 終端機 (Command-Line Interface) 畫面</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在終端機輸入</span></span><br><span class="line"></span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure></p><h4><span id="開啟-redis-server">開啟 redis server</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在終端機輸入</span></span><br><span class="line"></span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure></p><h4><span id="redis-性能測試">redis 性能測試</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在終端機輸入</span></span><br><span class="line"></span><br><span class="line">redis-benchmark</span><br></pre></td></tr></table></figure></p><h4><span id="查看-redis-資訊-information">查看 redis 資訊 (information)</span></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 進入 redis-cli 後，輸入</span></span><br><span class="line"></span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:6.0.8</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:25b38681eed52ae</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Darwin 19.6.0 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:kqueue</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.2.1</span><br><span class="line">process_id:1552</span><br><span class="line">run_id:1ea27ec21bc37fea806bb2ccf213132176f</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:15272</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:7122746</span><br><span class="line">executable:/usr/<span class="built_in">local</span>/opt/redis/bin/redis-server</span><br><span class="line">config_file:/usr/<span class="built_in">local</span>/etc/redis.conf</span><br><span class="line">io_threads_active:0</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4><span id="設定-redis-相關參數配置">設定 Redis 相關參數(配置)</span></h4><p>從 <code>info</code> 的 <code>config_file</code> 這欄，可看到 <code>redis.conf</code> 檔案路徑，該檔案內的註解很詳細，Google 下也有相關參數設定說明可參考</p><h3><span id="set-get">SET, GET</span></h3><p><code>SET</code> 設定 key-value</p><p><code>GET</code> 從 key 取 value<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET river <span class="string">'hi'</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET river</span><br><span class="line"><span class="string">"hi"</span></span><br></pre></td></tr></table></figure></p><h3><span id="hset-hget">HSET, HGET</span></h3><p><code>HSET</code> 設定 hash key-value</p><p><code>HGET</code> 取 hash key 的 value<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET order1 name <span class="string">'order_name'</span> price 500 note <span class="string">'nothing'</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; HGET order1 note</span><br><span class="line"><span class="string">"nothing"</span></span><br><span class="line">127.0.0.1:6379&gt; HGET order1 price</span><br><span class="line"><span class="string">"500"</span></span><br></pre></td></tr></table></figure></p><h3><span id="incr-decr">INCR, DECR</span></h3><p>針對指定 key 的 value 進行數字加減</p><p><code>INCR</code> 針對 key 的 value +1</p><p><code>DECR</code> 針對 key 的 value -1</p><p>備註: 若 value 型別不是數字，會回 <code>(error) WRONGTYPE Operation against a key holding the wrong kind of value</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET num <span class="string">'4'</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECR num</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; INCR num</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure></p><p>更多指令請參考<a href="https://redis.io/commands" target="_blank" rel="noopener">官方commands</a> (文件有針對每個指令提供範本與說明)</p><h2><span id="操作範例">操作範例</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入，進入 Redis Command-Line Interface</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ping                             <span class="comment"># 測試連線是否正常，回傳 PONG 代表正常</span></span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> river <span class="string">'https://riverye.com/'</span> <span class="comment"># 設定 key 是 "river", value 是 "https://riverye.com/"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get river                        <span class="comment"># 讀取 key "river"</span></span><br><span class="line"><span class="string">"https://riverye.com/"</span></span><br><span class="line">127.0.0.1:6379&gt; del river                        <span class="comment"># 刪除 key "river"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get river</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> say hi EX 5                  <span class="comment"># 設定 key "set" 存在 5 秒, EX 為設定期限 (單位是秒)</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get say                          <span class="comment"># 上面設定好，在 5 秒內查詢</span></span><br><span class="line"><span class="string">"hi"</span></span><br><span class="line">127.0.0.1:6379&gt; get say                          <span class="comment"># 5 秒後，讀取 key "say" ，會變 nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; hmset order name <span class="string">'order_name'</span> price 999 note <span class="string">'不知寫什麼'</span> <span class="comment"># 設定 雜湊表 "order"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall order <span class="comment"># 讀取 雜湊表 "order"</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"order_name"</span></span><br><span class="line">3) <span class="string">"price"</span></span><br><span class="line">4) <span class="string">"999"</span></span><br><span class="line">5) <span class="string">"note"</span></span><br><span class="line">6) <span class="string">"\xe4\xb8\x8d\xe7\x9f\xa5\xe5\xaf\xab\xe4\xbb\x80\xe9\xba\xbc"</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p><p>在 <code>rails console</code> 操作 Redis<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入</span></span><br><span class="line">rails c</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line">r = Redis.new</span><br><span class="line">r.hgetall(<span class="string">"order"</span>)</span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#      "name" =&gt; "order_name",</span></span><br><span class="line"><span class="comment">#     "price" =&gt; "999",</span></span><br><span class="line"><span class="comment">#      "note" =&gt; "不知寫什麼"</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure></p><h4><span id="示範在-rails-console-操作-redis">示範在 Rails console 操作 Redis</span></h4><p><img src="https://i.imgur.com/uHfCF2N.png" alt></p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="https://www.jianshu.com/p/238372c25669" target="_blank" rel="noopener">深入分析Redis特点及应用场景</a></li><li><a href="https://jed1978.github.io/2018/05/11/Redis-Programming-CSharp-Basic-1.html" target="_blank" rel="noopener">Redis系列 - C#存取Redis (上)</a></li><li><a href="https://blog.techbridge.cc/2016/06/18/redis-introduction/" target="_blank" rel="noopener">資料庫的好夥伴：Redis</a></li><li><a href="https://www.itread01.com/content/1545424390.html" target="_blank" rel="noopener">Redis資料庫看這一篇文章就夠了</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU2ODcwMzk2MQ==&amp;mid=2247483718&amp;idx=1&amp;sn=53c686b2943460f53f189ee886d856c9" target="_blank" rel="noopener">Redis常见面试题连环问，你能回答到第几问？（上）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU2ODcwMzk2MQ==&amp;mid=2247483743&amp;idx=1&amp;sn=4f0fa3c8e755b054bbb553738419e651" target="_blank" rel="noopener">Redis常见面试题连环问，你能回答到第几问？（中）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU2ODcwMzk2MQ==&amp;mid=2247483746&amp;idx=1&amp;sn=5ce6047ef7367965b52fd46513f1dc2f" target="_blank" rel="noopener">Redis常见面试题连环问，你能回答到第几问？（下）</a></li></ol><hr><h2><span id="小結">小結</span></h2><p>會在許多場景看到 Redis 出沒，全端與後端必備技能之一，舉個例子來說，之前在處理不同頁面皆要顯示同資訊「未處理訂單數量」，是透過打 API 詢問未處理的訂單資訊，接著與 Database 比對該訂單名稱是否被建立過、訂單的商品數量與 Database 中商品庫存是否足夠...等，由 worker 處理，經過一連串處理後，才能計算出實際「未處理訂單數量」，另個頁面是儀表板頁面，只需顯示「未處理訂單數量」，這時透過 Redis 處理，將計算結果存在 Redis ，另個頁面直接取值顯示即可</p><p>上述例子為實際應用過的情境之一，若對 Redis 還不熟悉也不用太緊張，上方參考連結的文章，由淺入深的排序，可以從數字 1 開始往下看，過程中搭配實際操作練習，會更快上手喔</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10245246" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10245246</a><br>medium 文章連結：<a href="https://link.medium.com/V8n6I2TQ79" target="_blank" rel="noopener">https://link.medium.com/V8n6I2TQ79</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/28/Day23-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Redis-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis&lt;/a&gt; 是 &lt;a href=&quot;https://zh.wikipedia.org
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day22 - Ruby on Rails 中的 Race Condition</title>
    <link href="https://riverye.com/2020/09/27/Day22-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Race-Condition/"/>
    <id>https://riverye.com/2020/09/27/Day22-Ruby-on-Rails-中的-Race-Condition/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2020-09-26T16:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p><a href="https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3" target="_blank" rel="noopener">Race Condition</a> 可翻譯成「競爭條件」，在中文版 <a href="https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3" target="_blank" rel="noopener">Wiki</a> 上看不懂的話，可看英文版 <a href="https://en.wikipedia.org/wiki/Race_condition" target="_blank" rel="noopener">Wiki</a> 的描述，會比較清楚，以下為白話文翻譯:</p><blockquote><p>同筆資料同時被 2 thread 以上操作，導致結果的不正確</p></blockquote><h3><span id="常見情境可能有">常見情境可能有:</span></h3><ol><li>搶票系統、搶購限量商品時 (ex: 限量 100 張票，卻賣了 101 張)</li><li>使用者送出資料時，剛好這時 server 負載較重 (處理比較慢)，使用者以為還沒處理完成，於是在前端連點，雖然 <code>model</code> 有做 <code>validates :email, uniqueness: true</code> ，但 DB 沒再次驗證，也有可能發生此問題  (可參考: <a href="https://ihower.tw/rails/activerecord-lifecycle.html" target="_blank" rel="noopener">ActiveRecord - 資料驗證及回呼</a>)</li></ol><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="如何重現-race-condition">如何重現 Race Condition</span></h2><p>以 Ruby on Rails 為例，想看 Race Condition 本人的話</p><p>在 <code>rails console</code> 貼上以下這段 (本文以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a>)<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重現 Race Condition</span></span><br><span class="line"><span class="comment"># 一開始 Order.last.total_price = 0</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">threads = [<span class="number">100</span>, <span class="number">10</span>].map <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">  Thread.new <span class="keyword">do</span> <span class="params">|_t|</span></span><br><span class="line">    order = Order.last</span><br><span class="line">    order.total_price += n</span><br><span class="line">    order.save</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">threads.each(&amp;<span class="symbol">:join</span>)</span><br><span class="line">puts <span class="string">"預期結果是: 110, 實際結果是: <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 10</span></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 100</span></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述每次執行，實際結果會不一樣</span></span><br></pre></td></tr></table></figure></p><h4><span id="race-condition-本人-上述例子每次執行得到結果會不同">Race Condition 本人 (上述例子，每次執行，得到結果會不同)</span></h4><p><img src="https://i.imgur.com/pL0vOzN.gif" alt></p><h2><span id="如何處理">如何處理</span></h2><p>將要進行操作的 table 先鎖住 (<a href="https://en.wikipedia.org/wiki/Lock_(computer_science)" target="_blank" rel="noopener">Lock</a>)，處理方式可分成 2 種：</p><ol><li>悲觀鎖 (Pessimistic locking)</li><li>樂觀鎖 (Optimistic locking)</li></ol><h3><span id="悲觀鎖-pessimistic-locking">悲觀鎖 (Pessimistic locking)</span></h3><p>悲觀鎖，如其名，不相信任何人，一次只允許一筆資料針對 table 操作，此時會先鎖住該 table (鎖又可分成表鎖、行鎖，這邊以行鎖為例)，避免被人竄改，其他人要操作只能等他被釋放後，才能進行操作</p><p>白話文就是所有人排隊領號碼牌，叫號依序處理，能解決 Race Condition，但也會影響效能，畢竟一次只能處理一筆資料</p><p>Ruby on Rails 中，悲觀鎖，可使用 <code>with_lock</code> 處理，實作方式如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 悲觀鎖</span></span><br><span class="line"><span class="comment"># 一開始 Order.last.price = 0</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">threads = [<span class="number">100</span>, <span class="number">10</span>].map <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">  Thread.new <span class="keyword">do</span> <span class="params">|_t|</span></span><br><span class="line">    order = Order.last</span><br><span class="line">    order.with_lock <span class="keyword">do</span></span><br><span class="line">      order.total_price += n</span><br><span class="line">      order.save</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">threads.each(&amp;<span class="symbol">:join</span>)</span><br><span class="line">puts <span class="string">"預期結果是: 110, 實際結果是: <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 110</span></span><br></pre></td></tr></table></figure></p><p>上述確實解決了 Race Condition ，但變成其他人要排隊等待 (可看下方 GIF)，使用悲觀鎖需在效能與資料正確性之間做取捨，可依問題產生嚴重性、衍伸損失等進行綜合評估決定是否使用</p><h4><span id="排隊等待畫面">排隊等待畫面</span></h4><p><img src="https://i.imgur.com/gNwpDiO.gif" alt><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 悲觀鎖</span></span><br><span class="line"><span class="comment"># 示範如何鎖住 table (行鎖)</span></span><br><span class="line"><span class="comment"># console 1</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line">order = Order.last</span><br><span class="line">order.with_lock <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"total_price is <span class="subst">#&#123;order.total_price&#125;</span>"</span></span><br><span class="line">  order.total_price += <span class="number">10</span></span><br><span class="line">  byebug</span><br><span class="line">  order.save</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># console 2</span></span><br><span class="line">puts <span class="string">"total_price is <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"><span class="comment"># 行鎖: 其他 Order 不受影響</span></span><br><span class="line">Order.first.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line">Order.last.increment!(<span class="symbol">:total_price</span>)</span><br><span class="line"><span class="comment"># 此時應該會卡住，因為 console 1 with_lock 關係，需等 console 1 釋放 order 後， console 2 才能針對該筆資料進行操作</span></span><br><span class="line">puts <span class="string">"預期結果是: 11, 實際結果是: <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 11, 實際結果是: 11</span></span><br></pre></td></tr></table></figure></p><h3><span id="樂觀鎖-optimistic-locking">樂觀鎖 (Optimistic locking)</span></h3><p>與悲觀鎖意思相反，認為資料不會頻繁被操作，因此允多人針對 table 操作，不代表我就爛什麼都不管，在 Ruby on Rails 中有提供 <code>lock_version</code> 這方法，可加在想使用樂觀鎖的 table 上，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/11/commits/cd1853d168d84bc6098efd0148138911335e8e50" target="_blank" rel="noopener">commit</a></p><p>Ruby on Rail 中，樂觀鎖，可使用 <code>lock_version</code> 處理，實作方式如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 樂觀鎖</span></span><br><span class="line"><span class="comment"># 一開始 Order.last.total_price = 0</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  order1 = Order.last</span><br><span class="line">  order2 = Order.last</span><br><span class="line">  order1.total_price += <span class="number">10</span></span><br><span class="line">  order1.save</span><br><span class="line">  order2.total_price += <span class="number">100</span></span><br><span class="line">  order2.save <span class="comment"># ActiveRecord::StaleObjectError: Attempted to update a stale object: Order.</span></span><br><span class="line"><span class="keyword">rescue</span> ActiveRecord::StaleObjectError =&gt; e</span><br><span class="line">  <span class="comment"># 要自己處理異常</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts <span class="string">"預期結果是: 10, 實際結果是: <span class="subst">#&#123;Order.last.reload.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 10, 實際結果是: 10</span></span><br></pre></td></tr></table></figure></p><p>樂觀鎖好處是能同時處理多筆資料，但錯誤的話，會收到 <code>ActiveRecord::StaleObjectError</code>，要自己處理，像是可以寫個 <code>retry</code> 或報錯誤訊息，讓工程師知道</p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="https://rails.ruby.tw/active_record_querying.html#%E6%9B%B4%E6%96%B0%E6%99%82%E9%8E%96%E5%AE%9A%E8%A8%98%E9%8C%84" target="_blank" rel="noopener">Active Record 查詢 — Ruby on Rails 指南</a></li><li><a href="https://mgleon08.github.io/blog/2017/11/01/optimistic-locking-and-pessimistic-locking/" target="_blank" rel="noopener">樂觀鎖 與 悲觀鎖 Optimistic Locking &amp; Pessimistic Locking</a></li><li><a href="https://khiav223577.github.io/blog/2019/02/07/%E4%B8%8D%E4%BD%BF%E7%94%A8-lock-%E5%8F%88%E8%A6%81%E9%81%BF%E5%85%8D-race-condition%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%97%8E%EF%BC%9F/" target="_blank" rel="noopener">不使用 lock 又要避免 race condition，可能嗎？</a></li><li><a href="https://karolgalanciak.com/blog/2020/06/07/race-conditions-on-rails/" target="_blank" rel="noopener">Race Conditions on Rails</a></li><li><a href="https://blog.niclin.tw/2020/09/11/avoids-race-condition-best-practice-in-ruby-on-rails-1/" target="_blank" rel="noopener">Rails 中避免 race condition 的最佳實踐(一)</a></li><li><a href="https://blog.niclin.tw/2020/09/11/avoids-race-condition-best-practice-in-ruby-on-rails-2/" target="_blank" rel="noopener">Rails 中避免 race condition 的最佳實踐(一)</a></li></ol><hr><h2><span id="小結">小結</span></h2><p>解決 Race Condition 後，需留意是否可能衍伸另個問題，像是 Deadlock 可看 Wiki <a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%B8%E5%AE%B6%E5%B0%B1%E9%A4%90%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">哲學家就餐問題</a> 這篇，推薦看上方參考資料，可看看不同大大們對於 Race Condition 的介紹與解法</p><p>本篇特別感謝 David 、 Johnson(詹昇) 協助 (依英文字母順序排列)</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10244812" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10244812</a><br>medium 文章連結：<a href="https://link.medium.com/AUCVQnUb69" target="_blank" rel="noopener">https://link.medium.com/AUCVQnUb69</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/27/Day22-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Race-Condition/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day21 - Ruby on Rails 中常見的 N+1 與解法</title>
    <link href="https://riverye.com/2020/09/26/Day21-Ruby-on-Rails-%E4%B8%AD%E5%B8%B8%E8%A6%8B%E7%9A%84-N-1-%E8%88%87%E8%A7%A3%E6%B3%95/"/>
    <id>https://riverye.com/2020/09/26/Day21-Ruby-on-Rails-中常見的-N-1-與解法/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-25T16:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>在 Ruby on Rails 中，透過 ORM (Object Relational Mapping) 使我們可以輕易地對不同表進行操作，方便之餘，一不小心就可能會寫出 N+1</p><ol><li>到底什麼是 N+1 ?</li><li>該如何解決 ?</li></ol><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="介紹">介紹</span></h2><p>N+1 指的是 SQL 撈資料時，明明可以一次撈完 (ex: 3 筆資料)，卻使用逐筆撈資料的方式處理 (每次只撈 1 筆資料)</p><p>白話文: 使用者要在同間商店買 3 件商品，可一次採買完成，卻分成 3 次購買 <s>(除非是想收集發票</s></p><p>分 3 次購買便是 N ，而 +1 則是使用者決定要去買的那次本身</p><p>導致總共撈了 3+1 次，嚴重影響效能</p><p>直接看例子，會比較好懂，想看 N+1 本人的話，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/1d1cb51c593370441d7970d191fb90de5d36e70f" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/user.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:orders</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/models/order.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @users = User.all</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/views/users/index.html.erb:24</span></span><br><span class="line">&lt;td&gt;&lt;%= user.orders.sum(&amp;<span class="symbol">:total_price</span>) %&gt;&lt;<span class="regexp">/td&gt;o</span></span><br></pre></td></tr></table></figure></p><p>上述可以正常運作，但也造成了 N+1 的問題發生<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Order 被撈了 3 次</span></span><br><span class="line"></span><br><span class="line">User Load (0.3ms)  SELECT <span class="string">"users"</span>.* FROM <span class="string">"users"</span></span><br><span class="line">Order Load (0.2ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span>  [[<span class="string">"user_id"</span>, 1]]</span><br><span class="line">Order Load (0.2ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span>  [[<span class="string">"user_id"</span>, 2]]</span><br><span class="line">Order Load (0.3ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span>  [[<span class="string">"user_id"</span>, 3]]</span><br></pre></td></tr></table></figure></p><h4><span id="n1-本人">N+1 本人</span></h4><p><img src="https://i.imgur.com/l6z6MrX.png" alt></p><h2><span id="如何解決-n1">如何解決 N+1</span></h2><p>最簡單方法，使用 <code>includes</code>，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/75b3afab818d2752f3a484b251ac3f06cf2032e7" target="_blank" rel="noopener">commit</a></p><p>雖然每次會撈回整筆 orders 資訊 (假如我只需要 <code>order.total_price</code> 的資訊，其餘欄位皆不用的話)，會撈比較多東西回來，資料量如果不多的話，<code>includes</code> 是一種解法，資料量多時，會有不同解法 (未來有機會再另寫文章探討<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @users = User.includes(<span class="symbol">:orders</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Order 變成一次查詢完畢</span></span><br><span class="line"></span><br><span class="line">User Load (0.2ms)  SELECT <span class="string">"users"</span>.* FROM <span class="string">"users"</span></span><br><span class="line">Order Load (0.4ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> IN (<span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span>)  [[<span class="string">"user_id"</span>, 1], [<span class="string">"user_id"</span>, 2], [<span class="string">"user_id"</span>, 3]]</span><br></pre></td></tr></table></figure></p><h4><span id="用-includes-解-n1">用 <code>includes</code> 解 N+1</span></h4><p><img src="https://i.imgur.com/C93NG8q.png" alt></p><h2><span id="如何知道哪些地方有-n1">如何知道哪些地方有 N+1</span></h2><p>可使用 <a href="https://github.com/flyerhzm/bullet" target="_blank" rel="noopener">Bullet</a> 這個 <a href="https://rubygems.org/gems/bullet" target="_blank" rel="noopener">Gem</a>，並設定提醒視窗，方便知道是否有 N+1 的問題發生</p><h3><span id="安裝方式">安裝方式</span></h3><p>在 Gemfile 加入以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/d409f928747002ede108addde6c845b4da74a313" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'bullet'</span>, <span class="symbol">group:</span> <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>接著在 <code>development.rb</code> 檔案增加參數設定，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/09ca49777155f0bcadfa8449270da2ed87aa2b69" target="_blank" rel="noopener">commit</a></p><p>備註: 更多設定可至<a href="https://github.com/flyerhzm/bullet" target="_blank" rel="noopener">官方網站</a>查詢<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb</span></span><br><span class="line"></span><br><span class="line">Bullet.enable = <span class="literal">true</span></span><br><span class="line">Bullet.bullet_logger = <span class="literal">true</span></span><br><span class="line">Bullet.console = <span class="literal">true</span></span><br><span class="line">Bullet.add_footer = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接著重啟 rails server</span></span><br></pre></td></tr></table></figure></p><h4><span id="若有-n1-會有提醒視窗">若有 N+1 會有提醒視窗</span></h4><p><img src="https://i.imgur.com/H4JCQ68.png" alt></p><h2><span id="參考資料">參考資料</span></h2><p><a href="https://mgleon08.github.io/blog/2016/01/10/ruby-on-rails-include-join-avoid-n-1-query/" target="_blank" rel="noopener">Ruby on Rails - 用 Include 和 Join 避免 N+1 Query</a></p><hr><h2><span id="小結">小結</span></h2><p>造成網站效能拖慢有許多可能，N+1 只是其中一種</p><p>本篇是淺談其中的 1 種解法，寫這篇時，發現類似文章不下 5 篇以上，若想深入了解，歡迎善用 Google</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10244142" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10244142</a><br>medium 文章連結：<a href="https://link.medium.com/w4c3ApZw49" target="_blank" rel="noopener">https://link.medium.com/w4c3ApZw49</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/26/Day21-Ruby-on-Rails-%E4%B8%AD%E5%B8%B8%E8%A6%8B%E7%9A%84-N-1-%E8%88%87%E8%A7%A3%E6%B3%95/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在 Ruby on Rails 中，透過 ORM (Object Relational Mapping) 使我們可以輕易地對不同表進行操作，方便之餘，一不小心就可能會寫出 N+1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day20 - Ruby on Rails 測試篇 - Cucumber (內文有範例教如何寫中文測試)</title>
    <link href="https://riverye.com/2020/09/25/Day20-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-Cucumber-%E5%85%A7%E6%96%87%E6%9C%89%E7%AF%84%E4%BE%8B%E6%95%99%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6/"/>
    <id>https://riverye.com/2020/09/25/Day20-Ruby-on-Rails-測試篇-Cucumber-內文有範例教如何寫中文測試/</id>
    <published>2020-09-24T16:00:00.000Z</published>
    <updated>2020-09-24T16:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>前一篇介紹了 <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">RSpec</a> <a href="https://rubygems.org/gems/rspec-rails" target="_blank" rel="noopener">Gem</a>，這次換介紹 <a href="https://github.com/cucumber/cucumber-ruby" target="_blank" rel="noopener">Cucumber</a> 這個 <a href="https://rubygems.org/gems/cucumber-rails" target="_blank" rel="noopener">Gem</a></p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="介紹">介紹</span></h2><h4><span id="q1-心中或許會有疑問說已經有-rspec-為何還需要-cucumber-增加測試的複雜度">Q1. 心中或許會有疑問說，已經有 RSpec 為何還需要 Cucumber 增加測試的複雜度?</span></h4><p>Cucumber 更像是讓人類看得懂的語言，來描述要測試的事情，且支援多種語系寫法，像是可以用中文寫測試，讓 PM 與客戶看得懂，也能成為將來驗收的依據</p><h4><span id="q2-可以只寫-cucumber-不寫-rspec-嗎">Q2. 可以只寫 Cucumber 不寫 RSpec 嗎?</span></h4><p>小孩紙才做選擇，我全都要，這就要問施主你的選擇惹 XD</p><h2><span id="如何安裝">如何安裝</span></h2><p>放在 <code>:test</code> 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/6ffbf593399e7dc4522c73d68aafba6a47d340bd" target="_blank" rel="noopener">commit</a></p><p>參考資料: <a href="https://cucumber.io/docs/installation/ruby/" target="_blank" rel="noopener">Cucumber Installation</a>，<strong>官方文件有提醒 Ruby on Rails 的安裝方式與 Ruby 安裝方式不同喔!!</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'cucumber-rails'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">gem <span class="string">'database_cleaner'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>上述 <code>bundle</code> 完成後，可輸入 <code>rails g -h</code> 會看到以下資訊<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可輸入 rails g -h | grep -B 2 cucumber</span></span><br><span class="line"></span><br><span class="line">Cucumber:</span><br><span class="line">  cucumber:install</span><br></pre></td></tr></table></figure></p><p>接著再終端機輸入，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/172e3b230dd9c9cb350959c5388d99998b73e2b8" target="_blank" rel="noopener">commit</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rails generate cucumber:install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可縮寫成</span></span><br><span class="line">rails g cucumber:install</span><br></pre></td></tr></table></figure></p><h2><span id="寫個-cucumber-中文測試範例">寫個 Cucumber 中文測試範例</span></h2><p>由於之前已經透過 <code>scaffold</code> 建立 User</p><p>以下示範寫個中文測試，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/61b7859c504fda88b457ece8fc2144bdfe17febd" target="_blank" rel="noopener">commit</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># features/user.feature</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#language: zh-TW</span></span><br><span class="line">@user</span><br><span class="line">功能: 建立使用者</span><br><span class="line">  這是示範的範例</span><br><span class="line">  支援中英文寫法</span><br><span class="line"></span><br><span class="line">  場景: 能建立使用者</span><br><span class="line">    假如 一開始沒有使用者</span><br><span class="line">    假如 有一位使用者的姓名是<span class="string">"小菜"</span></span><br><span class="line">    而且 該使用者的信箱是<span class="string">"river@riverye.com"</span></span><br><span class="line">    而且 該使用者的電話與地址資訊如下<span class="symbol">:</span></span><br><span class="line">      <span class="params">|phone      |</span>address  <span class="params">|</span></span><br><span class="line"><span class="params">      |</span>0987654321 <span class="params">|台北市某處 |</span></span><br><span class="line">    當 使用者被建立時</span><br><span class="line">    那麼 使用者會有<span class="number">1</span>位</span><br><span class="line">    而且 使用者的資訊會是正確的<span class="symbol">:</span></span><br><span class="line">      <span class="params">|name |</span>email             <span class="params">|phone      |</span>address  <span class="params">|</span></span><br><span class="line"><span class="params">      |</span>小菜  <span class="params">|river@riverye.com |</span>0987654321 <span class="params">|台北市某處 |</span></span><br></pre></td></tr></table></figure></p><h4><span id="空的測試-先寫規格還沒準備答案">空的測試 (先寫規格，還沒準備答案)</span></h4><p><img src="https://i.imgur.com/RVohq2G.gif" alt></p><h2><span id="如何執行">如何執行</span></h2><p>終端機輸入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跑全部檔案</span></span><br><span class="line">cucumber</span><br><span class="line">bundle <span class="built_in">exec</span> cucumber</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑指定 tag</span></span><br><span class="line">bundle <span class="built_in">exec</span> cucumber -t @user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑指定資料夾</span></span><br><span class="line">bundle <span class="built_in">exec</span> cucumber features</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑指定檔案</span></span><br><span class="line">bundle <span class="built_in">exec</span> cucumber features/user.feature</span><br></pre></td></tr></table></figure></p><p>更多操作範例輸入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cucumber -h</span><br><span class="line"></span><br><span class="line">Usage: cucumber [options] [ [FILE|DIR|URL][:LINE[:LINE]*] ]+</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">cucumber examples/i18n/en/features</span><br><span class="line">cucumber @rerun.txt (See --format rerun)</span><br><span class="line">cucumber examples/i18n/it/features/somma.feature:6:98:113</span><br><span class="line">cucumber -s -i http://rubyurl.com/eeCl</span><br></pre></td></tr></table></figure></p><h4><span id="準備的測試答案">準備的測試答案</span></h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># features/step_definitions/user_step.rb</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'一開始沒有使用者'</span>) <span class="keyword">do</span></span><br><span class="line">  expect(User.count).to eq(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'有一位使用者的姓名是&#123;string&#125;'</span>) <span class="keyword">do</span> <span class="params">|name|</span></span><br><span class="line">  @user = &#123;&#125;</span><br><span class="line">  @user.merge!(<span class="symbol">name:</span> name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'該使用者的信箱是&#123;string&#125;'</span>) <span class="keyword">do</span> <span class="params">|email|</span></span><br><span class="line">  @user.merge!(<span class="symbol">email:</span> email)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'該使用者的電話與地址資訊如下:'</span>) <span class="keyword">do</span> <span class="params">|table|</span></span><br><span class="line">  table.hashes.each <span class="keyword">do</span> <span class="params">|hash|</span></span><br><span class="line">    phone = hash[<span class="string">'phone'</span>]</span><br><span class="line">    address = hash[<span class="string">'address'</span>]</span><br><span class="line">    @user.merge!(<span class="symbol">phone:</span> phone, <span class="symbol">address:</span> address)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">當(<span class="string">'使用者被建立時'</span>) <span class="keyword">do</span></span><br><span class="line">  @user = User.create(@user)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">那麼(<span class="string">'使用者會有&#123;int&#125;位'</span>) <span class="keyword">do</span> <span class="params">|count|</span></span><br><span class="line">  expect(User.count).to eq(count)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'使用者的資訊會是正確的:'</span>) <span class="keyword">do</span> <span class="params">|table|</span></span><br><span class="line">  table.hashes.each <span class="keyword">do</span> <span class="params">|hash|</span></span><br><span class="line">    hash.each <span class="keyword">do</span> <span class="params">|key, value|</span></span><br><span class="line">      expect(@user[key]).to eq(value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h4><span id="執行結果">執行結果</span></h4><p><img src="https://i.imgur.com/cMNQlI9.gif" alt></p><h2><span id="如何讓-ci-也能跑-cucumber">如何讓 CI 也能跑 Cucumber</span></h2><p>將原本 CI 設定檔新增以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/8f55936c2956031d8517196979b4a9a4b15782e8" target="_blank" rel="noopener">commit</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> cucumber</span><br></pre></td></tr></table></figure></p><h2><span id="官方網站">官方網站</span></h2><p><a href="https://cucumber.io/docs/cucumber/" target="_blank" rel="noopener">https://cucumber.io/docs/cucumber/</a></p><h2><span id="參考資料">參考資料</span></h2><p><a href="https://ihower.tw/presentation/cucumber-coscup2009.pdf" target="_blank" rel="noopener">Cucumber 小黃瓜驗收測試工具 - ihower</a></p><hr><h2><span id="小結">小結</span></h2><p>想不到測試可以寫中文吧 XD<br>有沒有覺得很親切? <s>(噁心</s><br>瞬間人類都能看懂這份規格<br>且每一個測試都能重複使用<br>將來接手的工程師要改 code 時<br>也能看到原本的規格是如何制定<br>不用再通靈啦 (欣慰</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10243344" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10243344</a><br>medium 文章連結：<a href="https://link.medium.com/uP1cmw5R29" target="_blank" rel="noopener">https://link.medium.com/uP1cmw5R29</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/25/Day20-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-Cucumber-%E5%85%A7%E6%96%87%E6%9C%89%E7%AF%84%E4%BE%8B%E6%95%99%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;前一篇介紹了 &lt;a href=&quot;https://github.com/rspec/rspec-rails&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RSpec&lt;/a&gt; &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day19 - Ruby on Rails 測試篇 - RSpec</title>
    <link href="https://riverye.com/2020/09/24/Day19-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-RSpec/"/>
    <id>https://riverye.com/2020/09/24/Day19-Ruby-on-Rails-測試篇-RSpec/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2021-08-14T09:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>身為一名 Ruby on Rails 工程師，幾乎都有寫過 <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">RSpec</a>，<br>測試本身與開發是一樣重要的，有聽過一詞是開發時間緊迫，沒時間寫測試，<br>要趕在截止日前完成功能，都要來不及了，有空再補...<s>(通常就是沒下文</s><br>後續的維護成本、技術債反而會更高，<br>且要修改時，若有測試涵蓋的話，也比較不用擔心改 A 壞 B，<br>還能幫助你避開低級錯誤 (像是語法錯誤等)</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="如何安裝">如何安裝</span></h2><p>放在 <code>:development, :test</code> group 裡面，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/40e8c4680dfe192104bd2051c22d0ea8eff106b1" target="_blank" rel="noopener">commit</a></p><p>參考資料: <a href="https://relishapp.com/rspec/rspec-rails/docs" target="_blank" rel="noopener">https://relishapp.com/rspec/rspec-rails/docs</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'rspec-rails'</span>, <span class="string">'~&gt; 4.0.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>接著再終端機輸入，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/69fb29236766f40978def698774af235eb8877e4" target="_blank" rel="noopener">commit</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rails generate rspec:install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可縮寫成</span></span><br><span class="line">rails g rspec:install</span><br></pre></td></tr></table></figure></p><h2><span id="產生範例-spec">產生範例 spec</span></h2><p>由於之前已經透過 <code>scaffold</code> 建立 User<br>欲透過指令補產生相關測試檔案的話，在終端機輸入以下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g rspec:scaffold user</span><br></pre></td></tr></table></figure></p><p>若不透過指令，也可手動新增檔案，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/ecc69165e1cfff8a2124cb94b8460d0960b78d56" target="_blank" rel="noopener">commit</a></p><h4><span id="備註">備註:</span></h4><ol><li>原本我也不知道要這樣下指令，透過 <code>rails g -h</code> 的技巧，看有哪些參數可以使用 (若不清楚，可以看前面寫的 Linux 指令文章 <code>man</code>、<code>help</code>、<code>tldr</code>，非常受用的技巧)</li><li>若已經有先裝 RSpec ，透過 scaffold 產生檔案時，便會一起產生 spec.rb 的相關檔案</li></ol><h2><span id="如何執行">如何執行</span></h2><p>終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跑全部的測試</span></span><br><span class="line">rspec</span><br><span class="line">rspec spec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑特定資料夾的測試</span></span><br><span class="line">rspec spec/routing/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑特定檔案的測試</span></span><br><span class="line">rspec spec/routing/users_routing_spec.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑特定檔案某一個測試</span></span><br><span class="line">rspec spec/routing/users_routing_spec.rb:22</span><br></pre></td></tr></table></figure></p><h2><span id="如何讓-ci-也能跑-rspec">如何讓 CI 也能跑 rspec</span></h2><p>將原本 CI 設定檔新增以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/707897e611d3a6a4b8f5e0d026bd3494274b1305" target="_blank" rel="noopener">commit</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> rspec</span><br></pre></td></tr></table></figure></p><h2><span id="推薦網站">推薦網站</span></h2><p>想提升自己 RSpec 寫法的話，可參考 <a href="https://www.betterspecs.org/" target="_blank" rel="noopener">Better Specs</a> 此網站</p><hr><h2><span id="小結">小結</span></h2><p>測試非常的重要，但也別把測試當萬靈丹，它只能幫忙測出有涵蓋到的情境 (假設測試的情境、準備的答案、寫的測試都是對的)，依然無法測出沒想到的情境，未來再修改 code 時，也可能發現原本考量的情境已經變了，這時便需要調整測試本身</p><p>測試本身，其實就可以寫成 30 天的文章，自成一個生態圈，且還有許多相關的 <a href="https://rubygems.org/" target="_blank" rel="noopener">Gem</a> 相輔相成，像是 <a href="https://github.com/thoughtbot/factory_bot" target="_blank" rel="noopener">factory_bot</a>、<a href="https://github.com/DatabaseCleaner/database_cleaner" target="_blank" rel="noopener">Database Cleaner</a>、<a href="https://github.com/travisjeffery/timecop" target="_blank" rel="noopener">timecop</a>、<a href="https://github.com/teamcapybara/capybara" target="_blank" rel="noopener">Capybara</a>、<a href="https://github.com/simplecov-ruby/simplecov" target="_blank" rel="noopener">SimpleCov</a>、<a href="https://github.com/guilleiguaran/fakeredis" target="_blank" rel="noopener">FakeRedis</a>...等，將來有機會再視情況寫成文章...</p><p>本篇其實寫的蠻精簡的 XD <s>(逃</s>，下篇會講另一個測試套件 <a href="https://github.com/cucumber/cucumber-ruby" target="_blank" rel="noopener">Cucumber</a></p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10242906" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10242906</a><br>medium 文章連結：<a href="https://link.medium.com/M8qWBUbd19" target="_blank" rel="noopener">https://link.medium.com/M8qWBUbd19</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/24/Day19-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-RSpec/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;身為一名 Ruby on Rails 工程師，幾乎都有寫過 &lt;a href=&quot;https://github.com/rspec/rspec-rails&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day18 - Ruby on Rails 中的 Logger 紀錄的介紹與應用</title>
    <link href="https://riverye.com/2020/09/23/Day18-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Logger-%E7%B4%80%E9%8C%84%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://riverye.com/2020/09/23/Day18-Ruby-on-Rails-中的-Logger-紀錄的介紹與應用/</id>
    <published>2020-09-22T16:00:00.000Z</published>
    <updated>2021-08-14T09:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>追問題 (bug) 時，Log 是非常重要的訊息來源，能知道當時發生了什麼問題<br>像是使用者做了什麼操作、帶了哪些參數、request、response 的紀錄等<br>若都沒有儲存 Log 紀錄的話，就...好自為之 QQ</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="如何產生-log">如何產生 Log</span></h2><p>使用者在操作時，本身就會產生制式 Log 被記錄，並存在 Log 資料夾底下，依照當下環境，存在對應的檔案中</p><h4><span id="在-development-操作的-log">在 development 操作的 Log</span></h4><p><img src="https://i.imgur.com/lwrV4PN.jpg" alt></p><h2><span id="development-增加時間戳">development 增加時間戳</span></h2><p>上面那張圖雖然有自動存成 Log，但沒時間戳挺不方便的</p><p>增加方法如下，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/3/commits/e384552e8e4f616854f38fe87be71998f3e612c6" target="_blank" rel="noopener">commit</a></p><p>備註: production 預設就有記錄時間戳 (<code>config/environments/production.rb</code>)，故不用調整，而 development 則依需求是否需要增加</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb</span></span><br><span class="line"></span><br><span class="line">config.log_formatter = <span class="symbol">:</span><span class="symbol">:Logger</span><span class="symbol">:</span><span class="symbol">:Formatter</span>.new</span><br></pre></td></tr></table></figure></p><h4><span id="增加時間戳的-log">增加時間戳的 Log</span></h4><p><img src="https://i.imgur.com/i4pCCKD.png" alt></p><h2><span id="如何在指定位置增加-log">如何在指定位置增加 Log</span></h2><p>情境: 打 API 的 request 和 response 建議可以儲存，以及針對錯誤訊息也要記錄，方便後續追蹤</p><p>示範如何紀錄，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/3/commits/a7c4b3d52485ee08dee4d7518ffb53713b1acd7b" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line"></span><br><span class="line">Rails.logger.info <span class="string">"params: <span class="subst">#&#123;user_params&#125;</span>, <span class="subst">#&#123;@user.inspect&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><h2><span id="將-log-存到指定路徑檔案中">將 Log 存到指定路徑檔案中</span></h2><p>將所有 Log 都存在預設路徑檔案中，會導致原本的檔案過於肥大，且要尋找時會比較麻煩，可依需求分類存在不同檔案中，像是打 A API 的統一存在 A 路徑，B API 的統一存在 B 路徑中...</p><p>範例可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/3/commits/add096871d024f3f6e5f8cb6121c5e5c1e3c8c5e" target="_blank" rel="noopener">commit</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/services/file_log.rb</span></span><br><span class="line"><span class="comment"># 有不同寫法，歡迎在底下留言交流</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLog</span></span></span><br><span class="line">  @loggers <span class="params">||</span>= &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">logger</span><span class="params">(location)</span></span></span><br><span class="line">    @loggers[location] <span class="params">||</span>= create_logger(location)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create_logger</span><span class="params">(location)</span></span></span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">'RAILS_LOG_TO_STDOUT'</span>]</span><br><span class="line">      logger = Logger.new(STDOUT)</span><br><span class="line">      logger.progname = File.basename(location, <span class="string">'.log'</span>)</span><br><span class="line">      logger.formatter = Rails.configuration.log_formatter</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      FileUtils.mkdir_p(Rails.root.join(<span class="string">'log'</span>, File.dirname(location)))</span><br><span class="line">      logger = Logger.new(Rails.root.join(<span class="string">'log'</span>, location))</span><br><span class="line">      logger.formatter = proc <span class="keyword">do</span> <span class="params">|severity, datetime, _progname, msg|</span></span><br><span class="line">        <span class="string">"<span class="subst">#&#123;severity&#125;</span> [<span class="subst">#&#123;datetime.strftime(<span class="string">'%Y-%m-%d %H:%M:%S.%6N'</span>)&#125;</span>]: <span class="subst">#&#123;msg&#125;</span>\n"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ActiveSupport::TaggedLogging.new(logger)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="https://rails.ruby.tw/debugging_rails_applications.html#logger" target="_blank" rel="noopener">除錯Rails 應用程式— Ruby on Rails 指南</a></li><li><a href="https://ihower.tw/rails/deployment.html#sec9" target="_blank" rel="noopener">Ruby on Rails 實戰聖經#整理 Log 檔案</a></li></ol><hr><h2><span id="小結">小結</span></h2><p>Log 可說是非常重要的小細節，也能客製化格式，Google 下便有相關資源可參考，除了上述範例使用到的 <code>:info</code> 外，還有 <code>:debug</code> 、 <code>:warn</code> 、 <code>:error</code> 、 <code>:fatal</code> 以及 <code>:unknown</code> 可以使用，差異可參考上述提供的參考資料連結</p><p>雖說很方便，但也不要過於氾濫什麼都儲存，除了會影響效能外，容量也會用很兇</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10242280" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10242280</a><br>medium 文章連結：<a href="https://link.medium.com/9T7n8giyZ9" target="_blank" rel="noopener">https://link.medium.com/9T7n8giyZ9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/23/Day18-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Logger-%E7%B4%80%E9%8C%84%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;追問題 (bug) 時，Log 是非常重要的訊息來源，能知道當時發生了什麼問題&lt;br&gt;
像是使用者做了什麼操作、帶了哪些參數、request、response 的紀錄等&lt;br&gt;
若都沒有儲存 Log 紀錄的話
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day17 - Ruby on Rails 中的 awesome_print 讓你的 console 更好閱讀</title>
    <link href="https://riverye.com/2020/09/22/Day17-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-awesome-print-%E8%AE%93%E4%BD%A0%E7%9A%84-console-%E6%9B%B4%E5%A5%BD%E9%96%B1%E8%AE%80/"/>
    <id>https://riverye.com/2020/09/22/Day17-Ruby-on-Rails-中的-awesome-print-讓你的-console-更好閱讀/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2020-09-23T15:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>awesome_print 這套蠻實用的，對客戶來說無感，對工程師卻是有感的存在 (至少對我來說是啦 XD)，能讓 console 畫面比較美，看起來也比較賞心悅目，當 table 欄位比較多時，也比較好閱讀</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="awesome-print">Awesome Print</span></h2><p><a href="https://github.com/awesome-print/awesome_print" target="_blank" rel="noopener">官方網站</a>有提到即將發佈的 2.0 版本<br>將只支援 Ruby v1.9.3 之後及 Rails v3.0 之後，若本身專案使用的版本比較舊的話，要特別留意</p><h2><span id="如何安裝">如何安裝</span></h2><p>在 Gemfile 加入，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/2/commits/f95351f95ce0ea2cbf2560f60a090e3016b38ef0" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile 檔案</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'awesome_print'</span>, <span class="string">'~&gt; 1.8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><h2><span id="讓-console-預設使用-awesome-print">讓 console 預設使用 Awesome Print</span></h2><p><a href="https://github.com/awesome-print/awesome_print" target="_blank" rel="noopener">官方網站</a>內文有寫如何設定，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/2/commits/45c73c4e88cf177a57eec65ac2695f7c58efac53" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitignore</span></span><br><span class="line">.irb_history</span><br><span class="line"></span><br><span class="line"><span class="comment"># .irbrc</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'awesome_print'</span></span><br><span class="line">AwesomePrint.irb!</span><br><span class="line"></span><br><span class="line"><span class="comment"># config/initializers/awesome_print.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">AwesomePrint</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Formatters</span></span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BaseFormatter</span></span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">indented</span><span class="params">(&amp;block)</span></span></span><br><span class="line">        inspector.increase_indentation(&amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Inspector</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_indentation</span><span class="params">(&amp;block)</span></span></span><br><span class="line">      indentator.indent(&amp;block)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何使用">如何使用</span></h2><p>與一般操作一樣，差別在於看起來比較賞心悅目 XD</p><p>直接看以下圖片，便知其差異</p><h4><span id="console-預設-無-awesome_print">console 預設 (無 awesome_print)</span></h4><p><img src="https://i.imgur.com/WYUTX3L.png" alt></p><h4><span id="有開啟-awesome_print">有開啟 awesome_print</span></h4><p><img src="https://i.imgur.com/YNNzysx.png" alt></p><hr><h2><span id="小結">小結</span></h2><p>可讀性變高以後，心情也會跟著上升，眼睛也比較不會這麼吃力，開發也跟著變快惹(!?</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10241726" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10241726</a><br>medium 文章連結：<a href="https://link.medium.com/RDfLdOCrY9" target="_blank" rel="noopener">https://link.medium.com/RDfLdOCrY9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/22/Day17-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-awesome-print-%E8%AE%93%E4%BD%A0%E7%9A%84-console-%E6%9B%B4%E5%A5%BD%E9%96%B1%E8%AE%80/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;awesome_print 這套蠻實用的，對客戶來說無感，對工程師卻是有感的存在 (至少對我來說是啦 XD)，能讓 console 畫面比較美，看起來也比較賞心悅目，當 table 欄位比較多時，也比較好閱讀
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day16 - Ruby on Rails 中的風格管理套件 RuboCop</title>
    <link href="https://riverye.com/2020/09/21/Day16-Ruby-on-Rails-%E4%B8%AD%E7%9A%84%E9%A2%A8%E6%A0%BC%E7%AE%A1%E7%90%86%E5%A5%97%E4%BB%B6-RuboCop/"/>
    <id>https://riverye.com/2020/09/21/Day16-Ruby-on-Rails-中的風格管理套件-RuboCop/</id>
    <published>2020-09-20T16:00:00.000Z</published>
    <updated>2020-09-20T16:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>多人協作時，通常會規範 style，像是統一使用單引號、雙引號、每個方法最多不能超過幾行、每行的長度限制等<br>這時就需要透過 RuboCop 來進行把關</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2><span id="rubocop">Rubocop</span></h2><blockquote><p>Role models are important.-- Officer Alex J. Murphy / RoboCop</p></blockquote><p>進入<a href="https://github.com/rubocop-hq/rubocop" target="_blank" rel="noopener">官方網站</a>便能看到這段話，由此可見風格規範的重要性</p><h2><span id="如何安裝">如何安裝</span></h2><p>如文件所說直接在終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install rubocop</span><br></pre></td></tr></table></figure></p><p>接著放在 development 中，test 和 production 不需使用<br>或不放 Gemfile 中，只針對 CI 處理即可</p><p>可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/commit/f44bdc052ccbf0c195bb9c7e154abb72788ebc8f" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile 檔案</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'rubocop'</span>, <span class="string">'~&gt; 0.90.0'</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何執行">如何執行</span></h2><p>在專案目錄下的終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 檢查全部的檔案</span></span><br><span class="line">rubocop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只針對特定檔案、資料夾檢查</span></span><br><span class="line">rubocop path/to/file path/to/directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">rubocop app/controllers/application_controller.rb</span><br></pre></td></tr></table></figure></p><p>備註: 善用 <code>tldr</code> 可看下 <code>rubocop</code> 怎麼使用<br><img src="https://i.imgur.com/0MFURaa.png" alt></p><h2><span id="如何客製化-rubocop-設定">如何客製化 RuboCop 設定</span></h2><p>可參考 <a href="https://docs.rubocop.org/rubocop/0.85/cops_style.html" target="_blank" rel="noopener">Cop Documentation Style</a><br>裡面有提供各種範例的設定，可針對專案需求進行調整，<br>並將設定檔寫在 <code>.rubocop.yml</code> 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/commit/db549bd5145f1555dc3a20cddc9a8639a5223ac3" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the configuration used to check the rubocop source code.</span></span><br><span class="line"><span class="comment"># url: https://docs.rubocop.org/rubocop/0.85/cops_style.html</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">AllCops:</span></span><br><span class="line">  <span class="symbol">Exclude:</span></span><br><span class="line">    - <span class="string">'config/routes.rb'</span></span><br><span class="line">    - <span class="string">'db/schema.rb'</span></span><br><span class="line">  <span class="symbol">TargetRubyVersion:</span> <span class="number">2.7</span>.<span class="number">1</span></span><br><span class="line">  <span class="symbol">TargetRailsVersion:</span> <span class="number">6.0</span>.<span class="number">3.3</span></span><br><span class="line"></span><br><span class="line">  <span class="symbol">Rails:</span></span><br><span class="line">    <span class="symbol">Enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  Rails/<span class="symbol">UnknownEnv:</span></span><br><span class="line">    <span class="symbol">Environments:</span></span><br><span class="line">      - production</span><br><span class="line">      - staging</span><br><span class="line">      - development</span><br><span class="line">      - test</span><br><span class="line"></span><br><span class="line"><span class="comment"># modern editors and terminal fit more than 120 characters.</span></span><br><span class="line">Metrics/<span class="symbol">LineLength:</span></span><br><span class="line">  <span class="symbol">Max:</span> <span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Class length is not critical to code quality</span></span><br><span class="line">Metrics/<span class="symbol">ClassLength:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module length is not critical to code quality</span></span><br><span class="line">Metrics/<span class="symbol">ModuleLength:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Block length is ok to be long in DSLs like 'rspec' or 'rake'</span></span><br><span class="line">Metrics/<span class="symbol">BlockLength:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defualt '10 line' is too strict to us, and may clutter the class</span></span><br><span class="line">Metrics/<span class="symbol">MethodLength:</span></span><br><span class="line">  <span class="symbol">Max:</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line">Metrics/<span class="symbol">AbcSize:</span></span><br><span class="line">  <span class="symbol">Max:</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Most Rails generated class are not doced, and not needed</span></span><br><span class="line">Style/<span class="symbol">Documentation:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 'return' makes code more readable in some cases</span></span><br><span class="line">Style/<span class="symbol">RedundantReturn:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Style/<span class="symbol">AsciiComments:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Guard is not always good to readablity</span></span><br><span class="line"><span class="comment"># Note: It does not mean we don't use guard to reduce block levels</span></span><br><span class="line"><span class="comment"># In short methods, using guard is not necessary, e.g.</span></span><br><span class="line"><span class="comment">#   def foo(x)   | def foo(x)</span></span><br><span class="line"><span class="comment">#     if xxx?(x) |   return unless xxx?(x)</span></span><br><span class="line"><span class="comment">#       bar(x)   |   bar(x)</span></span><br><span class="line"><span class="comment">#     end        | end</span></span><br><span class="line"><span class="comment">#   end          |</span></span><br><span class="line">Style/<span class="symbol">GuardClause:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The rule expects</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   if xxxxxx</span></span><br><span class="line"><span class="comment">#     a_very_long_method_or_somethings_like_that......</span></span><br><span class="line"><span class="comment">#   end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># to be</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   a_very_long_method_or_somethings_like_that...... if xxxxxx</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is not good looking at all.</span></span><br><span class="line">Style/<span class="symbol">IfUnlessModifier:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # bad</span></span><br><span class="line"><span class="comment"># a = [1, 2,]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># a = [</span></span><br><span class="line"><span class="comment">#   1, 2,</span></span><br><span class="line"><span class="comment">#   3,</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># a = [</span></span><br><span class="line"><span class="comment">#   1,</span></span><br><span class="line"><span class="comment">#   2,</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line">Style/<span class="symbol">TrailingCommaInArrayLiteral:</span></span><br><span class="line">  <span class="symbol">EnforcedStyleForMultiline:</span> consistent_comma</span><br><span class="line"></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># foo(</span></span><br><span class="line"><span class="comment">#   1,</span></span><br><span class="line"><span class="comment">#   2,</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line">Style/<span class="symbol">TrailingCommaInArguments:</span></span><br><span class="line">  <span class="symbol">EnforcedStyleForMultiline:</span> consistent_comma</span><br><span class="line"></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># a = &#123;</span></span><br><span class="line"><span class="comment">#   1,</span></span><br><span class="line"><span class="comment">#   2,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">Style/<span class="symbol">TrailingCommaInHashLiteral:</span></span><br><span class="line">  <span class="symbol">EnforcedStyleForMultiline:</span> consistent_comma</span><br><span class="line"></span><br><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="comment"># class Foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   def bar</span></span><br><span class="line"><span class="comment">#     ...</span></span><br><span class="line"><span class="comment">#   end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="comment"># class Foo</span></span><br><span class="line"><span class="comment">#   def bar</span></span><br><span class="line"><span class="comment">#     ...</span></span><br><span class="line"><span class="comment">#   end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">Style/<span class="symbol">ClassAndModuleChildren:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="comment"># "No special symbols"</span></span><br><span class="line"><span class="comment"># "No string interpolation"</span></span><br><span class="line"><span class="comment"># "Just text"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="comment"># 'No special symbols'</span></span><br><span class="line"><span class="comment"># 'No string interpolation'</span></span><br><span class="line"><span class="comment"># 'Just text'</span></span><br><span class="line"><span class="comment"># "Wait! What's #&#123;this&#125;!"</span></span><br><span class="line"><span class="comment"># Style/StringLiterals:</span></span><br><span class="line"><span class="comment">#   EnforcedStyle: single_quotes (default)</span></span><br></pre></td></tr></table></figure></p><h2><span id="如何只針對修改的檔案進行檢查就好">如何只針對修改的檔案進行檢查就好</span></h2><p>改了好多檔案，逐步檢查好麻煩，有什麼方法可以只針對修改的檔案檢查就好?<br>在自己 Local branch 的終端機輸入以下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若有更好的設定方式，歡迎留言交流 :)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">rubocop $(git diff master --name-only)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">git diff-tree -r --no-commit-id --name-only head..origin/master | xargs rubocop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 備註: xargs 是 Linux 指令</span></span><br></pre></td></tr></table></figure></p><p>或不想每次發 Pull requests (簡稱: pr) 都檢查全部的檔案</p><h3><span id="只想針對修改的檔案進行檢查就好可參考此-commit-或此-commit">只想針對修改的檔案進行檢查就好，可參考此  或此 </span></h3><h3><span id="只想針對修改的行數進行檢查就好可參考此-pr">只想針對修改的行數進行檢查就好，可參考此 </span></h3><p>備註: 安裝「<a href="https://rubygems.org/gems/pronto-rubocop" target="_blank" rel="noopener">pronto-rubocop</a>」時，應該會踩到安裝失敗的雷，有相依「<a href="https://rubygems.org/gems/thor" target="_blank" rel="noopener">thor</a>」比較舊的版本，可參考上面 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/9" target="_blank" rel="noopener">pr</a> 的解決方式<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若有更好的設定方式，歡迎留言交流 :)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 Travis CI 為例</span></span><br><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line">git fetch origin master &amp;&amp; master_sha1=<span class="string">"$(cut -c -40&lt;&lt;&lt;"</span>$(cat .git/FETCH_HEAD)<span class="string">")"</span> &amp;&amp; pronto run -c $master_sha1 --exit-code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 欲使用 pronto 這指令，需安裝「pronto-rubocop」</span></span><br><span class="line"><span class="comment"># 有安裝「pronto-rubocop」的話，這段也能直接在終端機輸入</span></span><br></pre></td></tr></table></figure></p><h2><span id="某些行數不想被檢查可以跳過檢查嗎">某些行數不想被檢查，可以跳過檢查嗎</span></h2><p>基於某些原因，某些 code 不想被 RuboCop 檢查 <s>(說白就是不想處理 XD</s></p><p>想跳過檢查的話，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/1/commits/34a64825f160f9dc5d711e178ce4c49ff0da1d60" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依照 RuboCop 提醒，後面 oo_xx 改成對應的內容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rubocop:disable oo_xx</span></span><br><span class="line">your code</span><br><span class="line"><span class="comment"># rubocop:enable oo_xx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rubocop:disable Style/TrailingCommaInHashLiteral</span></span><br><span class="line">your code</span><br><span class="line"><span class="comment"># rubocop:enable Style/TrailingCommaInHashLiteral</span></span><br></pre></td></tr></table></figure></p><h2><span id="vs-code-套件">VS code 套件</span></h2><p>每次都要輸入 <code>rubocop</code> 才知道哪些要改，好麻煩，<br>有沒有視覺化的工具可以協助呢?</p><h4><span id="vs-code-有套件推薦使用ruby-rubocop">VS code 有套件推薦使用「ruby-rubocop」</span></h4><h4><span id="套件名稱-ruby-rubocop">套件名稱: ruby-rubocop</span></h4><h4><span id="套件連結-httpsmarketplacevisualstudiocomitemsitemnamemisogiruby-rubocop">套件連結: </span></h4><p><img src="https://i.imgur.com/tpuARTz.png" alt></p><h4><span id="vs-code-示範畫面">VS code 示範畫面</span></h4><p><img src="https://i.imgur.com/pe4dE6c.gif" alt></p><hr><h2><span id="參考">參考</span></h2><p><a href="https://5xruby.tw/posts/rubocop-intro/" target="_blank" rel="noopener">機器戰警 RuboCop</a></p><h2><span id="小結">小結</span></h2><p>RuboCop 真的是又愛又恨的套件，好處是讓大家風格一致，壞處是處理時挺花時間的，遇到不知怎解決的問題時，Goolge 會是你的好朋友，<s>再不行就跳過檢查(誤</s></p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10240956" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10240956</a><br>medium 文章連結：<a href="https://link.medium.com/fx6sSkzeW9" target="_blank" rel="noopener">https://link.medium.com/fx6sSkzeW9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/21/Day16-Ruby-on-Rails-%E4%B8%AD%E7%9A%84%E9%A2%A8%E6%A0%BC%E7%AE%A1%E7%90%86%E5%A5%97%E4%BB%B6-RuboCop/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;多人協作時，通常會規範 style，像是統一使用單引號、雙引號、每個方法最多不能超過幾行、每行的長度限制等&lt;br&gt;
這時就需要透過 RuboCop 來進行把關&lt;/p&gt;
&lt;p&gt;後續的文章會以此 &lt;a href=
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day15 - 如何看自己打出去的 request 完整資訊，以 PostBin 和 Webhook.site 為例</title>
    <link href="https://riverye.com/2020/09/20/Day15-%E5%A6%82%E4%BD%95%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%89%93%E5%87%BA%E5%8E%BB%E7%9A%84-request-%E5%AE%8C%E6%95%B4%E8%B3%87%E8%A8%8A%EF%BC%8C%E4%BB%A5-PostBin-%E5%92%8C-Webhook-site-%E7%82%BA%E4%BE%8B/"/>
    <id>https://riverye.com/2020/09/20/Day15-如何看自己打出去的-request-完整資訊，以-PostBin-和-Webhook-site-為例/</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2021-08-14T09:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>串接 API 時，通常會取得對方的文件，沒有就...通靈吧 XD</p><p>若想看自己發送的 request 完整資訊，可使用 <a href="https://postb.in/" target="_blank" rel="noopener">PostBin</a> 或 <a href="https://webhook.site/" target="_blank" rel="noopener">Webhook.site</a> 這兩個網站進行查看</p><p>以下分別使用 Runy on Rails 的 <code>Net::HTTP</code> 、 <code>REST Client</code> 、 <code>HTTP</code> 進行示範，皆能做到一樣的事情</p><hr><h2><span id="nethttp">Net::HTTP</span></h2><p>為 Ruby 內建的 library ，無需額外安裝 gem<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'net/http'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網址要記得換</span></span><br><span class="line">url = <span class="string">"https://postb.in/ooo-xxx"</span></span><br><span class="line">uri = URI.parse(url)</span><br><span class="line">params = &#123; <span class="symbol">name:</span> <span class="string">'river'</span>, <span class="symbol">content:</span> <span class="string">'hello world'</span> &#125;</span><br><span class="line">response = Net::HTTP.post_form(uri, params)</span><br><span class="line">response.code</span><br></pre></td></tr></table></figure></p><h4><span id="示範在-irb-中使用-nethttp-打-api-到-postbin">示範在 <code>irb</code> 中使用 <code>Net::HTTP</code> 打 API 到 PostBin</span></h4><p><img src="https://i.imgur.com/NHIf31U.gif" alt></p><h4><span id="示範在-irb-中使用-nethttp-打-api-到-webhooksite">示範在 <code>irb</code> 中使用 <code>Net::HTTP</code> 打 API 到 Webhook.site</span></h4><p><img src="https://i.imgur.com/JLgMxSv.gif" alt></p><h4><span id="由於另外-2-套操作手感與截圖大同小異故不另外製作-gif-操作範例">由於另外 2 套操作手感與截圖大同小異，故不另外製作 Gif 操作範例</span></h4><p>參考資料: <a href="https://ruby-doc.org/stdlib-2.7.0/libdoc/net/http/rdoc/Net/HTTP.html" target="_blank" rel="noopener">Net::HTTP</a></p><hr><h2><span id="rest-client">REST Client</span></h2><p>在 <a href="https://rubygems.org/gems/rest-client" target="_blank" rel="noopener">RubyGems</a> 的下載高達 1.5 億次以上，非常驚人的下載次數!!</p><p>且官方 GitHub 有提供範例，非常清楚易懂</p><p>備註: <a href="https://github.com/rest-client/rest-client" target="_blank" rel="noopener">官方網站</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Ruby on Rails 專案中的 Gemfile 加入以下這段</span></span><br><span class="line">gem <span class="string">'rest-client'</span>, <span class="string">'~&gt; 2.1'</span></span><br><span class="line"><span class="comment"># 記得要 bundle 才能使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下為在 rails console 操作</span></span><br><span class="line"><span class="comment"># 網址要記得換</span></span><br><span class="line">url = <span class="string">"https://postb.in/ooo-xxx"</span></span><br><span class="line">payload = &#123; <span class="symbol">name:</span> <span class="string">'river'</span>, <span class="symbol">content:</span> <span class="string">'hello world'</span> &#125;</span><br><span class="line">response = RestClient.post(url, payload.to_json, <span class="symbol">content_type:</span> <span class="symbol">:json</span>, <span class="symbol">accept:</span> <span class="symbol">:json</span>, <span class="symbol">user_agent:</span> <span class="string">'myagent'</span>)</span><br><span class="line">response.code</span><br></pre></td></tr></table></figure></p><hr><h2><span id="http">HTTP</span></h2><p>在 <a href="https://rubygems.org/gems/http" target="_blank" rel="noopener">RubyGems</a> 的下載超過 3600 萬次以上，也是很驚人的下載次數</p><p>最後更新時間比 REST Client 還新，且 <a href="https://github.com/httprb/http" target="_blank" rel="noopener">GitHub</a> 上有將 Ruby 生態圈中常見的 HTTP library 比較一輪</p><p>三個相比下，也是我個人比較常用的 Gem</p><p>備註: <a href="https://github.com/httprb/http" target="_blank" rel="noopener">官方網站</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Ruby on Rails 專案中的 Gemfile 加入以下這段</span></span><br><span class="line">gem <span class="string">'http'</span>, <span class="string">'~&gt; 4.4'</span>, <span class="string">'&gt;= 4.4.1'</span></span><br><span class="line"><span class="comment"># 記得要 bundle 才能使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下為在 rails console 操作</span></span><br><span class="line"><span class="comment"># 網址要記得換</span></span><br><span class="line">url = <span class="string">'https://postb.in/ooo-xxx'</span></span><br><span class="line">body = &#123; <span class="symbol">name:</span> <span class="string">'river'</span>, <span class="symbol">content:</span> <span class="string">'hello world'</span> &#125;</span><br><span class="line">response = HTTP.post(url, <span class="symbol">json:</span> body)</span><br><span class="line">response.code</span><br></pre></td></tr></table></figure></p><h2><span id="小結">小結</span></h2><p>主要是介紹如何透過工具查詢自己 request 的完整資訊 (Headers、Body等)</p><p>並沒有針對 response 的處理說明，畢竟 <code>response.body</code> 每個 API 回傳皆不同</p><p>先從拿到 HTTP 200 開始，後續怎處理 response 依需求而定</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10240421" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10240421</a><br>medium 文章連結：<a href="https://link.medium.com/jTboFdd7U9" target="_blank" rel="noopener">https://link.medium.com/jTboFdd7U9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/20/Day15-%E5%A6%82%E4%BD%95%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%89%93%E5%87%BA%E5%8E%BB%E7%9A%84-request-%E5%AE%8C%E6%95%B4%E8%B3%87%E8%A8%8A%EF%BC%8C%E4%BB%A5-PostBin-%E5%92%8C-Webhook-site-%E7%82%BA%E4%BE%8B/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;串接 API 時，通常會取得對方的文件，沒有就...通靈吧 XD&lt;/p&gt;
&lt;p&gt;若想看自己發送的 request 完整資訊，可使用 &lt;a href=&quot;https://postb.in/&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day14 - 在 Ruby 中使用 Benchmark 比較哪個方法比較快</title>
    <link href="https://riverye.com/2020/09/19/Day14-%E5%9C%A8-Ruby-%E4%B8%AD%E4%BD%BF%E7%94%A8-Benchmark-%E6%AF%94%E8%BC%83%E5%93%AA%E5%80%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BC%83%E5%BF%AB/"/>
    <id>https://riverye.com/2020/09/19/Day14-在-Ruby-中使用-Benchmark-比較哪個方法比較快/</id>
    <published>2020-09-18T16:00:00.000Z</published>
    <updated>2020-09-18T16:04:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>總算開始進入 Ruby 程式語言的世界中，再不寫點什麼，都快與鐵人賽報名的題目不相干，變成標題殺人惹 XD</p><p>後續 Ruby on Rails 的相關文章，假定讀者為已經有 CRUD 基礎上(或有工作經驗)，進而分享，故不從環境建置等開始說起 (若有興趣想從頭學，可參考這篇環境建置 <a href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/">Windows 10 安裝 Ruby + Rails + Node.js + Git + postgresql</a>，然後自學)</p><hr><h2><span id="benchmark">Benchmark</span></h2><p>中文翻譯為「基準測試」，為 Ruby 內建的 <code>module</code>，用於評估程式的效能</p><h3><span id="情境">情境</span></h3><p>寫了一段程式，想到幾種寫法皆能做到一樣的事情，但想知道哪個效能比較好的話，可以用 Benchmark，在 Ruby 或 Ruby on Rails 中皆能使用</p><h3><span id="如何測試">如何測試</span></h3><p>以下這段有 3 種方法可以測試：</p><ol><li>在 Ruby 的 <code>irb</code> 模式中，貼上以下的程式碼</li><li>在 Ruby on Rails 的 <code>rails console</code> (可縮寫成 <code>rails c</code>) 中，貼上以下的程式碼</li><li>將以下這段存成 <code>test.rb</code> 檔，在終端機輸入 <code>ruby test.rb</code><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'benchmark'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment"># n 為要測試的次數</span></span><br><span class="line">  n = <span class="number">5000000</span></span><br><span class="line">  y = Benchmark.bm <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">    x.report(<span class="string">"&lt;&lt;    "</span>) &#123; n.times &#123; [] &lt;&lt; <span class="string">'river'</span> &#125; &#125;</span><br><span class="line">    x.report(<span class="string">"push  "</span>) &#123; n.times &#123; [].push(<span class="string">'river'</span>) &#125; &#125;</span><br><span class="line">    x.report(<span class="string">"concat"</span>) &#123; n.times &#123; [].concat([<span class="string">'river'</span>]) &#125; &#125;</span><br><span class="line">    x.report(<span class="string">"+     "</span>) &#123; n.times &#123; [] + [<span class="string">'river'</span>] &#125; &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol><h4><span id="顯示如下">顯示如下</span></h4><table><thead><tr><th>name</th><th>user</th><th>system</th><th>total</th><th>real</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>0.600000</td><td>0.000000</td><td>0.600000</td><td>(  0.615966)</td></tr><tr><td>push</td><td>0.650000</td><td>0.000000</td><td>0.650000</td><td>(  0.658296)</td></tr><tr><td>concat</td><td>1.230000</td><td>0.010000</td><td>1.240000</td><td>(  1.234671)</td></tr><tr><td>+</td><td>1.010000</td><td>0.000000</td><td>1.010000</td><td>(  1.034694)</td></tr></tbody></table><h4><span id="irb-測試的畫面"><code>irb</code> 測試的畫面</span></h4><p><img src="https://i.imgur.com/rznoF2B.png" alt></p><h4><span id="rails-c-測試的畫面"><code>rails c</code> 測試的畫面</span></h4><p><img src="https://i.imgur.com/63OEQ41.png" alt></p><h2><span id="小結">小結</span></h2><p>從上述情境中可以發現使用 <code>&lt;&lt;</code> 效能比較好<br>但不等於 <code>&lt;&lt;</code> 這方法是最好的，端看情境應用<br>尤其在 SQL Query 時，更是明顯</p><h2><span id="參考資料">參考資料</span></h2><p><a href="https://ruby-doc.org/stdlib-2.5.0/libdoc/benchmark/rdoc/Benchmark.html" target="_blank" rel="noopener">Benchmark</a></p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10239641" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10239641</a><br>medium 文章連結：<a href="https://link.medium.com/epApulKUS9" target="_blank" rel="noopener">https://link.medium.com/epApulKUS9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/19/Day14-%E5%9C%A8-Ruby-%E4%B8%AD%E4%BD%BF%E7%94%A8-Benchmark-%E6%AF%94%E8%BC%83%E5%93%AA%E5%80%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BC%83%E5%BF%AB/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;總算開始進入 Ruby 程式語言的世界中，再不寫點什麼，都快與鐵人賽報名的題目不相干，變成標題殺人惹 XD&lt;/p&gt;
&lt;p&gt;後續 Ruby on Rails 的相關文章，假定讀者為已經有 CRUD 基礎上(或有
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day13 - 一些 Git 指令</title>
    <link href="https://riverye.com/2020/09/18/Day13-%E4%B8%80%E4%BA%9B-Git-%E6%8C%87%E4%BB%A4/"/>
    <id>https://riverye.com/2020/09/18/Day13-一些-Git-指令/</id>
    <published>2020-09-17T16:00:00.000Z</published>
    <updated>2020-09-27T00:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>記錄工作上用過的一些 Git 指令，主要是在 terminal (終端機) 或 VScode 的介面操作，沒什麼在用 <a href="https://git-scm.com/docs/gitk" target="_blank" rel="noopener">gitk</a>、<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a>，覺得在 terminal 輸入看起來也比較厲害 XD</p><p>本篇以已會基本 Git 操作為基礎上，進行分享 (需已會 <code>git status</code> 、 <code>git add</code> 、 <code>git commit</code> 、 <code>git branch</code> 、 <code>git checkout</code> 、 <code>git push</code> 、 <code>git pull</code> 等操作)</p><hr><h2><span id="本篇以此-repo-為範例">本篇以此 </span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/River-Ye/demo_git.git</span><br></pre></td></tr></table></figure></p><h2><span id="查詢-remote-名稱和-url">查詢 remote 名稱和 URL</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure></p><h4><span id="超重要小技巧-可透過-git-remote-h-的方式看有哪些參數絕大部分指令皆能透過此技巧查詢參數或透過-tldr-git-remote-的方式看範例">超重要小技巧： 可透過 <code>git remote -h</code> 的方式，看有哪些參數，絕大部分指令皆能透過此技巧查詢參數或透過 <code>tldr git remote</code> 的方式看範例</span></h4><h2><span id="從既有-branch-建立新的-branch-並切到新的-branch">從既有 branch 建立新的 branch 並切到新的 branch</span></h2><p>情境： 假如我正在 master，想直接建立新的 branch 並切過去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch_name</span><br></pre></td></tr></table></figure></p><h2><span id="將既有-branch-移動到別的-branch-的位置">將既有 branch 移動到別的 branch 的位置</span></h2><p>情境： 我有一個 river_branch ，想移動到 master branch 的位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -f &lt;branch_name&gt; &lt;目的地branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">git branch -f river_branch master</span><br></pre></td></tr></table></figure></p><h2><span id="事情做到一半突然要切到不同-branch-處理時">事情做到一半，突然要切到不同 branch 處理時</span></h2><p>很常會遇到的情境，這些指令很常用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將手中的事情先藏起來 (非存到 add 或 commit 喔)</span></span><br><span class="line">git stash save -u <span class="string">"輸入要儲存的名稱，可寫中文"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出目前已儲存的 stash</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 stash 中的 stash@&#123;0&#125; 抓下來，且不刪除 stash@&#123;0&#125;</span></span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 stash 中的 stash@&#123;0&#125; 抓下來，同時刪除 stash@&#123;0&#125;</span></span><br><span class="line">git stash pop stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除 stash 中的 stash@&#123;0&#125;</span></span><br><span class="line">git stash drop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="切到遠端-branch">切到遠端 branch</span></h2><p>情境： 小菜有將 river_branch 上傳， Louis 要接手處理 (或一同開發)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git checkout river_branch</span><br></pre></td></tr></table></figure></p><h2><span id="強制覆蓋遠端-branch">強制覆蓋遠端 branch</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure></p><p>備註： 多人協作同 branch 的話，不建議這麼做，會被同事追殺</p><h2><span id="多人協作同-branch要-push-時發現上面有新的-commit-時">多人協作同 branch，要 push 時，發現上面有新的 commit 時</span></h2><p>每個人開發速度不一樣，有的人比較快，有的會比較慢，<br>當要 <code>push</code> 發現上面已經有新的 commit 時，可用以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure></p><p>備註： 可能會有 conflict (檔案衝突)，與對方確認哪些需保留，Local 解完衝突後，便能 <code>git push</code></p><h2><span id="用圖形化方式看-log-資訊">用圖形化方式看 log 資訊</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --all --graph</span><br></pre></td></tr></table></figure></p><p>備註： <code>--oneline</code>、<code>--all</code>、<code>--grpah</code> 這三個參數的放置沒有差</p><h4><span id="示意圖">示意圖</span></h4><p><img src="https://i.imgur.com/5SgPrI9.png" alt></p><h2><span id="local-和-remote-皆增加-tag">Local 和 remote 皆增加 tag</span></h2><p>假如： remote name 為 origin，default branch 為 master<br>情境： 將最新 remote 的 master 增加標籤 (tag)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git tag 20200913</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure></p><h4><span id="動作說明">動作說明：</span></h4><ol><li>先切到 Local master</li><li>將最新資料 pull 到 Local</li><li>在 Local master 增加 tag</li><li>將 tag 上傳到 remote origin</li></ol><h2><span id="查看兩個-tag-或-commit-間增加了哪些-pr">查看兩個 tag 或 commit 間增加了哪些 pr</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> old_tag_name..new_tag_name --pretty=<span class="string">'%s'</span> --reverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line"><span class="comment"># GitHub repo 設定中的 Allow merge commits 有打勾</span></span><br><span class="line">git <span class="built_in">log</span> 20200909..20200909-1 --pretty=<span class="string">'%s'</span> --reverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub repo 設定中的 Allow merge commits 沒打勾</span></span><br><span class="line">git <span class="built_in">log</span> 20200909-3..20200909-4 --pretty=<span class="string">'%s'</span> --reverse</span><br></pre></td></tr></table></figure></p><h4><span id="github-repo-設定">GitHub repo 設定</span></h4><p><img src="https://i.imgur.com/RWCQvdC.png" alt></p><h4><span id="範例圖-allow-merge-commits-有無打勾一次看">範例圖 (Allow merge commits 有無打勾一次看)</span></h4><p><img src="https://i.imgur.com/qRgMhkl.png" alt></p><h2><span id="查看兩個-commit-間所有檔案的差異-diff">查看兩個 commit 間所有檔案的差異 (diff)</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff commit1..commit2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">git diff 57cb9613c..77b628f47</span><br></pre></td></tr></table></figure></p><h2><span id="commit-後想反悔-恢復上一洞">commit 後想反悔 (恢復上一洞)</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想還原 11 次的話</span></span><br><span class="line">git reset HEAD~11</span><br></pre></td></tr></table></figure></p><h2><span id="撿別的-commit-過來使用">撿別的 commit 過來使用</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit</span><br></pre></td></tr></table></figure></p><h4><span id="超重要小技巧-可透過-git-cherry-pick-h-的方式看有哪些參數絕大部分指令皆能透過此技巧查詢參數或透過-tldr-git-cherry-pick-的方式看範例">超重要小技巧： 可透過 <code>git cherry-pick -h</code> 的方式，看有哪些參數，絕大部分指令皆能透過此技巧查詢參數或透過 <code>tldr git cherry-pick</code> 的方式看範例</span></h4><h2><span id="整理自己-branch-的-commit">整理自己 branch 的 commit</span></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rebase 互動模式很好用，網路已有詳細文章可參考</span></span><br><span class="line"></span><br><span class="line">rebase -i commit</span><br></pre></td></tr></table></figure></p><h2><span id="一定要知道的">一定要知道的</span></h2><p>平常不太會用到，需要時，卻很重要的存在<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭配之前所學，可用合體技搜尋 (若不清楚，可看 Linux 系列的文章)</span></span><br><span class="line">git reflog | rg <span class="string">'HEAD@'</span></span><br><span class="line">git reflog &gt;&gt; demo.log</span><br></pre></td></tr></table></figure></p><h2><span id="小結">小結</span></h2><p>會把一些常用指令設定 alias，像是把 <code>status</code> 設定成 <code>s</code>、 <code>branch</code> 設定成 <code>b</code> ...等，依照自己常輸入指令設定，可以省下不少時間</p><p>多善用 <code>-h</code> 和 <code>tldr</code> 看下有哪些參數、範例，搭配實作，會更快上手喔</p><h2><span id="參考資料">參考資料</span></h2><ol><li><a href="https://git-scm.com/book/zh-tw/" target="_blank" rel="noopener">Git-Book</a></li><li><a href="https://gitbook.tw/" target="_blank" rel="noopener">為你自己學 Git</a></li><li><a href="https://github.com/doggy8088/Learn-Git-in-30-days/" target="_blank" rel="noopener">30 天精通 Git 版本控管</a></li></ol><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10238939" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10238939</a><br>medium 文章連結：<a href="https://link.medium.com/Mmx5PSNfR9" target="_blank" rel="noopener">https://link.medium.com/Mmx5PSNfR9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/18/Day13-%E4%B8%80%E4%BA%9B-Git-%E6%8C%87%E4%BB%A4/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;記錄工作上用過的一些 Git 指令，主要是在 terminal (終端機) 或 VScode 的介面操作，沒什麼在用 &lt;a href=&quot;https://git-scm.com/docs/gitk&quot; targe
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
