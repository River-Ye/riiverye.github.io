<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://riverye.com/"/>
  <updated>2020-09-28T16:02:42.891Z</updated>
  <id>https://riverye.com/</id>
  
  <author>
    <name>River-Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day24 - Ruby on Rails 中的 Resque 的介紹與應用</title>
    <link href="https://riverye.com/2020/09/29/Day24-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Resque-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://riverye.com/2020/09/29/Day24-Ruby-on-Rails-中的-Resque-的介紹與應用/</id>
    <published>2020-09-28T16:00:00.000Z</published>
    <updated>2020-09-28T16:02:42.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote><p>Resque (pronounced like &quot;rescue&quot;) is a Redis-backed library for creating background jobs, placing those jobs on multiple queues, and processing them later.</p></blockquote><p>以上擷取自 <a href="https://github.com/resque/resque" target="_blank" rel="noopener">Resque GitHub</a> 介紹</p><p><a href="https://github.com/resque/resque" target="_blank" rel="noopener">Resque</a> 是非同步處理任務的 <a href="https://rubygems.org/gems/resque" target="_blank" rel="noopener">Gem</a>，類似的 Gem 還有 <a href="https://rubygems.org/gems/sidekiq" target="_blank" rel="noopener">Sidekiq</a>...等，以這 2 個 Gem 為例，皆是使用 Redis 儲存 Job，兩者差異會在此文比較 (Resque vs Sidekiq 比較)，下篇文章會改介紹 Sidekiq</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><h2 id="非同步處理">非同步處理</h2><p>使用者在瀏覽網頁時，舉凡像是操作到寄 Email、產生 PDF、匯入/匯出 Excel...等，不會希望網頁卡在那，等 Server 處理完後，才能繼續操作 (或要重新整理等)，此時會透過「非同步處理」的方式來實作，進而讓使用者可以邊瀏覽網頁時，Server 在背後處理，等完成後，再透通知使用者...</p><h2 id="介紹">介紹</h2><p>在 Resque 中，一個後台任務被抽象為由三種角色共同完成:</p><table><thead><tr><th>角色</th><th>說明</th></tr></thead><tbody><tr><td>Job    (任務)</td><td>1 個 Job 就是 1 個需要在後台完成的任務，1 個 Job 就是 1 個 Class</td></tr><tr><td>Queue  (佇列)</td><td>佇列是由 Redis 實現的，Resque 還提供了佇列管理器，可以實現將 Job 插入/取出佇列等功能</td></tr><tr><td>Worker (執行者)</td><td>當佇列中有 Job 時，Worker 取出 Job 並執行</td></tr></tbody></table><p>一個 Worker，可以處理 1 個佇列，也可以處理多個佇列，並且可以透過增加 Worker 的程序/執行緒數來加快佇列的執行速度</p><h2 id="如何安裝">如何安裝</h2><p>放在 Gemfile 檔案中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/804f51b8641ac78dd23afbff65eabf9a7b02e91f" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'resque'</span>, <span class="string">'~&gt; 2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>加上 Web 介面，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/297c3b91ed27008f0e665cd8a48ba2a8c79991f6" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'resque/server'</span></span><br><span class="line">mount Resque::Server.new, <span class="symbol">at:</span> <span class="string">'/resque'</span></span><br></pre></td></tr></table></figure></p><p>Rakefile 檔案中，加入以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/1eda4b8920175c14e81e0e189b75755544388e3c" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rakefile</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'resque/tasks'</span></span><br><span class="line">task <span class="string">'resque:setup'</span> =&gt; <span class="symbol">:environment</span></span><br></pre></td></tr></table></figure></p><h2 id="寫個-resque-確認能否執行">寫個 Resque 確認能否執行</h2><p>可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/13/commits/82d479d0c1f2bb1024990a6775374f63e62daf68" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line">Resque.enqueue(HelloWorldWorker, @user.id, <span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># app/jobs/hello_world_worker.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldWorker</span></span></span><br><span class="line">  @queue = <span class="symbol">:hello_world_worker</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">perform</span><span class="params">(user_id, string)</span></span></span><br><span class="line">    puts <span class="string">"<span class="subst">#&#123;user_id&#125;</span> say <span class="subst">#&#123;string&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="如何執行">如何執行</h2><p>終端機輸入</p><p>備註: 更多參數說明，請看 <a href="https://github.com/resque/resque" target="_blank" rel="noopener">Resque GitHub</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUEUE=* INTERVAL=1 rake resque:work</span><br></pre></td></tr></table></figure></p><h4 id="更多指令">更多指令</h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resque -h</span><br><span class="line"></span><br><span class="line">Usage: resque [options] COMMAND</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -r, --redis [HOST:PORT]          Redis connection string</span><br><span class="line">    -N, --namespace [NAMESPACE]      Redis namespace</span><br><span class="line">    -h, --<span class="built_in">help</span>                       Show this message</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  remove WORKER   Removes a worker</span><br><span class="line">  <span class="built_in">kill</span> WORKER     Kills a worker</span><br><span class="line">  list            Lists known workers</span><br></pre></td></tr></table></figure></p><h4 id="resque-web-介面">Resque Web 介面</h4><p><img src="https://i.imgur.com/MOVlxHr.png" alt></p><h2 id="resque-vs-sidekiq-比較">Resque vs Sidekiq 比較</h2><p>先說結論，較新的專案，會直接使用 Sidekiq，Resque 已不在考慮中...</p><p>Resque 是在 2009 年<a href="https://github.blog/2009-11-03-introducing-resque/" target="_blank" rel="noopener">發布</a>，而 Sidekiq 則是 2012 年<a href="https://en.wikipedia.org/wiki/Sidekiq" target="_blank" rel="noopener">發布</a>，Sidekiq 更新速度、效能也比 Resque 好，連 <a href="https://github.com/mperham/sidekiq" target="_blank" rel="noopener">Sidekiq GitHub</a> 介紹都直接說我比 Resque 快，還有一頁是<a href="https://github.com/mperham/sidekiq/wiki/Testimonials" target="_blank" rel="noopener">使用者感言</a>，裡面搜尋「Resque」也能看到被比較的心得感言。</p><p>若想看細節差異，可參考 Stack Overflow 這篇 <a href="https://stackoverflow.com/questions/11580954/resque-vs-sidekiq" target="_blank" rel="noopener">Resque vs Sidekiq?</a>，另外還有找到這篇 <a href="https://dev.to/molly_struve/switching-from-resque-to-sidekiq-3b04" target="_blank" rel="noopener">Switching From Resque to Sidekiq</a>，看完便知道為何現在較少用過 (甚至沒聽過 Resque) 的原因...</p><h2 id="參考資料">參考資料</h2><ol><li><a href="https://ihower.tw/rails/background-process.html" target="_blank" rel="noopener">Ruby on Rails 實戰聖經 - 非同步處理</a></li><li><a href="http://railscasts.com/episodes/271-resque" target="_blank" rel="noopener">RailsCasts - #271 Resque</a></li></ol><hr><h2 id="小結">小結</h2><p>剛進入公司時，一開始對於 Redis、Resque、Sidekiq 三者之間傻傻分不清，不知彼此的關係，以及為何要同時存在 2 套背景處理的 Gem，隨工作一段時間，加上這次鐵人賽寫相關文章時，才搞懂為何會有這樣的配置，隨專案越來越大，不斷增加新功能同時，舊 code 有可能變成舊技術 (甚至技術債)，就像現在 Ruby on Rails 最新版本為 <code>6.0.3.3</code> ，幾年後，也會變成舊版本，說不定寫法會大改也不是不無可能，更別提其他技術，也會有同樣的情況發生，端看團隊如何解決這件事，要是仍能正常運作且沒什麼問題的話，不一定要換或升到最新，除非有遇到版本相容性、或其他問題時，才會依當時情境想新的解決方案...</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10245939" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10245939</a><br>medium 文章連結：<a href="https://link.medium.com/Qz9SocIv99" target="_blank" rel="noopener">https://link.medium.com/Qz9SocIv99</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/29/Day24-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Resque-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Resque (pronounced like &amp;quot;rescue&amp;quot;) is a Redis-backed library for creating background jobs, plac
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day23 - Ruby on Rails 中的 Redis 的介紹與應用</title>
    <link href="https://riverye.com/2020/09/28/Day23-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Redis-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://riverye.com/2020/09/28/Day23-Ruby-on-Rails-中的-Redis-的介紹與應用/</id>
    <published>2020-09-27T16:00:00.000Z</published>
    <updated>2020-09-27T16:02:11.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><a href="https://redis.io/" target="_blank" rel="noopener">Redis</a> 是 <a href="https://zh.wikipedia.org/wiki/BSD%E6%8E%88%E6%AC%8A%E6%A2%9D%E6%AC%BE" target="_blank" rel="noopener">BSD 授權</a>的開源軟體，屬於 NoSQL 家族成員之一，是 in-memory 的 key-value 資料庫，基於資料存在記憶體的特性，其存取速度比硬碟快許多，常被應用在需要快取 (Cache) 的場合，也可使用在 Database 及簡單的 Message broker，與 Memcached 比，穩定性更好</p><p>以下擷取自 <a href="https://zh.wikipedia.org/wiki/Redis" target="_blank" rel="noopener">Wiki</a> 介紹</p><blockquote><p>Redis是一個使用ANSI C編寫的開源、支援網路、基於記憶體、可選永續性的鍵值對儲存資料庫。根據月度排行網站DB-Engines.com的資料，Redis是最流行的鍵值對儲存資料庫</p></blockquote><p>(謎之聲，有興趣想知道記憶體與硬碟的速度差異，可 <a href="https://www.google.com/search?q=ram+ssd+speed+comparison" target="_blank" rel="noopener">Google</a> 下，題外話，之前會用 RAM disk 在上面執行作業系統、軟體等，速度有感提升</p><hr><h2 id="特色">特色</h2><ol><li>效能好 (與 database 比)、穩定性高 (與 Memcached 比)</li><li>資料是儲存在 Memory (記憶體)</li><li>Single Thread I/O Multiplex</li></ol><p>由於資料是儲存在 Memory 上，Memory 特性為斷電 (或關機、重開機) 會造成資料遺失，Redis 可以設定資料同步到硬碟，但如果剛好遇到同步前就斷電的話，資料就掰掰惹，或遇到 CPU、Memory 接近滿載，同時又有大量資料需要透過 Redis 處理，也可能會遇到資料遺失。</p><p>Redis 是 Single Thread，這點非常重要，不論 Server CPU Core (核心) 為幾核，1 個 Redis 只會使用到 1 個 CPU Core (核心)，無法同時運算多個 request，當有 1 個 request 佔用 CPU 太久時，會導致無法回應其他 connection request 而造成後面塞車。</p><p>(謎之聲，Redis 背後運作原理、處理機制等，網路上有許多資料可以參考，不在這一一描述</p><hr><h2 id="如何安裝">如何安裝</h2><p>在終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install redis</span><br></pre></td></tr></table></figure></p><p>在 Ruby on Rails 專案的 Gemfile 加入<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'redis'</span>, <span class="string">'~&gt; 4.2'</span>, <span class="string">'&gt;= 4.2.2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 Rails 6.0.3.3 為例，預設 Gemfile 中，是註解，取消註解，再 bundle 即可</span></span><br></pre></td></tr></table></figure></p><h2 id="常用指令介紹">常用指令介紹</h2><h4 id="進入-redis-終端機-command-line-interface-畫面">進入 Redis 終端機 (Command-Line Interface) 畫面</h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在終端機輸入</span></span><br><span class="line"></span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure></p><h4 id="開啟-redis-server">開啟 redis server</h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在終端機輸入</span></span><br><span class="line"></span><br><span class="line">redis-server</span><br></pre></td></tr></table></figure></p><h4 id="redis-性能測試">redis 性能測試</h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在終端機輸入</span></span><br><span class="line"></span><br><span class="line">redis-benchmark</span><br></pre></td></tr></table></figure></p><h4 id="查看-redis-資訊-information">查看 redis 資訊 (information)</h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 進入 redis-cli 後，輸入</span></span><br><span class="line"></span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:6.0.8</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:25b38681eed52ae</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Darwin 19.6.0 x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:kqueue</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:4.2.1</span><br><span class="line">process_id:1552</span><br><span class="line">run_id:1ea27ec21bc37fea806bb2ccf213132176f</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:15272</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:7122746</span><br><span class="line">executable:/usr/<span class="built_in">local</span>/opt/redis/bin/redis-server</span><br><span class="line">config_file:/usr/<span class="built_in">local</span>/etc/redis.conf</span><br><span class="line">io_threads_active:0</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="設定-redis-相關參數配置">設定 Redis 相關參數(配置)</h4><p>從 <code>info</code> 的 <code>config_file</code> 這欄，可看到 <code>redis.conf</code> 檔案路徑，該檔案內的註解很詳細，Google 下也有相關參數設定說明可參考</p><h3 id="set-get">SET, GET</h3><p><code>SET</code> 設定 key-value</p><p><code>GET</code> 從 key 取 value<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET river <span class="string">'hi'</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET river</span><br><span class="line"><span class="string">"hi"</span></span><br></pre></td></tr></table></figure></p><h3 id="hset-hget">HSET, HGET</h3><p><code>HSET</code> 設定 hash key-value</p><p><code>HGET</code> 取 hash key 的 value<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET order1 name <span class="string">'order_name'</span> price 500 note <span class="string">'nothing'</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; HGET order1 note</span><br><span class="line"><span class="string">"nothing"</span></span><br><span class="line">127.0.0.1:6379&gt; HGET order1 price</span><br><span class="line"><span class="string">"500"</span></span><br></pre></td></tr></table></figure></p><h3 id="incr-decr">INCR, DECR</h3><p>針對指定 key 的 value 進行數字加減</p><p><code>INCR</code> 針對 key 的 value +1</p><p><code>DECR</code> 針對 key 的 value -1</p><p>備註: 若 value 型別不是數字，會回 <code>(error) WRONGTYPE Operation against a key holding the wrong kind of value</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET num <span class="string">'4'</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECR num</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; INCR num</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure></p><p>更多指令請參考<a href="https://redis.io/commands" target="_blank" rel="noopener">官方commands</a> (文件有針對每個指令提供範本與說明)</p><h2 id="操作範例">操作範例</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入，進入 Redis Command-Line Interface</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ping                             <span class="comment"># 測試連線是否正常，回傳 PONG 代表正常</span></span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> river <span class="string">'https://riverye.com/'</span> <span class="comment"># 設定 key 是 "river", value 是 "https://riverye.com/"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get river                        <span class="comment"># 讀取 key "river"</span></span><br><span class="line"><span class="string">"https://riverye.com/"</span></span><br><span class="line">127.0.0.1:6379&gt; del river                        <span class="comment"># 刪除 key "river"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get river</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> say hi EX 5                  <span class="comment"># 設定 key "set" 存在 5 秒, EX 為設定期限 (單位是秒)</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get say                          <span class="comment"># 上面設定好，在 5 秒內查詢</span></span><br><span class="line"><span class="string">"hi"</span></span><br><span class="line">127.0.0.1:6379&gt; get say                          <span class="comment"># 5 秒後，讀取 key "say" ，會變 nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; hmset order name <span class="string">'order_name'</span> price 999 note <span class="string">'不知寫什麼'</span> <span class="comment"># 設定 雜湊表 "order"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall order <span class="comment"># 讀取 雜湊表 "order"</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"order_name"</span></span><br><span class="line">3) <span class="string">"price"</span></span><br><span class="line">4) <span class="string">"999"</span></span><br><span class="line">5) <span class="string">"note"</span></span><br><span class="line">6) <span class="string">"\xe4\xb8\x8d\xe7\x9f\xa5\xe5\xaf\xab\xe4\xbb\x80\xe9\xba\xbc"</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p><p>在 <code>rails console</code> 操作 Redis<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 終端機輸入</span></span><br><span class="line">rails c</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line"></span><br><span class="line">r = Redis.new</span><br><span class="line">r.hgetall(<span class="string">"order"</span>)</span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#      "name" =&gt; "order_name",</span></span><br><span class="line"><span class="comment">#     "price" =&gt; "999",</span></span><br><span class="line"><span class="comment">#      "note" =&gt; "不知寫什麼"</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="示範在-rails-console-操作-redis">示範在 Rails console 操作 Redis</h4><p><img src="https://i.imgur.com/uHfCF2N.png" alt></p><h2 id="參考資料">參考資料</h2><ol><li><a href="https://www.jianshu.com/p/238372c25669" target="_blank" rel="noopener">深入分析Redis特点及应用场景</a></li><li><a href="https://jed1978.github.io/2018/05/11/Redis-Programming-CSharp-Basic-1.html" target="_blank" rel="noopener">Redis系列 - C#存取Redis (上)</a></li><li><a href="https://blog.techbridge.cc/2016/06/18/redis-introduction/" target="_blank" rel="noopener">資料庫的好夥伴：Redis</a></li><li><a href="https://www.itread01.com/content/1545424390.html" target="_blank" rel="noopener">Redis資料庫看這一篇文章就夠了</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU2ODcwMzk2MQ==&amp;mid=2247483718&amp;idx=1&amp;sn=53c686b2943460f53f189ee886d856c9" target="_blank" rel="noopener">Redis常见面试题连环问，你能回答到第几问？（上）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU2ODcwMzk2MQ==&amp;mid=2247483743&amp;idx=1&amp;sn=4f0fa3c8e755b054bbb553738419e651" target="_blank" rel="noopener">Redis常见面试题连环问，你能回答到第几问？（中）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU2ODcwMzk2MQ==&amp;mid=2247483746&amp;idx=1&amp;sn=5ce6047ef7367965b52fd46513f1dc2f" target="_blank" rel="noopener">Redis常见面试题连环问，你能回答到第几问？（下）</a></li></ol><hr><h2 id="小結">小結</h2><p>會在許多場景看到 Redis 出沒，全端與後端必備技能之一，舉個例子來說，之前在處理不同頁面皆要顯示同資訊「未處理訂單數量」，是透過打 API 詢問未處理的訂單資訊，接著與 Database 比對該訂單名稱是否被建立過、訂單的商品數量與 Database 中商品庫存是否足夠...等，由 worker 處理，經過一連串處理後，才能計算出實際「未處理訂單數量」，另個頁面是儀表板頁面，只需顯示「未處理訂單數量」，這時透過 Redis 處理，將計算結果存在 Redis ，另個頁面直接取值顯示即可</p><p>上述例子為實際應用過的情境之一，若對 Redis 還不熟悉也不用太緊張，上方參考連結的文章，由淺入深的排序，可以從數字 1 開始往下看，過程中搭配實際操作練習，會更快上手喔</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10245246" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10245246</a><br>medium 文章連結：<a href="https://link.medium.com/V8n6I2TQ79" target="_blank" rel="noopener">https://link.medium.com/V8n6I2TQ79</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/28/Day23-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Redis-%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis&lt;/a&gt; 是 &lt;a href=&quot;https://zh.wikipedia.org/wiki/BSD%E6%
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day22 - Ruby on Rails 中的 Race Condition</title>
    <link href="https://riverye.com/2020/09/27/Day22-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Race-Condition/"/>
    <id>https://riverye.com/2020/09/27/Day22-Ruby-on-Rails-中的-Race-Condition/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2020-09-26T16:01:18.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3" target="_blank" rel="noopener">Race Condition</a> 可翻譯成「競爭條件」，在中文版 <a href="https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3" target="_blank" rel="noopener">Wiki</a> 上看不懂的話，可看英文版 <a href="https://en.wikipedia.org/wiki/Race_condition" target="_blank" rel="noopener">Wiki</a> 的描述，會比較清楚，以下為白話文翻譯:</p><blockquote><p>同筆資料同時被 2 thread 以上操作，導致結果的不正確</p></blockquote><h3 id="常見情境可能有">常見情境可能有:</h3><ol><li>搶票系統、搶購限量商品時 (ex: 限量 100 張票，卻賣了 101 張)</li><li>使用者送出資料時，剛好這時 server 負載較重 (處理比較慢)，使用者以為還沒處理完成，於是在前端連點，雖然 <code>model</code> 有做 <code>validates :email, uniqueness: true</code> ，但 DB 沒再次驗證，也有可能發生此問題  (可參考: <a href="https://ihower.tw/rails/activerecord-lifecycle.html" target="_blank" rel="noopener">ActiveRecord - 資料驗證及回呼</a>)</li></ol><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2 id="如何重現-race-condition">如何重現 Race Condition</h2><p>以 Ruby on Rails 為例，想看 Race Condition 本人的話</p><p>在 <code>rails console</code> 貼上以下這段 (本文以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a>)<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重現 Race Condition</span></span><br><span class="line"><span class="comment"># 一開始 Order.last.total_price = 0</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">threads = [<span class="number">100</span>, <span class="number">10</span>].map <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">  Thread.new <span class="keyword">do</span> <span class="params">|_t|</span></span><br><span class="line">    order = Order.last</span><br><span class="line">    order.total_price += n</span><br><span class="line">    order.save</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">threads.each(&amp;<span class="symbol">:join</span>)</span><br><span class="line">puts <span class="string">"預期結果是: 110, 實際結果是: <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 10</span></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 100</span></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述每次執行，實際結果會不一樣</span></span><br></pre></td></tr></table></figure></p><h4 id="race-condition-本人-上述例子每次執行得到結果會不同">Race Condition 本人 (上述例子，每次執行，得到結果會不同)</h4><p><img src="https://i.imgur.com/pL0vOzN.gif" alt></p><h2 id="如何處理">如何處理</h2><p>將要進行操作的 table 先鎖住 (<a href="https://en.wikipedia.org/wiki/Lock_(computer_science)" target="_blank" rel="noopener">Lock</a>)，處理方式可分成 2 種：</p><ol><li>悲觀鎖 (Pessimistic locking)</li><li>樂觀鎖 (Optimistic locking)</li></ol><h3 id="悲觀鎖-pessimistic-locking">悲觀鎖 (Pessimistic locking)</h3><p>悲觀鎖，如其名，不相信任何人，一次只允許一筆資料針對 table 操作，此時會先鎖住該 table (鎖又可分成表鎖、行鎖，這邊以行鎖為例)，避免被人竄改，其他人要操作只能等他被釋放後，才能進行操作</p><p>白話文就是所有人排隊領號碼牌，叫號依序處理，能解決 Race Condition，但也會影響效能，畢竟一次只能處理一筆資料</p><p>Ruby on Rails 中，悲觀鎖，可使用 <code>with_lock</code> 處理，實作方式如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 悲觀鎖</span></span><br><span class="line"><span class="comment"># 一開始 Order.last.price = 0</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">threads = [<span class="number">100</span>, <span class="number">10</span>].map <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">  Thread.new <span class="keyword">do</span> <span class="params">|_t|</span></span><br><span class="line">    order = Order.last</span><br><span class="line">    order.with_lock <span class="keyword">do</span></span><br><span class="line">      order.total_price += n</span><br><span class="line">      order.save</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">threads.each(&amp;<span class="symbol">:join</span>)</span><br><span class="line">puts <span class="string">"預期結果是: 110, 實際結果是: <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 110, 實際結果是: 110</span></span><br></pre></td></tr></table></figure></p><p>上述確實解決了 Race Condition ，但變成其他人要排隊等待 (可看下方 GIF)，使用悲觀鎖需在效能與資料正確性之間做取捨，可依問題產生嚴重性、衍伸損失等進行綜合評估決定是否使用</p><h4 id="排隊等待畫面">排隊等待畫面</h4><p><img src="https://i.imgur.com/gNwpDiO.gif" alt><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 悲觀鎖</span></span><br><span class="line"><span class="comment"># 示範如何鎖住 table (行鎖)</span></span><br><span class="line"><span class="comment"># console 1</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line">order = Order.last</span><br><span class="line">order.with_lock <span class="keyword">do</span></span><br><span class="line">  puts <span class="string">"total_price is <span class="subst">#&#123;order.total_price&#125;</span>"</span></span><br><span class="line">  order.total_price += <span class="number">10</span></span><br><span class="line">  byebug</span><br><span class="line">  order.save</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># console 2</span></span><br><span class="line">puts <span class="string">"total_price is <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"><span class="comment"># 行鎖: 其他 Order 不受影響</span></span><br><span class="line">Order.first.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line">Order.last.increment!(<span class="symbol">:total_price</span>)</span><br><span class="line"><span class="comment"># 此時應該會卡住，因為 console 1 with_lock 關係，需等 console 1 釋放 order 後， console 2 才能針對該筆資料進行操作</span></span><br><span class="line">puts <span class="string">"預期結果是: 11, 實際結果是: <span class="subst">#&#123;Order.last.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 11, 實際結果是: 11</span></span><br></pre></td></tr></table></figure></p><h3 id="樂觀鎖-optimistic-locking">樂觀鎖 (Optimistic locking)</h3><p>與悲觀鎖意思相反，認為資料不會頻繁被操作，因此允多人針對 table 操作，不代表我就爛什麼都不管，在 Ruby on Rails 中有提供 <code>lock_version</code> 這方法，可加在想使用樂觀鎖的 table 上，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/11/commits/cd1853d168d84bc6098efd0148138911335e8e50" target="_blank" rel="noopener">commit</a></p><p>Ruby on Rail 中，樂觀鎖，可使用 <code>lock_version</code> 處理，實作方式如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 樂觀鎖</span></span><br><span class="line"><span class="comment"># 一開始 Order.last.total_price = 0</span></span><br><span class="line">Order.last.update(<span class="symbol">total_price:</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  order1 = Order.last</span><br><span class="line">  order2 = Order.last</span><br><span class="line">  order1.total_price += <span class="number">10</span></span><br><span class="line">  order1.save</span><br><span class="line">  order2.total_price += <span class="number">100</span></span><br><span class="line">  order2.save <span class="comment"># ActiveRecord::StaleObjectError: Attempted to update a stale object: Order.</span></span><br><span class="line"><span class="keyword">rescue</span> ActiveRecord::StaleObjectError =&gt; e</span><br><span class="line">  <span class="comment"># 要自己處理異常</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts <span class="string">"預期結果是: 10, 實際結果是: <span class="subst">#&#123;Order.last.reload.total_price&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 預期結果是: 10, 實際結果是: 10</span></span><br></pre></td></tr></table></figure></p><p>樂觀鎖好處是能同時處理多筆資料，但錯誤的話，會收到 <code>ActiveRecord::StaleObjectError</code>，要自己處理，像是可以寫個 <code>retry</code> 或報錯誤訊息，讓工程師知道</p><h2 id="參考資料">參考資料</h2><ol><li><a href="https://rails.ruby.tw/active_record_querying.html#%E6%9B%B4%E6%96%B0%E6%99%82%E9%8E%96%E5%AE%9A%E8%A8%98%E9%8C%84" target="_blank" rel="noopener">Active Record 查詢 — Ruby on Rails 指南</a></li><li><a href="https://mgleon08.github.io/blog/2017/11/01/optimistic-locking-and-pessimistic-locking/" target="_blank" rel="noopener">樂觀鎖 與 悲觀鎖 Optimistic Locking &amp; Pessimistic Locking</a></li><li><a href="https://khiav223577.github.io/blog/2019/02/07/%E4%B8%8D%E4%BD%BF%E7%94%A8-lock-%E5%8F%88%E8%A6%81%E9%81%BF%E5%85%8D-race-condition%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%97%8E%EF%BC%9F/" target="_blank" rel="noopener">不使用 lock 又要避免 race condition，可能嗎？</a></li><li><a href="https://karolgalanciak.com/blog/2020/06/07/race-conditions-on-rails/" target="_blank" rel="noopener">Race Conditions on Rails</a></li><li><a href="https://blog.niclin.tw/2020/09/11/avoids-race-condition-best-practice-in-ruby-on-rails-1/" target="_blank" rel="noopener">Rails 中避免 race condition 的最佳實踐(一)</a></li><li><a href="https://blog.niclin.tw/2020/09/11/avoids-race-condition-best-practice-in-ruby-on-rails-2/" target="_blank" rel="noopener">Rails 中避免 race condition 的最佳實踐(一)</a></li></ol><hr><h2 id="小結">小結</h2><p>解決 Race Condition 後，需留意是否可能衍伸另個問題，像是 Deadlock 可看 Wiki <a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%B8%E5%AE%B6%E5%B0%B1%E9%A4%90%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">哲學家就餐問題</a> 這篇，推薦看上方參考資料，可看看不同大大們對於 Race Condition 的介紹與解法</p><p>本篇特別感謝 David 、 Johnson(詹昇) 協助 (依英文字母順序排列)</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10244812" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10244812</a><br>medium 文章連結：<a href="https://link.medium.com/AUCVQnUb69" target="_blank" rel="noopener">https://link.medium.com/AUCVQnUb69</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/27/Day22-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Race-Condition/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Race Cond
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day21 - Ruby on Rails 中常見的 N+1 與解法</title>
    <link href="https://riverye.com/2020/09/26/Day21-Ruby-on-Rails-%E4%B8%AD%E5%B8%B8%E8%A6%8B%E7%9A%84-N-1-%E8%88%87%E8%A7%A3%E6%B3%95/"/>
    <id>https://riverye.com/2020/09/26/Day21-Ruby-on-Rails-中常見的-N-1-與解法/</id>
    <published>2020-09-25T16:00:00.000Z</published>
    <updated>2020-09-25T16:00:50.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在 Ruby on Rails 中，透過 ORM (Object Relational Mapping) 使我們可以輕易地對不同表進行操作，方便之餘，一不小心就可能會寫出 N+1</p><ol><li>到底什麼是 N+1 ?</li><li>該如何解決 ?</li></ol><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2 id="介紹">介紹</h2><p>N+1 指的是 SQL 撈資料時，明明可以一次撈完 (ex: 3 筆資料)，卻使用逐筆撈資料的方式處理 (每次只撈 1 筆資料)</p><p>白話文: 使用者要在同間商店買 3 件商品，可一次採買完成，卻分成 3 次購買 <s>(除非是想收集發票</s></p><p>分 3 次購買便是 N ，而 +1 則是使用者決定要去買的那次本身</p><p>導致總共撈了 3+1 次，嚴重影響效能</p><p>直接看例子，會比較好懂，想看 N+1 本人的話，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/1d1cb51c593370441d7970d191fb90de5d36e70f" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/user.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_many <span class="symbol">:orders</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/models/order.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> &lt; ApplicationRecord</span></span><br><span class="line">  belongs_to <span class="symbol">:user</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @users = User.all</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/views/users/index.html.erb:24</span></span><br><span class="line">&lt;td&gt;&lt;%= user.orders.sum(&amp;<span class="symbol">:total_price</span>) %&gt;&lt;<span class="regexp">/td&gt;o</span></span><br></pre></td></tr></table></figure></p><p>上述可以正常運作，但也造成了 N+1 的問題發生<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Order 被撈了 3 次</span></span><br><span class="line"></span><br><span class="line">User Load (0.3ms)  SELECT <span class="string">"users"</span>.* FROM <span class="string">"users"</span></span><br><span class="line">Order Load (0.2ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span>  [[<span class="string">"user_id"</span>, 1]]</span><br><span class="line">Order Load (0.2ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span>  [[<span class="string">"user_id"</span>, 2]]</span><br><span class="line">Order Load (0.3ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> = <span class="variable">$1</span>  [[<span class="string">"user_id"</span>, 3]]</span><br></pre></td></tr></table></figure></p><h4 id="n1-本人">N+1 本人</h4><p><img src="https://i.imgur.com/l6z6MrX.png" alt></p><h2 id="如何解決-n1">如何解決 N+1</h2><p>最簡單方法，使用 <code>includes</code>，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/75b3afab818d2752f3a484b251ac3f06cf2032e7" target="_blank" rel="noopener">commit</a></p><p>雖然每次會撈回整筆 orders 資訊 (假如我只需要 <code>order.total_price</code> 的資訊，其餘欄位皆不用的話)，會撈比較多東西回來，資料量如果不多的話，<code>includes</code> 是一種解法，資料量多時，會有不同解法 (未來有機會再另寫文章探討<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">  @users = User.includes(<span class="symbol">:orders</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Order 變成一次查詢完畢</span></span><br><span class="line"></span><br><span class="line">User Load (0.2ms)  SELECT <span class="string">"users"</span>.* FROM <span class="string">"users"</span></span><br><span class="line">Order Load (0.4ms)  SELECT <span class="string">"orders"</span>.* FROM <span class="string">"orders"</span> WHERE <span class="string">"orders"</span>.<span class="string">"user_id"</span> IN (<span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span>)  [[<span class="string">"user_id"</span>, 1], [<span class="string">"user_id"</span>, 2], [<span class="string">"user_id"</span>, 3]]</span><br></pre></td></tr></table></figure></p><h4 id="用-includes-解-n1">用 <code>includes</code> 解 N+1</h4><p><img src="https://i.imgur.com/C93NG8q.png" alt></p><h2 id="如何知道哪些地方有-n1">如何知道哪些地方有 N+1</h2><p>可使用 <a href="https://github.com/flyerhzm/bullet" target="_blank" rel="noopener">Bullet</a> 這個 <a href="https://rubygems.org/gems/bullet" target="_blank" rel="noopener">Gem</a>，並設定提醒視窗，方便知道是否有 N+1 的問題發生</p><h3 id="安裝方式">安裝方式</h3><p>在 Gemfile 加入以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/d409f928747002ede108addde6c845b4da74a313" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'bullet'</span>, <span class="symbol">group:</span> <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>接著在 <code>development.rb</code> 檔案增加參數設定，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/10/commits/09ca49777155f0bcadfa8449270da2ed87aa2b69" target="_blank" rel="noopener">commit</a></p><p>備註: 更多設定可至<a href="https://github.com/flyerhzm/bullet" target="_blank" rel="noopener">官方網站</a>查詢<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb</span></span><br><span class="line"></span><br><span class="line">Bullet.enable = <span class="literal">true</span></span><br><span class="line">Bullet.bullet_logger = <span class="literal">true</span></span><br><span class="line">Bullet.console = <span class="literal">true</span></span><br><span class="line">Bullet.add_footer = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接著重啟 rails server</span></span><br></pre></td></tr></table></figure></p><h4 id="若有-n1-會有提醒視窗">若有 N+1 會有提醒視窗</h4><p><img src="https://i.imgur.com/H4JCQ68.png" alt></p><h2 id="參考資料">參考資料</h2><p><a href="https://mgleon08.github.io/blog/2016/01/10/ruby-on-rails-include-join-avoid-n-1-query/" target="_blank" rel="noopener">Ruby on Rails - 用 Include 和 Join 避免 N+1 Query</a></p><hr><h2 id="小結">小結</h2><p>造成網站效能拖慢有許多可能，N+1 只是其中一種</p><p>本篇是淺談其中的 1 種解法，寫這篇時，發現類似文章不下 5 篇以上，若想深入了解，歡迎善用 Google</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10244142" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10244142</a><br>medium 文章連結：<a href="https://link.medium.com/w4c3ApZw49" target="_blank" rel="noopener">https://link.medium.com/w4c3ApZw49</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/26/Day21-Ruby-on-Rails-%E4%B8%AD%E5%B8%B8%E8%A6%8B%E7%9A%84-N-1-%E8%88%87%E8%A7%A3%E6%B3%95/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 Ruby on Rails 中，透過 ORM (Object Relational Mapping) 使我們可以輕易地對不同表進行操作，方便之餘，一不小心就可能會寫出 N+1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到底什麼是 N+1 ?&lt;/l
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day20 - Ruby on Rails 測試篇 - Cucumber (內文有範例教如何寫中文測試)</title>
    <link href="https://riverye.com/2020/09/25/Day20-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-Cucumber-%E5%85%A7%E6%96%87%E6%9C%89%E7%AF%84%E4%BE%8B%E6%95%99%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6/"/>
    <id>https://riverye.com/2020/09/25/Day20-Ruby-on-Rails-測試篇-Cucumber-內文有範例教如何寫中文測試/</id>
    <published>2020-09-24T16:00:00.000Z</published>
    <updated>2020-09-24T16:01:11.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>前一篇介紹了 <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">RSpec</a> <a href="https://rubygems.org/gems/rspec-rails" target="_blank" rel="noopener">Gem</a>，這次換介紹 <a href="https://github.com/cucumber/cucumber-ruby" target="_blank" rel="noopener">Cucumber</a> 這個 <a href="https://rubygems.org/gems/cucumber-rails" target="_blank" rel="noopener">Gem</a></p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2 id="介紹">介紹</h2><h4 id="q1-心中或許會有疑問說已經有-rspec-為何還需要-cucumber-增加測試的複雜度">Q1. 心中或許會有疑問說，已經有 RSpec 為何還需要 Cucumber 增加測試的複雜度?</h4><p>Cucumber 更像是讓人類看得懂的語言，來描述要測試的事情，且支援多種語系寫法，像是可以用中文寫測試，讓 PM 與客戶看得懂，也能成為將來驗收的依據</p><h4 id="q2-可以只寫-cucumber-不寫-rspec-嗎">Q2. 可以只寫 Cucumber 不寫 RSpec 嗎?</h4><p>小孩紙才做選擇，我全都要，這就要問施主你的選擇惹 XD</p><h2 id="如何安裝">如何安裝</h2><p>放在 <code>:test</code> 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/6ffbf593399e7dc4522c73d68aafba6a47d340bd" target="_blank" rel="noopener">commit</a></p><p>參考資料: <a href="https://cucumber.io/docs/installation/ruby/" target="_blank" rel="noopener">Cucumber Installation</a>，<strong>官方文件有提醒 Ruby on Rails 的安裝方式與 Ruby 安裝方式不同喔!!</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'cucumber-rails'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">gem <span class="string">'database_cleaner'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>上述 <code>bundle</code> 完成後，可輸入 <code>rails g -h</code> 會看到以下資訊<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可輸入 rails g -h | grep -B 2 cucumber</span></span><br><span class="line"></span><br><span class="line">Cucumber:</span><br><span class="line">  cucumber:install</span><br></pre></td></tr></table></figure></p><p>接著再終端機輸入，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/172e3b230dd9c9cb350959c5388d99998b73e2b8" target="_blank" rel="noopener">commit</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rails generate cucumber:install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可縮寫成</span></span><br><span class="line">rails g cucumber:install</span><br></pre></td></tr></table></figure></p><h2 id="寫個-cucumber-中文測試範例">寫個 Cucumber 中文測試範例</h2><p>由於之前已經透過 <code>scaffold</code> 建立 User</p><p>以下示範寫個中文測試，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/61b7859c504fda88b457ece8fc2144bdfe17febd" target="_blank" rel="noopener">commit</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># features/user.feature</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#language: zh-TW</span></span><br><span class="line">@user</span><br><span class="line">功能: 建立使用者</span><br><span class="line">  這是示範的範例</span><br><span class="line">  支援中英文寫法</span><br><span class="line"></span><br><span class="line">  場景: 能建立使用者</span><br><span class="line">    假如 一開始沒有使用者</span><br><span class="line">    假如 有一位使用者的姓名是<span class="string">"小菜"</span></span><br><span class="line">    而且 該使用者的信箱是<span class="string">"river@riverye.com"</span></span><br><span class="line">    而且 該使用者的電話與地址資訊如下<span class="symbol">:</span></span><br><span class="line">      <span class="params">|phone      |</span>address  <span class="params">|</span></span><br><span class="line"><span class="params">      |</span>0987654321 <span class="params">|台北市某處 |</span></span><br><span class="line">    當 使用者被建立時</span><br><span class="line">    那麼 使用者會有<span class="number">1</span>位</span><br><span class="line">    而且 使用者的資訊會是正確的<span class="symbol">:</span></span><br><span class="line">      <span class="params">|name |</span>email             <span class="params">|phone      |</span>address  <span class="params">|</span></span><br><span class="line"><span class="params">      |</span>小菜  <span class="params">|river@riverye.com |</span>0987654321 <span class="params">|台北市某處 |</span></span><br></pre></td></tr></table></figure></p><h4 id="空的測試-先寫規格還沒準備答案">空的測試 (先寫規格，還沒準備答案)</h4><p><img src="https://i.imgur.com/RVohq2G.gif" alt></p><h2 id="如何執行">如何執行</h2><p>終端機輸入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跑全部檔案</span></span><br><span class="line">cucumber</span><br><span class="line">bundle <span class="built_in">exec</span> cucumber</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑指定 tag</span></span><br><span class="line">bundle <span class="built_in">exec</span> cucumber -t @user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑指定資料夾</span></span><br><span class="line">bundle <span class="built_in">exec</span> cucumber features</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑指定檔案</span></span><br><span class="line">bundle <span class="built_in">exec</span> cucumber features/user.feature</span><br></pre></td></tr></table></figure></p><p>更多操作範例輸入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cucumber -h</span><br><span class="line"></span><br><span class="line">Usage: cucumber [options] [ [FILE|DIR|URL][:LINE[:LINE]*] ]+</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">cucumber examples/i18n/en/features</span><br><span class="line">cucumber @rerun.txt (See --format rerun)</span><br><span class="line">cucumber examples/i18n/it/features/somma.feature:6:98:113</span><br><span class="line">cucumber -s -i http://rubyurl.com/eeCl</span><br></pre></td></tr></table></figure></p><h4 id="準備的測試答案">準備的測試答案</h4><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># features/step_definitions/user_step.rb</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'一開始沒有使用者'</span>) <span class="keyword">do</span></span><br><span class="line">  expect(User.count).to eq(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'有一位使用者的姓名是&#123;string&#125;'</span>) <span class="keyword">do</span> <span class="params">|name|</span></span><br><span class="line">  @user = &#123;&#125;</span><br><span class="line">  @user.merge!(<span class="symbol">name:</span> name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'該使用者的信箱是&#123;string&#125;'</span>) <span class="keyword">do</span> <span class="params">|email|</span></span><br><span class="line">  @user.merge!(<span class="symbol">email:</span> email)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'該使用者的電話與地址資訊如下:'</span>) <span class="keyword">do</span> <span class="params">|table|</span></span><br><span class="line">  table.hashes.each <span class="keyword">do</span> <span class="params">|hash|</span></span><br><span class="line">    phone = hash[<span class="string">'phone'</span>]</span><br><span class="line">    address = hash[<span class="string">'address'</span>]</span><br><span class="line">    @user.merge!(<span class="symbol">phone:</span> phone, <span class="symbol">address:</span> address)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">當(<span class="string">'使用者被建立時'</span>) <span class="keyword">do</span></span><br><span class="line">  @user = User.create(@user)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">那麼(<span class="string">'使用者會有&#123;int&#125;位'</span>) <span class="keyword">do</span> <span class="params">|count|</span></span><br><span class="line">  expect(User.count).to eq(count)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">假如(<span class="string">'使用者的資訊會是正確的:'</span>) <span class="keyword">do</span> <span class="params">|table|</span></span><br><span class="line">  table.hashes.each <span class="keyword">do</span> <span class="params">|hash|</span></span><br><span class="line">    hash.each <span class="keyword">do</span> <span class="params">|key, value|</span></span><br><span class="line">      expect(@user[key]).to eq(value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h4 id="執行結果">執行結果</h4><p><img src="https://i.imgur.com/cMNQlI9.gif" alt></p><h2 id="如何讓-ci-也能跑-cucumber">如何讓 CI 也能跑 Cucumber</h2><p>將原本 CI 設定檔新增以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/7/commits/8f55936c2956031d8517196979b4a9a4b15782e8" target="_blank" rel="noopener">commit</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> cucumber</span><br></pre></td></tr></table></figure></p><h2 id="官方網站">官方網站</h2><p><a href="https://cucumber.io/docs/cucumber/" target="_blank" rel="noopener">https://cucumber.io/docs/cucumber/</a></p><h2 id="參考資料">參考資料</h2><p><a href="https://ihower.tw/presentation/cucumber-coscup2009.pdf" target="_blank" rel="noopener">Cucumber 小黃瓜驗收測試工具 - ihower</a></p><hr><h2 id="小結">小結</h2><p>想不到測試可以寫中文吧 XD<br>有沒有覺得很親切? <s>(噁心</s><br>瞬間人類都能看懂這份規格<br>且每一個測試都能重複使用<br>將來接手的工程師要改 code 時<br>也能看到原本的規格是如何制定<br>不用再通靈啦 (欣慰</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10243344" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10243344</a><br>medium 文章連結：<a href="https://link.medium.com/uP1cmw5R29" target="_blank" rel="noopener">https://link.medium.com/uP1cmw5R29</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/25/Day20-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-Cucumber-%E5%85%A7%E6%96%87%E6%9C%89%E7%AF%84%E4%BE%8B%E6%95%99%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;前一篇介紹了 &lt;a href=&quot;https://github.com/rspec/rspec-rails&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RSpec&lt;/a&gt; &lt;a href=&quot;https://rubyg
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day19 - Ruby on Rails 測試篇 - RSpec</title>
    <link href="https://riverye.com/2020/09/24/Day19-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-RSpec/"/>
    <id>https://riverye.com/2020/09/24/Day19-Ruby-on-Rails-測試篇-RSpec/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-09-24T12:01:23.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>身為一名 Ruby on Rails 工程師，幾乎都有寫過 <a href="https://github.com/rspec/rspec-rails" target="_blank" rel="noopener">RSpec</a>，<br>測試本身與開發是一樣重要的，有聽過一詞是開發時間緊迫，沒時間寫測試，<br>要趕在截止日前完成功能，都要來不及了，有空再補...<s>(通常就是沒下文</s><br>後續的維護成本、技術債反而會更高，<br>且要修改時，若有測試涵蓋的話，也比較不用擔心改 A 壞 B，<br>還能幫助你避開低級錯誤 (像是語法錯誤等)</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2 id="如何安裝">如何安裝</h2><p>放在 <code>:development, :test</code> group 裡面，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/40e8c4680dfe192104bd2051c22d0ea8eff106b1" target="_blank" rel="noopener">commit</a></p><p>參考資料: <a href="https://relishapp.com/rspec/rspec-rails/docs" target="_blank" rel="noopener">https://relishapp.com/rspec/rspec-rails/docs</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'rspec-rails'</span>, <span class="string">'~&gt; 4.0.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><p>接著再終端機輸入，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/69fb29236766f40978def698774af235eb8877e4" target="_blank" rel="noopener">commit</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rails generate rspec:install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可縮寫成</span></span><br><span class="line">rails g rspec:install</span><br></pre></td></tr></table></figure></p><h2 id="產生範例-spec">產生範例 spec</h2><p>由於之前已經透過 <code>scaffold</code> 建立 User<br>欲透過指令補產生相關測試檔案的話，在終端機輸入以下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails g rspec:scaffold user</span><br></pre></td></tr></table></figure></p><p>若不透過指令，也可手動新增檔案，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/ecc69165e1cfff8a2124cb94b8460d0960b78d56" target="_blank" rel="noopener">commit</a></p><h4 id="備註">備註:</h4><ol><li>原本我也不知道要這樣下指令，透過 <code>rails g -h</code> 的技巧，看有哪些參數可以使用 (若不清楚，可以看前面寫的 Linux 指令文章 <code>man</code>、<code>help</code>、<code>tldr</code>，非常受用的技巧)</li><li>若已經有先裝 RSpec ，透過 scaffold 產生檔案時，便會一起產生 spec.rb 的相關檔案</li></ol><h2 id="如何執行">如何執行</h2><p>終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跑全部的測試</span></span><br><span class="line">rspec</span><br><span class="line">rspec spec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑特定資料夾的測試</span></span><br><span class="line">rspec spec/routing/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑特定檔案的測試</span></span><br><span class="line">rspec spec/routing/users_routing_spec.rb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跑特定檔案某一個測試</span></span><br><span class="line">rspec spec/routing/users_routing_spec.rb:22</span><br></pre></td></tr></table></figure></p><h2 id="如何讓-ci-也能跑-rspec">如何讓 CI 也能跑 rspec</h2><p>將原本 CI 設定檔新增以下，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/5/commits/707897e611d3a6a4b8f5e0d026bd3494274b1305" target="_blank" rel="noopener">commit</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> rspec</span><br></pre></td></tr></table></figure></p><h2 id="推薦網站">推薦網站</h2><p>想提升自己 RSpec 寫法的話，可參考 <a href="https://www.betterspecs.org/" target="_blank" rel="noopener">Better Specs</a> 此網站</p><hr><h2 id="小結">小結</h2><p>測試非常的重要，但也別把測試當萬靈丹，它只能幫忙測出有涵蓋到的情境 (假設測試的情境、準備的答案、寫的測試都是對的)，依然無法測出沒想到的情境，未來再修改 code 時，也可能發現原本考量的情境已經變了，這時便需要調整測試本身</p><p>測試本身，其實就可以寫成 30 天的文章，自成一個生態圈，且還有許多相關的 <a href="https://rubygems.org/" target="_blank" rel="noopener">Gem</a> 相輔相成，像是 <a href="https://github.com/thoughtbot/factory_bot" target="_blank" rel="noopener">factory_bot</a>、<a href="https://github.com/DatabaseCleaner/database_cleaner" target="_blank" rel="noopener">Database Cleaner</a>、<a href="https://github.com/travisjeffery/timecop" target="_blank" rel="noopener">timecop</a>、<a href="https://github.com/teamcapybara/capybara" target="_blank" rel="noopener">Capybara</a>、<a href="https://github.com/simplecov-ruby/simplecov" target="_blank" rel="noopener">SimpleCov</a>、<a href="https://github.com/guilleiguaran/fakeredis" target="_blank" rel="noopener">FakeRedis</a>...等，將來有機會再視情況寫成文章...</p><p>本篇其實寫的蠻精簡的 XD <s>(逃</s>，下篇會講另一個測試套件 <a href="https://github.com/cucumber/cucumber-ruby" target="_blank" rel="noopener">Cucumber</a></p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10242906" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10242906</a><br>medium 文章連結：<a href="https://link.medium.com/M8qWBUbd19" target="_blank" rel="noopener">https://link.medium.com/M8qWBUbd19</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/24/Day19-Ruby-on-Rails-%E6%B8%AC%E8%A9%A6%E7%AF%87-RSpec/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;身為一名 Ruby on Rails 工程師，幾乎都有寫過 &lt;a href=&quot;https://github.com/rspec/rspec-rails&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RSpec&lt;/a
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day18 - Ruby on Rails 中的 Logger 紀錄的介紹與應用</title>
    <link href="https://riverye.com/2020/09/23/Day18-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Logger-%E7%B4%80%E9%8C%84%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://riverye.com/2020/09/23/Day18-Ruby-on-Rails-中的-Logger-紀錄的介紹與應用/</id>
    <published>2020-09-22T16:00:00.000Z</published>
    <updated>2020-09-23T15:41:12.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>追問題 (bug) 時，Log 是非常重要的訊息來源，能知道當時發生了什麼問題<br>像是使用者做了什麼操作、帶了哪些參數、request、response 的紀錄等<br>若都沒有儲存 Log 紀錄的話，就...好自為之 QQ</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2 id="如何產生-log">如何產生 Log</h2><p>使用者在操作時，本身就會產生制式 Log 被記錄，並存在 Log 資料夾底下，依照當下環境，存在對應的檔案中</p><h4 id="在-development-操作的-log">在 development 操作的 Log</h4><p><img src="https://i.imgur.com/lwrV4PN.jpg" alt></p><h2 id="development-增加時間戳">development 增加時間戳</h2><p>上面那張圖雖然有自動存成 Log，但沒時間戳挺不方便的</p><p>增加方法如下，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/3/commits/e384552e8e4f616854f38fe87be71998f3e612c6" target="_blank" rel="noopener">commit</a></p><p>備註: production 預設就有記錄時間戳 (<code>config/environments/production.rb</code>)，故不用調整，而 development 則依需求是否需要增加</p><p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/environments/development.rb</span></span><br><span class="line"></span><br><span class="line">config.log_formatter = <span class="symbol">:</span><span class="symbol">:Logger</span><span class="symbol">:</span><span class="symbol">:Formatter</span>.new</span><br></pre></td></tr></table></figure></p><h4 id="增加時間戳的-log">增加時間戳的 Log</h4><p><img src="https://i.imgur.com/i4pCCKD.png" alt></p><h2 id="如何在指定位置增加-log">如何在指定位置增加 Log</h2><p>情境: 打 API 的 request 和 response 建議可以儲存，以及針對錯誤訊息也要記錄，方便後續追蹤</p><p>示範如何紀錄，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/3/commits/a7c4b3d52485ee08dee4d7518ffb53713b1acd7b" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/users_controller.rb</span></span><br><span class="line"></span><br><span class="line">Rails.logger.info <span class="string">"params: <span class="subst">#&#123;user_params&#125;</span>, <span class="subst">#&#123;@user.inspect&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><h2 id="將-log-存到指定路徑檔案中">將 Log 存到指定路徑檔案中</h2><p>將所有 Log 都存在預設路徑檔案中，會導致原本的檔案過於肥大，且要尋找時會比較麻煩，可依需求分類存在不同檔案中，像是打 A API 的統一存在 A 路徑，B API 的統一存在 B 路徑中...</p><p>範例可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/3/commits/add096871d024f3f6e5f8cb6121c5e5c1e3c8c5e" target="_blank" rel="noopener">commit</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/services/file_log.rb</span></span><br><span class="line"><span class="comment"># 有不同寫法，歡迎在底下留言交流</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLog</span></span></span><br><span class="line">  @loggers <span class="params">||</span>= &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">logger</span><span class="params">(location)</span></span></span><br><span class="line">    @loggers[location] <span class="params">||</span>= create_logger(location)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create_logger</span><span class="params">(location)</span></span></span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">'RAILS_LOG_TO_STDOUT'</span>]</span><br><span class="line">      logger = Logger.new(STDOUT)</span><br><span class="line">      logger.progname = File.basename(location, <span class="string">'.log'</span>)</span><br><span class="line">      logger.formatter = Rails.configuration.log_formatter</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      FileUtils.mkdir_p(Rails.root.join(<span class="string">'log'</span>, File.dirname(location)))</span><br><span class="line">      logger = Logger.new(Rails.root.join(<span class="string">'log'</span>, location))</span><br><span class="line">      logger.formatter = proc <span class="keyword">do</span> <span class="params">|severity, datetime, _progname, msg|</span></span><br><span class="line">        <span class="string">"<span class="subst">#&#123;severity&#125;</span> [<span class="subst">#&#123;datetime.strftime(<span class="string">'%Y-%m-%d %H:%M:%S.%6N'</span>)&#125;</span>]: <span class="subst">#&#123;msg&#125;</span>\n"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ActiveSupport::TaggedLogging.new(logger)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="參考資料">參考資料</h2><ol><li><a href="https://rails.ruby.tw/debugging_rails_applications.html#logger" target="_blank" rel="noopener">除錯Rails 應用程式— Ruby on Rails 指南</a></li><li><a href="https://ihower.tw/rails/deployment.html#sec9" target="_blank" rel="noopener">Ruby on Rails 實戰聖經#整理 Log 檔案</a></li></ol><hr><h2 id="小結">小結</h2><p>Log 可說是非常重要的小細節，也能客製化格式，Google 下便有相關資源可參考，除了上述範例使用到的 <code>:info</code> 外，還有 <code>:debug</code> 、 <code>:warn</code> 、 <code>:error</code> 、 <code>:fatal</code> 以及 <code>:unknown</code> 可以使用，差異可參考上述提供的參考資料連結</p><p>雖說很方便，但也不要過於氾濫什麼都儲存，除了會影響效能外，容量也會用很兇</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10242280" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10242280</a><br>medium 文章連結：<a href="https://link.medium.com/9T7n8giyZ9" target="_blank" rel="noopener">https://link.medium.com/9T7n8giyZ9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/23/Day18-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-Logger-%E7%B4%80%E9%8C%84%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%87%89%E7%94%A8/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;追問題 (bug) 時，Log 是非常重要的訊息來源，能知道當時發生了什麼問題&lt;br&gt;
像是使用者做了什麼操作、帶了哪些參數、request、response 的紀錄等&lt;br&gt;
若都沒有儲存 Log 紀錄的話，就...好自為之 QQ&lt;
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day17 - Ruby on Rails 中的 awesome_print 讓你的 console 更好閱讀</title>
    <link href="https://riverye.com/2020/09/22/Day17-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-awesome-print-%E8%AE%93%E4%BD%A0%E7%9A%84-console-%E6%9B%B4%E5%A5%BD%E9%96%B1%E8%AE%80/"/>
    <id>https://riverye.com/2020/09/22/Day17-Ruby-on-Rails-中的-awesome-print-讓你的-console-更好閱讀/</id>
    <published>2020-09-21T16:00:00.000Z</published>
    <updated>2020-09-23T15:35:58.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>awesome_print 這套蠻實用的，對客戶來說無感，對工程師卻是有感的存在 (至少對我來說是啦 XD)，能讓 console 畫面比較美，看起來也比較賞心悅目，當 table 欄位比較多時，也比較好閱讀</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2 id="awesome-print">Awesome Print</h2><p><a href="https://github.com/awesome-print/awesome_print" target="_blank" rel="noopener">官方網站</a>有提到即將發佈的 2.0 版本<br>將只支援 Ruby v1.9.3 之後及 Rails v3.0 之後，若本身專案使用的版本比較舊的話，要特別留意</p><h2 id="如何安裝">如何安裝</h2><p>在 Gemfile 加入，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/2/commits/f95351f95ce0ea2cbf2560f60a090e3016b38ef0" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile 檔案</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'awesome_print'</span>, <span class="string">'~&gt; 1.8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記得要 bundle</span></span><br></pre></td></tr></table></figure></p><h2 id="讓-console-預設使用-awesome-print">讓 console 預設使用 Awesome Print</h2><p><a href="https://github.com/awesome-print/awesome_print" target="_blank" rel="noopener">官方網站</a>內文有寫如何設定，或參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/2/commits/45c73c4e88cf177a57eec65ac2695f7c58efac53" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitignore</span></span><br><span class="line">.irb_history</span><br><span class="line"></span><br><span class="line"><span class="comment"># .irbrc</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'awesome_print'</span></span><br><span class="line">AwesomePrint.irb!</span><br><span class="line"></span><br><span class="line"><span class="comment"># config/initializers/awesome_print.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">AwesomePrint</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">Formatters</span></span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BaseFormatter</span></span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">indented</span><span class="params">(&amp;block)</span></span></span><br><span class="line">        inspector.increase_indentation(&amp;block)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Inspector</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_indentation</span><span class="params">(&amp;block)</span></span></span><br><span class="line">      indentator.indent(&amp;block)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="如何使用">如何使用</h2><p>與一般操作一樣，差別在於看起來比較賞心悅目 XD</p><p>直接看以下圖片，便知其差異</p><h4 id="console-預設-無-awesome_print">console 預設 (無 awesome_print)</h4><p><img src="https://i.imgur.com/WYUTX3L.png" alt></p><h4 id="有開啟-awesome_print">有開啟 awesome_print</h4><p><img src="https://i.imgur.com/YNNzysx.png" alt></p><hr><h2 id="小結">小結</h2><p>可讀性變高以後，心情也會跟著上升，眼睛也比較不會這麼吃力，開發也跟著變快惹(!?</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10241726" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10241726</a><br>medium 文章連結：<a href="https://link.medium.com/RDfLdOCrY9" target="_blank" rel="noopener">https://link.medium.com/RDfLdOCrY9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/22/Day17-Ruby-on-Rails-%E4%B8%AD%E7%9A%84-awesome-print-%E8%AE%93%E4%BD%A0%E7%9A%84-console-%E6%9B%B4%E5%A5%BD%E9%96%B1%E8%AE%80/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;awesome_print 這套蠻實用的，對客戶來說無感，對工程師卻是有感的存在 (至少對我來說是啦 XD)，能讓 console 畫面比較美，看起來也比較賞心悅目，當 table 欄位比較多時，也比較好閱讀&lt;/p&gt;
&lt;p&gt;後續的文章
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day16 - Ruby on Rails 中的風格管理套件 RuboCop</title>
    <link href="https://riverye.com/2020/09/21/Day16-Ruby-on-Rails-%E4%B8%AD%E7%9A%84%E9%A2%A8%E6%A0%BC%E7%AE%A1%E7%90%86%E5%A5%97%E4%BB%B6-RuboCop/"/>
    <id>https://riverye.com/2020/09/21/Day16-Ruby-on-Rails-中的風格管理套件-RuboCop/</id>
    <published>2020-09-20T16:00:00.000Z</published>
    <updated>2020-09-20T16:03:21.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>多人協作時，通常會規範 style，像是統一使用單引號、雙引號、每個方法最多不能超過幾行、每行的長度限制等<br>這時就需要透過 RuboCop 來進行把關</p><p>後續的文章會以此 <a href="https://github.com/River-Ye/ironman_12th_2020" target="_blank" rel="noopener">repo 作為範例</a></p><hr><h2 id="rubocop">Rubocop</h2><blockquote><p>Role models are important.-- Officer Alex J. Murphy / RoboCop</p></blockquote><p>進入<a href="https://github.com/rubocop-hq/rubocop" target="_blank" rel="noopener">官方網站</a>便能看到這段話，由此可見風格規範的重要性</p><h2 id="如何安裝">如何安裝</h2><p>如文件所說直接在終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install rubocop</span><br></pre></td></tr></table></figure></p><p>接著放在 development 中，test 和 production 不需使用<br>或不放 Gemfile 中，只針對 CI 處理即可</p><p>可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/commit/f44bdc052ccbf0c195bb9c7e154abb72788ebc8f" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile 檔案</span></span><br><span class="line"></span><br><span class="line">gem <span class="string">'rubocop'</span>, <span class="string">'~&gt; 0.90.0'</span></span><br></pre></td></tr></table></figure></p><h2 id="如何執行">如何執行</h2><p>在專案目錄下的終端機輸入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 檢查全部的檔案</span></span><br><span class="line">rubocop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只針對特定檔案、資料夾檢查</span></span><br><span class="line">rubocop path/to/file path/to/directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">rubocop app/controllers/application_controller.rb</span><br></pre></td></tr></table></figure></p><p>備註: 善用 <code>tldr</code> 可看下 <code>rubocop</code> 怎麼使用<br><img src="https://i.imgur.com/0MFURaa.png" alt></p><h2 id="如何客製化-rubocop-設定">如何客製化 RuboCop 設定</h2><p>可參考 <a href="https://docs.rubocop.org/rubocop/0.85/cops_style.html" target="_blank" rel="noopener">Cop Documentation Style</a><br>裡面有提供各種範例的設定，可針對專案需求進行調整，<br>並將設定檔寫在 <code>.rubocop.yml</code> 中，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/commit/db549bd5145f1555dc3a20cddc9a8639a5223ac3" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the configuration used to check the rubocop source code.</span></span><br><span class="line"><span class="comment"># url: https://docs.rubocop.org/rubocop/0.85/cops_style.html</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">AllCops:</span></span><br><span class="line">  <span class="symbol">Exclude:</span></span><br><span class="line">    - <span class="string">'config/routes.rb'</span></span><br><span class="line">    - <span class="string">'db/schema.rb'</span></span><br><span class="line">  <span class="symbol">TargetRubyVersion:</span> <span class="number">2.7</span>.<span class="number">1</span></span><br><span class="line">  <span class="symbol">TargetRailsVersion:</span> <span class="number">6.0</span>.<span class="number">3.3</span></span><br><span class="line"></span><br><span class="line">  <span class="symbol">Rails:</span></span><br><span class="line">    <span class="symbol">Enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  Rails/<span class="symbol">UnknownEnv:</span></span><br><span class="line">    <span class="symbol">Environments:</span></span><br><span class="line">      - production</span><br><span class="line">      - staging</span><br><span class="line">      - development</span><br><span class="line">      - test</span><br><span class="line"></span><br><span class="line"><span class="comment"># modern editors and terminal fit more than 120 characters.</span></span><br><span class="line">Metrics/<span class="symbol">LineLength:</span></span><br><span class="line">  <span class="symbol">Max:</span> <span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Class length is not critical to code quality</span></span><br><span class="line">Metrics/<span class="symbol">ClassLength:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module length is not critical to code quality</span></span><br><span class="line">Metrics/<span class="symbol">ModuleLength:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Block length is ok to be long in DSLs like 'rspec' or 'rake'</span></span><br><span class="line">Metrics/<span class="symbol">BlockLength:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defualt '10 line' is too strict to us, and may clutter the class</span></span><br><span class="line">Metrics/<span class="symbol">MethodLength:</span></span><br><span class="line">  <span class="symbol">Max:</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line">Metrics/<span class="symbol">AbcSize:</span></span><br><span class="line">  <span class="symbol">Max:</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Most Rails generated class are not doced, and not needed</span></span><br><span class="line">Style/<span class="symbol">Documentation:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 'return' makes code more readable in some cases</span></span><br><span class="line">Style/<span class="symbol">RedundantReturn:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Style/<span class="symbol">AsciiComments:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Guard is not always good to readablity</span></span><br><span class="line"><span class="comment"># Note: It does not mean we don't use guard to reduce block levels</span></span><br><span class="line"><span class="comment"># In short methods, using guard is not necessary, e.g.</span></span><br><span class="line"><span class="comment">#   def foo(x)   | def foo(x)</span></span><br><span class="line"><span class="comment">#     if xxx?(x) |   return unless xxx?(x)</span></span><br><span class="line"><span class="comment">#       bar(x)   |   bar(x)</span></span><br><span class="line"><span class="comment">#     end        | end</span></span><br><span class="line"><span class="comment">#   end          |</span></span><br><span class="line">Style/<span class="symbol">GuardClause:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The rule expects</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   if xxxxxx</span></span><br><span class="line"><span class="comment">#     a_very_long_method_or_somethings_like_that......</span></span><br><span class="line"><span class="comment">#   end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># to be</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   a_very_long_method_or_somethings_like_that...... if xxxxxx</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is not good looking at all.</span></span><br><span class="line">Style/<span class="symbol">IfUnlessModifier:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # bad</span></span><br><span class="line"><span class="comment"># a = [1, 2,]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># a = [</span></span><br><span class="line"><span class="comment">#   1, 2,</span></span><br><span class="line"><span class="comment">#   3,</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># a = [</span></span><br><span class="line"><span class="comment">#   1,</span></span><br><span class="line"><span class="comment">#   2,</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line">Style/<span class="symbol">TrailingCommaInArrayLiteral:</span></span><br><span class="line">  <span class="symbol">EnforcedStyleForMultiline:</span> consistent_comma</span><br><span class="line"></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># foo(</span></span><br><span class="line"><span class="comment">#   1,</span></span><br><span class="line"><span class="comment">#   2,</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line">Style/<span class="symbol">TrailingCommaInArguments:</span></span><br><span class="line">  <span class="symbol">EnforcedStyleForMultiline:</span> consistent_comma</span><br><span class="line"></span><br><span class="line"><span class="comment"># # good</span></span><br><span class="line"><span class="comment"># a = &#123;</span></span><br><span class="line"><span class="comment">#   1,</span></span><br><span class="line"><span class="comment">#   2,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line">Style/<span class="symbol">TrailingCommaInHashLiteral:</span></span><br><span class="line">  <span class="symbol">EnforcedStyleForMultiline:</span> consistent_comma</span><br><span class="line"></span><br><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="comment"># class Foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   def bar</span></span><br><span class="line"><span class="comment">#     ...</span></span><br><span class="line"><span class="comment">#   end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="comment"># class Foo</span></span><br><span class="line"><span class="comment">#   def bar</span></span><br><span class="line"><span class="comment">#     ...</span></span><br><span class="line"><span class="comment">#   end</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line"></span><br><span class="line">Style/<span class="symbol">ClassAndModuleChildren:</span></span><br><span class="line">  <span class="symbol">Enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="comment"># "No special symbols"</span></span><br><span class="line"><span class="comment"># "No string interpolation"</span></span><br><span class="line"><span class="comment"># "Just text"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="comment"># 'No special symbols'</span></span><br><span class="line"><span class="comment"># 'No string interpolation'</span></span><br><span class="line"><span class="comment"># 'Just text'</span></span><br><span class="line"><span class="comment"># "Wait! What's #&#123;this&#125;!"</span></span><br><span class="line"><span class="comment"># Style/StringLiterals:</span></span><br><span class="line"><span class="comment">#   EnforcedStyle: single_quotes (default)</span></span><br></pre></td></tr></table></figure></p><h2 id="如何只針對修改的檔案進行檢查就好">如何只針對修改的檔案進行檢查就好</h2><p>改了好多檔案，逐步檢查好麻煩，有什麼方法可以只針對修改的檔案檢查就好?<br>在自己 Local branch 的終端機輸入以下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若有更好的設定方式，歡迎留言交流 :)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">rubocop $(git diff master --name-only)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">git diff-tree -r --no-commit-id --name-only head..origin/master | xargs rubocop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 備註: xargs 是 Linux 指令</span></span><br></pre></td></tr></table></figure></p><p>或不想每次發 Pull requests (簡稱: pr) 都檢查全部的檔案</p><h3 id="只想針對修改的檔案進行檢查就好可參考此-commit-或此-commit">只想針對修改的檔案進行檢查就好，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/6/commits/1a368ad8619e2c690da4012d6d5b42ff429ce6c1" target="_blank" rel="noopener">commit</a> 或此 <a href="https://github.com/River-Ye/ironman_12th_2020/commit/e83a65f01c7a83d15220381a754044a890d744c5" target="_blank" rel="noopener">commit</a></h3><h3 id="只想針對修改的行數進行檢查就好可參考此-pr">只想針對修改的行數進行檢查就好，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/9" target="_blank" rel="noopener">pr</a></h3><p>備註: 安裝「<a href="https://rubygems.org/gems/pronto-rubocop" target="_blank" rel="noopener">pronto-rubocop</a>」時，應該會踩到安裝失敗的雷，有相依「<a href="https://rubygems.org/gems/thor" target="_blank" rel="noopener">thor</a>」比較舊的版本，可參考上面 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/9" target="_blank" rel="noopener">pr</a> 的解決方式<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若有更好的設定方式，歡迎留言交流 :)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 Travis CI 為例</span></span><br><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line">git fetch origin master &amp;&amp; master_sha1=<span class="string">"$(cut -c -40&lt;&lt;&lt;"</span>$(cat .git/FETCH_HEAD)<span class="string">")"</span> &amp;&amp; pronto run -c $master_sha1 --exit-code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 欲使用 pronto 這指令，需安裝「pronto-rubocop」</span></span><br><span class="line"><span class="comment"># 有安裝「pronto-rubocop」的話，這段也能直接在終端機輸入</span></span><br></pre></td></tr></table></figure></p><h2 id="某些行數不想被檢查可以跳過檢查嗎">某些行數不想被檢查，可以跳過檢查嗎</h2><p>基於某些原因，某些 code 不想被 RuboCop 檢查 <s>(說白就是不想處理 XD</s></p><p>想跳過檢查的話，可參考此 <a href="https://github.com/River-Ye/ironman_12th_2020/pull/1/commits/34a64825f160f9dc5d711e178ce4c49ff0da1d60" target="_blank" rel="noopener">commit</a><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 依照 RuboCop 提醒，後面 oo_xx 改成對應的內容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rubocop:disable oo_xx</span></span><br><span class="line">your code</span><br><span class="line"><span class="comment"># rubocop:enable oo_xx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rubocop:disable Style/TrailingCommaInHashLiteral</span></span><br><span class="line">your code</span><br><span class="line"><span class="comment"># rubocop:enable Style/TrailingCommaInHashLiteral</span></span><br></pre></td></tr></table></figure></p><h2 id="vs-code-套件">VS code 套件</h2><p>每次都要輸入 <code>rubocop</code> 才知道哪些要改，好麻煩，<br>有沒有視覺化的工具可以協助呢?</p><h4 id="vs-code-有套件推薦使用ruby-rubocop">VS code 有套件推薦使用「ruby-rubocop」</h4><h4 id="套件名稱-ruby-rubocop">套件名稱: ruby-rubocop</h4><h4 id="套件連結-httpsmarketplacevisualstudiocomitemsitemnamemisogiruby-rubocop">套件連結: <a href="https://marketplace.visualstudio.com/items?itemName=misogi.ruby-rubocop" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=misogi.ruby-rubocop</a></h4><p><img src="https://i.imgur.com/tpuARTz.png" alt></p><h4 id="vs-code-示範畫面">VS code 示範畫面</h4><p><img src="https://i.imgur.com/pe4dE6c.gif" alt></p><hr><h2 id="參考">參考</h2><p><a href="https://5xruby.tw/posts/rubocop-intro/" target="_blank" rel="noopener">機器戰警 RuboCop</a></p><h2 id="小結">小結</h2><p>RuboCop 真的是又愛又恨的套件，好處是讓大家風格一致，壞處是處理時挺花時間的，遇到不知怎解決的問題時，Goolge 會是你的好朋友，<s>再不行就跳過檢查(誤</s></p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10240956" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10240956</a><br>medium 文章連結：<a href="https://link.medium.com/fx6sSkzeW9" target="_blank" rel="noopener">https://link.medium.com/fx6sSkzeW9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/21/Day16-Ruby-on-Rails-%E4%B8%AD%E7%9A%84%E9%A2%A8%E6%A0%BC%E7%AE%A1%E7%90%86%E5%A5%97%E4%BB%B6-RuboCop/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;多人協作時，通常會規範 style，像是統一使用單引號、雙引號、每個方法最多不能超過幾行、每行的長度限制等&lt;br&gt;
這時就需要透過 RuboCop 來進行把關&lt;/p&gt;
&lt;p&gt;後續的文章會以此 &lt;a href=&quot;https://gith
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day15 - 如何看自己打出去的 request 完整資訊，以 PostBin 和 Webhook.site 為例</title>
    <link href="https://riverye.com/2020/09/20/Day15-%E5%A6%82%E4%BD%95%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%89%93%E5%87%BA%E5%8E%BB%E7%9A%84-request-%E5%AE%8C%E6%95%B4%E8%B3%87%E8%A8%8A%EF%BC%8C%E4%BB%A5-PostBin-%E5%92%8C-Webhook-site-%E7%82%BA%E4%BE%8B/"/>
    <id>https://riverye.com/2020/09/20/Day15-如何看自己打出去的-request-完整資訊，以-PostBin-和-Webhook-site-為例/</id>
    <published>2020-09-19T16:00:00.000Z</published>
    <updated>2020-09-20T15:49:48.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>串接 API 時，通常會取得對方的文件，沒有就...通靈吧 XD</p><p>若想看自己發送的 request 完整資訊，可使用 <a href="https://postb.in/" target="_blank" rel="noopener">PostBin</a> 或 <a href="https://webhook.site/" target="_blank" rel="noopener">Webhook.site</a> 這兩個網站進行查看</p><p>以下分別使用 Runy on Rails 的 <code>Net::HTTP</code> 、 <code>REST Client</code> 、 <code>HTTP</code> 進行示範，皆能做到一樣的事情</p><hr><h2 id="nethttp">Net::HTTP</h2><p>為 Ruby 內建的 library ，無需額外安裝 gem<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'net/http'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網址要記得換</span></span><br><span class="line">url = <span class="string">"https://postb.in/ooo-xxx"</span></span><br><span class="line">uri = URI.parse(url)</span><br><span class="line">params = &#123; <span class="symbol">name:</span> <span class="string">'river'</span>, <span class="symbol">content:</span> <span class="string">'hello world'</span> &#125;</span><br><span class="line">response = Net::HTTP.post_form(uri, params)</span><br><span class="line">response.code</span><br></pre></td></tr></table></figure></p><h4 id="示範在-irb-中使用-nethttp-打-api-到-postbin">示範在 <code>irb</code> 中使用 <code>Net::HTTP</code> 打 API 到 PostBin</h4><p><img src="https://i.imgur.com/NHIf31U.gif" alt></p><h4 id="示範在-irb-中使用-nethttp-打-api-到-webhooksite">示範在 <code>irb</code> 中使用 <code>Net::HTTP</code> 打 API 到 Webhook.site</h4><p><img src="https://i.imgur.com/JLgMxSv.gif" alt></p><h4 id="由於另外-2-套操作手感與截圖大同小異故不另外製作-gif-操作範例">由於另外 2 套操作手感與截圖大同小異，故不另外製作 Gif 操作範例</h4><p>參考資料: <a href="https://ruby-doc.org/stdlib-2.7.0/libdoc/net/http/rdoc/Net/HTTP.html" target="_blank" rel="noopener">Net::HTTP</a></p><hr><h2 id="rest-client">REST Client</h2><p>在 <a href="https://rubygems.org/gems/rest-client" target="_blank" rel="noopener">RubyGems</a> 的下載高達 1.5 億次以上，非常驚人的下載次數!!</p><p>且官方 GitHub 有提供範例，非常清楚易懂</p><p>備註: <a href="https://github.com/rest-client/rest-client" target="_blank" rel="noopener">官方網站</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Ruby on Rails 專案中的 Gemfile 加入以下這段</span></span><br><span class="line">gem <span class="string">'rest-client'</span>, <span class="string">'~&gt; 2.1'</span></span><br><span class="line"><span class="comment"># 記得要 bundle 才能使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下為在 rails console 操作</span></span><br><span class="line"><span class="comment"># 網址要記得換</span></span><br><span class="line">url = <span class="string">"https://postb.in/ooo-xxx"</span></span><br><span class="line">payload = &#123; <span class="symbol">name:</span> <span class="string">'river'</span>, <span class="symbol">content:</span> <span class="string">'hello world'</span> &#125;</span><br><span class="line">response = RestClient.post(url, payload.to_json, <span class="symbol">content_type:</span> <span class="symbol">:json</span>, <span class="symbol">accept:</span> <span class="symbol">:json</span>, <span class="symbol">user_agent:</span> <span class="string">'myagent'</span>)</span><br><span class="line">response.code</span><br></pre></td></tr></table></figure></p><hr><h2 id="http">HTTP</h2><p>在 <a href="https://rubygems.org/gems/http" target="_blank" rel="noopener">RubyGems</a> 的下載超過 3600 萬次以上，也是很驚人的下載次數</p><p>最後更新時間比 REST Client 還新，且 <a href="https://github.com/httprb/http" target="_blank" rel="noopener">GitHub</a> 上有將 Ruby 生態圈中常見的 HTTP library 比較一輪</p><p>三個相比下，也是我個人比較常用的 Gem</p><p>備註: <a href="https://github.com/httprb/http" target="_blank" rel="noopener">官方網站</a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Ruby on Rails 專案中的 Gemfile 加入以下這段</span></span><br><span class="line">gem <span class="string">'http'</span>, <span class="string">'~&gt; 4.4'</span>, <span class="string">'&gt;= 4.4.1'</span></span><br><span class="line"><span class="comment"># 記得要 bundle 才能使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下為在 rails console 操作</span></span><br><span class="line"><span class="comment"># 網址要記得換</span></span><br><span class="line">url = <span class="string">'https://postb.in/ooo-xxx'</span></span><br><span class="line">body = &#123; <span class="symbol">name:</span> <span class="string">'river'</span>, <span class="symbol">content:</span> <span class="string">'hello world'</span> &#125;</span><br><span class="line">response = HTTP.post(url, <span class="symbol">json:</span> body)</span><br><span class="line">response.code</span><br></pre></td></tr></table></figure></p><h2 id="小結">小結</h2><p>主要是介紹如何透過工具查詢自己 request 的完整資訊 (Headers、Body等)</p><p>並沒有針對 response 的處理說明，畢竟 <code>response.body</code> 每個 API 回傳皆不同</p><p>先從拿到 HTTP 200 開始，後續怎處理 response 依需求而定</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10240421" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10240421</a><br>medium 文章連結：<a href="https://link.medium.com/jTboFdd7U9" target="_blank" rel="noopener">https://link.medium.com/jTboFdd7U9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/20/Day15-%E5%A6%82%E4%BD%95%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%89%93%E5%87%BA%E5%8E%BB%E7%9A%84-request-%E5%AE%8C%E6%95%B4%E8%B3%87%E8%A8%8A%EF%BC%8C%E4%BB%A5-PostBin-%E5%92%8C-Webhook-site-%E7%82%BA%E4%BE%8B/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;串接 API 時，通常會取得對方的文件，沒有就...通靈吧 XD&lt;/p&gt;
&lt;p&gt;若想看自己發送的 request 完整資訊，可使用 &lt;a href=&quot;https://postb.in/&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day14 - 在 Ruby 中使用 Benchmark 比較哪個方法比較快</title>
    <link href="https://riverye.com/2020/09/19/Day14-%E5%9C%A8-Ruby-%E4%B8%AD%E4%BD%BF%E7%94%A8-Benchmark-%E6%AF%94%E8%BC%83%E5%93%AA%E5%80%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BC%83%E5%BF%AB/"/>
    <id>https://riverye.com/2020/09/19/Day14-在-Ruby-中使用-Benchmark-比較哪個方法比較快/</id>
    <published>2020-09-18T16:00:00.000Z</published>
    <updated>2020-09-18T16:04:13.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>總算開始進入 Ruby 程式語言的世界中，再不寫點什麼，都快與鐵人賽報名的題目不相干，變成標題殺人惹 XD</p><p>後續 Ruby on Rails 的相關文章，假定讀者為已經有 CRUD 基礎上(或有工作經驗)，進而分享，故不從環境建置等開始說起 (若有興趣想從頭學，可參考這篇環境建置 <a href="https://riverye.com/2019/10/12/Windows%2010%20%E5%AE%89%E8%A3%9D%20Ruby%20+%20Rails%20+%20Node.js%20+%20Git%20+%20postgresql/">Windows 10 安裝 Ruby + Rails + Node.js + Git + postgresql</a>，然後自學)</p><hr><h2 id="benchmark">Benchmark</h2><p>中文翻譯為「基準測試」，為 Ruby 內建的 <code>module</code>，用於評估程式的效能</p><h3 id="情境">情境</h3><p>寫了一段程式，想到幾種寫法皆能做到一樣的事情，但想知道哪個效能比較好的話，可以用 Benchmark，在 Ruby 或 Ruby on Rails 中皆能使用</p><h3 id="如何測試">如何測試</h3><p>以下這段有 3 種方法可以測試：</p><ol><li>在 Ruby 的 <code>irb</code> 模式中，貼上以下的程式碼</li><li>在 Ruby on Rails 的 <code>rails console</code> (可縮寫成 <code>rails c</code>) 中，貼上以下的程式碼</li><li>將以下這段存成 <code>test.rb</code> 檔，在終端機輸入 <code>ruby test.rb</code><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'benchmark'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment"># n 為要測試的次數</span></span><br><span class="line">  n = <span class="number">5000000</span></span><br><span class="line">  y = Benchmark.bm <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">    x.report(<span class="string">"&lt;&lt;    "</span>) &#123; n.times &#123; [] &lt;&lt; <span class="string">'river'</span> &#125; &#125;</span><br><span class="line">    x.report(<span class="string">"push  "</span>) &#123; n.times &#123; [].push(<span class="string">'river'</span>) &#125; &#125;</span><br><span class="line">    x.report(<span class="string">"concat"</span>) &#123; n.times &#123; [].concat([<span class="string">'river'</span>]) &#125; &#125;</span><br><span class="line">    x.report(<span class="string">"+     "</span>) &#123; n.times &#123; [] + [<span class="string">'river'</span>] &#125; &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="顯示如下">顯示如下</h4><table><thead><tr><th>name</th><th>user</th><th>system</th><th>total</th><th>real</th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>0.600000</td><td>0.000000</td><td>0.600000</td><td>(  0.615966)</td></tr><tr><td>push</td><td>0.650000</td><td>0.000000</td><td>0.650000</td><td>(  0.658296)</td></tr><tr><td>concat</td><td>1.230000</td><td>0.010000</td><td>1.240000</td><td>(  1.234671)</td></tr><tr><td>+</td><td>1.010000</td><td>0.000000</td><td>1.010000</td><td>(  1.034694)</td></tr></tbody></table><h4 id="irb-測試的畫面"><code>irb</code> 測試的畫面</h4><p><img src="https://i.imgur.com/rznoF2B.png" alt></p><h4 id="rails-c-測試的畫面"><code>rails c</code> 測試的畫面</h4><p><img src="https://i.imgur.com/63OEQ41.png" alt></p><h2 id="小結">小結</h2><p>從上述情境中可以發現使用 <code>&lt;&lt;</code> 效能比較好<br>但不等於 <code>&lt;&lt;</code> 這方法是最好的，端看情境應用<br>尤其在 SQL Query 時，更是明顯</p><h2 id="參考資料">參考資料</h2><p><a href="https://ruby-doc.org/stdlib-2.5.0/libdoc/benchmark/rdoc/Benchmark.html" target="_blank" rel="noopener">Benchmark</a></p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10239641" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10239641</a><br>medium 文章連結：<a href="https://link.medium.com/epApulKUS9" target="_blank" rel="noopener">https://link.medium.com/epApulKUS9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/19/Day14-%E5%9C%A8-Ruby-%E4%B8%AD%E4%BD%BF%E7%94%A8-Benchmark-%E6%AF%94%E8%BC%83%E5%93%AA%E5%80%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BC%83%E5%BF%AB/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;總算開始進入 Ruby 程式語言的世界中，再不寫點什麼，都快與鐵人賽報名的題目不相干，變成標題殺人惹 XD&lt;/p&gt;
&lt;p&gt;後續 Ruby on Rails 的相關文章，假定讀者為已經有 CRUD 基礎上(或有工作經驗)，進而分享，故不
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day13 - 一些 Git 指令</title>
    <link href="https://riverye.com/2020/09/18/Day13-%E4%B8%80%E4%BA%9B-Git-%E6%8C%87%E4%BB%A4/"/>
    <id>https://riverye.com/2020/09/18/Day13-一些-Git-指令/</id>
    <published>2020-09-17T16:00:00.000Z</published>
    <updated>2020-09-27T00:14:30.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>記錄工作上用過的一些 Git 指令，主要是在 terminal (終端機) 或 VScode 的介面操作，沒什麼在用 <a href="https://git-scm.com/docs/gitk" target="_blank" rel="noopener">gitk</a>、<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a>，覺得在 terminal 輸入看起來也比較厲害 XD</p><p>本篇以已會基本 Git 操作為基礎上，進行分享 (需已會 <code>git status</code> 、 <code>git add</code> 、 <code>git commit</code> 、 <code>git branch</code> 、 <code>git checkout</code> 、 <code>git push</code> 、 <code>git pull</code> 等操作)</p><hr><h2 id="本篇以此-repo-為範例">本篇以此 <a href="https://github.com/River-Ye/demo_git.git" target="_blank" rel="noopener">repo 為範例</a></h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/River-Ye/demo_git.git</span><br></pre></td></tr></table></figure></p><h2 id="查詢-remote-名稱和-url">查詢 remote 名稱和 URL</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure></p><h4 id="超重要小技巧-可透過-git-remote-h-的方式看有哪些參數絕大部分指令皆能透過此技巧查詢參數或透過-tldr-git-remote-的方式看範例">超重要小技巧： 可透過 <code>git remote -h</code> 的方式，看有哪些參數，絕大部分指令皆能透過此技巧查詢參數或透過 <code>tldr git remote</code> 的方式看範例</h4><h2 id="從既有-branch-建立新的-branch-並切到新的-branch">從既有 branch 建立新的 branch 並切到新的 branch</h2><p>情境： 假如我正在 master，想直接建立新的 branch 並切過去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch_name</span><br></pre></td></tr></table></figure></p><h2 id="將既有-branch-移動到別的-branch-的位置">將既有 branch 移動到別的 branch 的位置</h2><p>情境： 我有一個 river_branch ，想移動到 master branch 的位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -f &lt;branch_name&gt; &lt;目的地branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">git branch -f river_branch master</span><br></pre></td></tr></table></figure></p><h2 id="事情做到一半突然要切到不同-branch-處理時">事情做到一半，突然要切到不同 branch 處理時</h2><p>很常會遇到的情境，這些指令很常用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將手中的事情先藏起來 (非存到 add 或 commit 喔)</span></span><br><span class="line">git stash save -u <span class="string">"輸入要儲存的名稱，可寫中文"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出目前已儲存的 stash</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 stash 中的 stash@&#123;0&#125; 抓下來，且不刪除 stash@&#123;0&#125;</span></span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 stash 中的 stash@&#123;0&#125; 抓下來，同時刪除 stash@&#123;0&#125;</span></span><br><span class="line">git stash pop stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除 stash 中的 stash@&#123;0&#125;</span></span><br><span class="line">git stash drop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure></p><h2 id="切到遠端-branch">切到遠端 branch</h2><p>情境： 小菜有將 river_branch 上傳， Louis 要接手處理 (或一同開發)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git checkout river_branch</span><br></pre></td></tr></table></figure></p><h2 id="強制覆蓋遠端-branch">強制覆蓋遠端 branch</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure></p><p>備註： 多人協作同 branch 的話，不建議這麼做，會被同事追殺</p><h2 id="多人協作同-branch要-push-時發現上面有新的-commit-時">多人協作同 branch，要 push 時，發現上面有新的 commit 時</h2><p>每個人開發速度不一樣，有的人比較快，有的會比較慢，<br>當要 <code>push</code> 發現上面已經有新的 commit 時，可用以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure></p><p>備註： 可能會有 conflict (檔案衝突)，與對方確認哪些需保留，Local 解完衝突後，便能 <code>git push</code></p><h2 id="用圖形化方式看-log-資訊">用圖形化方式看 log 資訊</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --all --graph</span><br></pre></td></tr></table></figure></p><p>備註： <code>--oneline</code>、<code>--all</code>、<code>--grpah</code> 這三個參數的放置沒有差</p><h4 id="示意圖">示意圖</h4><p><img src="https://i.imgur.com/5SgPrI9.png" alt></p><h2 id="local-和-remote-皆增加-tag">Local 和 remote 皆增加 tag</h2><p>假如： remote name 為 origin，default branch 為 master<br>情境： 將最新 remote 的 master 增加標籤 (tag)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git tag 20200913</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure></p><h4 id="動作說明">動作說明：</h4><ol><li>先切到 Local master</li><li>將最新資料 pull 到 Local</li><li>在 Local master 增加 tag</li><li>將 tag 上傳到 remote origin</li></ol><h2 id="查看兩個-tag-或-commit-間增加了哪些-pr">查看兩個 tag 或 commit 間增加了哪些 pr</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> old_tag_name..new_tag_name --pretty=<span class="string">'%s'</span> --reverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line"><span class="comment"># GitHub repo 設定中的 Allow merge commits 有打勾</span></span><br><span class="line">git <span class="built_in">log</span> 20200909..20200909-1 --pretty=<span class="string">'%s'</span> --reverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub repo 設定中的 Allow merge commits 沒打勾</span></span><br><span class="line">git <span class="built_in">log</span> 20200909-3..20200909-4 --pretty=<span class="string">'%s'</span> --reverse</span><br></pre></td></tr></table></figure></p><h4 id="github-repo-設定">GitHub repo 設定</h4><p><img src="https://i.imgur.com/RWCQvdC.png" alt></p><h4 id="範例圖-allow-merge-commits-有無打勾一次看">範例圖 (Allow merge commits 有無打勾一次看)</h4><p><img src="https://i.imgur.com/qRgMhkl.png" alt></p><h2 id="查看兩個-commit-間所有檔案的差異-diff">查看兩個 commit 間所有檔案的差異 (diff)</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff commit1..commit2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">git diff 57cb9613c..77b628f47</span><br></pre></td></tr></table></figure></p><h2 id="commit-後想反悔-恢復上一洞">commit 後想反悔 (恢復上一洞)</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想還原 11 次的話</span></span><br><span class="line">git reset HEAD~11</span><br></pre></td></tr></table></figure></p><h2 id="撿別的-commit-過來使用">撿別的 commit 過來使用</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit</span><br></pre></td></tr></table></figure></p><h4 id="超重要小技巧-可透過-git-cherry-pick-h-的方式看有哪些參數絕大部分指令皆能透過此技巧查詢參數或透過-tldr-git-cherry-pick-的方式看範例">超重要小技巧： 可透過 <code>git cherry-pick -h</code> 的方式，看有哪些參數，絕大部分指令皆能透過此技巧查詢參數或透過 <code>tldr git cherry-pick</code> 的方式看範例</h4><h2 id="整理自己-branch-的-commit">整理自己 branch 的 commit</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rebase 互動模式很好用，網路已有詳細文章可參考</span></span><br><span class="line"></span><br><span class="line">rebase -i commit</span><br></pre></td></tr></table></figure></p><h2 id="一定要知道的">一定要知道的</h2><p>平常不太會用到，需要時，卻很重要的存在<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭配之前所學，可用合體技搜尋 (若不清楚，可看 Linux 系列的文章)</span></span><br><span class="line">git reflog | rg <span class="string">'HEAD@'</span></span><br><span class="line">git reflog &gt;&gt; demo.log</span><br></pre></td></tr></table></figure></p><h2 id="小結">小結</h2><p>會把一些常用指令設定 alias，像是把 <code>status</code> 設定成 <code>s</code>、 <code>branch</code> 設定成 <code>b</code> ...等，依照自己常輸入指令設定，可以省下不少時間</p><p>多善用 <code>-h</code> 和 <code>tldr</code> 看下有哪些參數、範例，搭配實作，會更快上手喔</p><h2 id="參考資料">參考資料</h2><ol><li><a href="https://git-scm.com/book/zh-tw/" target="_blank" rel="noopener">Git-Book</a></li><li><a href="https://gitbook.tw/" target="_blank" rel="noopener">為你自己學 Git</a></li><li><a href="https://github.com/doggy8088/Learn-Git-in-30-days/" target="_blank" rel="noopener">30 天精通 Git 版本控管</a></li></ol><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10238939" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10238939</a><br>medium 文章連結：<a href="https://link.medium.com/Mmx5PSNfR9" target="_blank" rel="noopener">https://link.medium.com/Mmx5PSNfR9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/18/Day13-%E4%B8%80%E4%BA%9B-Git-%E6%8C%87%E4%BB%A4/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;記錄工作上用過的一些 Git 指令，主要是在 terminal (終端機) 或 VScode 的介面操作，沒什麼在用 &lt;a href=&quot;https://git-scm.com/docs/gitk&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day12 - 一些 Linux 套件 - 7-7 - 不實用篇 (cowsay、cmatrix)</title>
    <link href="https://riverye.com/2020/09/17/Day12-%E4%B8%80%E4%BA%9B-Linux-%E5%A5%97%E4%BB%B6-7-7-%E4%B8%8D%E5%AF%A6%E7%94%A8%E7%AF%87-cowsay%E3%80%81cmatrix/"/>
    <id>https://riverye.com/2020/09/17/Day12-一些-Linux-套件-7-7-不實用篇-cowsay、cmatrix/</id>
    <published>2020-09-16T16:00:00.000Z</published>
    <updated>2020-09-17T15:58:09.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>此為 Linux 相關的 7-7 篇，有實用篇，當然也有不實用篇 (笑<br>這篇的套件不裝也沒關係，裝了也不能幹嘛<br>有時自己會邊看邊笑 (廢到笑的那種 XD</p><h2 id="cowsay">cowsay</h2><p>透過 ASCII 產生一個角色 (預設為母牛)，並說出一段話</p><p>(謎之聲，套件名稱試著用台語發音看看 XD</p><p>備註：需另外安裝 <a href="https://github.com/tnalpgge/rank-amateur-cowsay" target="_blank" rel="noopener">官方網站</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install cowsay</span><br><span class="line"></span><br><span class="line">cowsay -l</span><br><span class="line">cowsay <span class="string">'hello world'</span></span><br><span class="line">cowsay -f dragon <span class="string">"一條龍laaa"</span></span><br><span class="line">cowsay -f kitty 根本不像kitty的的kitty</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>列出所有可用的角色： <code>-l</code><br>切換角色： <code>-f character</code></p><h4 id="cowsay-示意圖"><code>cowsay</code> 示意圖</h4><p><img src="https://i.imgur.com/xzOSTQh.png" alt></p><h2 id="cmatrix">cmatrix</h2><p>像駭客任務那樣的電腦螢幕畫面<br>很炫炮，然後..就沒有然後了 XD</p><p>備註：需另外安裝 <a href="https://github.com/abishekvashok/cmatrix" target="_blank" rel="noopener">官方網站</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install cmatrix</span><br><span class="line"></span><br><span class="line">cmatrix</span><br><span class="line">cmatrix -C red</span><br><span class="line">cmatrix -C yellow</span><br><span class="line">cmatrix -r</span><br></pre></td></tr></table></figure></p><p>離開方式： <code>鍵盤Q</code></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>設定顯示的顏色： <code>-C color</code><br>彩虹模式： <code>-r</code></p><h4 id="cmatrix-示意圖"><code>cmatrix</code> 示意圖</h4><p><img src="https://i.imgur.com/Accuqgc.gif" alt></p><h2 id="總整理">總整理</h2><table><thead><tr><th>MacOS / Linux 指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>cowsay</td><td>透過 ASCII 產生一個角色 (預設為母牛)，並說出一段話</td><td><code>cowsay -f dragon 安安</code></td></tr><tr><td>cmatrix</td><td>像駭客任務那樣的電腦螢幕畫面</td><td><code>cmatrix</code></td></tr></tbody></table><h2 id="小結">小結</h2><p>Linux 指令系列的最後一篇，以歡樂的方式收尾<br>有其它廢到笑或不實用的套件，歡迎留言交流~</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10238183" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10238183</a><br>medium 文章連結：<a href="https://link.medium.com/IaMPuOTAP9" target="_blank" rel="noopener">https://link.medium.com/IaMPuOTAP9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/17/Day12-%E4%B8%80%E4%BA%9B-Linux-%E5%A5%97%E4%BB%B6-7-7-%E4%B8%8D%E5%AF%A6%E7%94%A8%E7%AF%87-cowsay%E3%80%81cmatrix/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;此為 Linux 相關的 7-7 篇，有實用篇，當然也有不實用篇 (笑&lt;br&gt;
這篇的套件不裝也沒關係，裝了也不能幹嘛&lt;br&gt;
有時自己會邊看邊笑 (廢到笑的那種 XD&lt;/p&gt;
&lt;h2 id=&quot;cowsay&quot;&gt;cowsay&lt;/h2&gt;

      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day11 - 一些 Linux 套件 - 6-7 - 實用篇 (fzf、tldr)</title>
    <link href="https://riverye.com/2020/09/16/Day11-%E4%B8%80%E4%BA%9B-Linux-%E5%A5%97%E4%BB%B6-6-7-%E5%AF%A6%E7%94%A8%E7%AF%87-fzf%E3%80%81tldr/"/>
    <id>https://riverye.com/2020/09/16/Day11-一些-Linux-套件-6-7-實用篇-fzf、tldr/</id>
    <published>2020-09-15T16:00:00.000Z</published>
    <updated>2020-09-16T15:47:00.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>此為 Linux 相關的 6-7 篇，後 2 篇我自己是比較期待 <s>(才不會承認是因為需要寫得比較少呢</s><br>本篇以實用套件為主，幾乎每天都在使用的</p><h2 id="fzf">fzf</h2><p>指令模糊搜尋器<br>能快速搜尋「曾經輸入過」的指令<br>像平常起 rails server 指令是 <code>./bin/rails s -p 4000</code><br>輸入全部實在太長了<br>透過 <code>fzf</code> 只需輸入 <code>sp4</code> 就能快速找到</p><p>備註：需另外安裝 <a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener">官方網站</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install fzf</span><br></pre></td></tr></table></figure></p><p>使用方式： <code>Control（或 Ctrl）鍵 ⌃</code> + <code>R</code> + <code>command</code>離開方式： <code>ESC</code></p><h4 id="透過-fzf-搜尋曾輸入過的指令">透過 <code>fzf</code> 搜尋曾輸入過的指令</h4><p><img src="https://i.imgur.com/cIjlXSZ.gif" alt></p><h2 id="tldr">tldr</h2><p>查詢指令簡易說明與範例的工具<br>不瞞各位說，這 7 篇文章中，許多參數和範例，是透過 <code>tldr</code> 在參考的 XD</p><p>備註：需另外安裝 <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">官方網站</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install tldr</span><br><span class="line"></span><br><span class="line">tldr <span class="built_in">command</span></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">tldr tldr</span><br><span class="line">tldr cat</span><br><span class="line">tldr ps</span><br><span class="line">tldr grep</span><br></pre></td></tr></table></figure></p><h4 id="tldr-查詢的畫面"><code>tldr</code> 查詢的畫面</h4><p><img src="https://i.imgur.com/SU1mdpo.png" alt></p><h2 id="總整理">總整理</h2><table><thead><tr><th>MacOS / Linux 指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>fzf</td><td>指令模糊搜尋器</td><td><code>Control（或 Ctrl）鍵 ⌃</code> + <code>R</code> + <code>command</code></td></tr><tr><td>tldr</td><td>查詢指令簡易說明與範例的工具</td><td><code>tldr cat</code></td></tr></tbody></table><h2 id="小結">小結</h2><p>除了用 <code>fzf</code> 快速找曾經輸入過的指令外<br>也可將常用指令寫成 alias (像我自己將 <code>git status</code> 改成只需輸入 <code>git s</code> 即可)<br>若有不錯的套件，也歡迎在下方留言交流喔</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10237413" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10237413</a><br>medium 文章連結：<a href="https://link.medium.com/W5OE67YVN9" target="_blank" rel="noopener">https://link.medium.com/W5OE67YVN9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/16/Day11-%E4%B8%80%E4%BA%9B-Linux-%E5%A5%97%E4%BB%B6-6-7-%E5%AF%A6%E7%94%A8%E7%AF%87-fzf%E3%80%81tldr/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;此為 Linux 相關的 6-7 篇，後 2 篇我自己是比較期待 &lt;s&gt;(才不會承認是因為需要寫得比較少呢&lt;/s&gt;&lt;br&gt;
本篇以實用套件為主，幾乎每天都在使用的&lt;/p&gt;
&lt;h2 id=&quot;fzf&quot;&gt;fzf&lt;/h2&gt;
&lt;p&gt;指令模糊搜尋
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day10 - 一些常用 Linux 指令 - 5-7 (lsof、dig、curl、nc、nice、cpulimit)</title>
    <link href="https://riverye.com/2020/09/15/Day10-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-5-7-lsof%E3%80%81dig%E3%80%81curl%E3%80%81nc%E3%80%81nice%E3%80%81cpulimit/"/>
    <id>https://riverye.com/2020/09/15/Day10-一些常用-Linux-指令-5-7-lsof、dig、curl、nc、nice、cpulimit/</id>
    <published>2020-09-14T16:00:00.000Z</published>
    <updated>2020-09-15T15:59:12.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>此為 Linux 相關的 5-7 篇，終於進入 Linux 後半部，寫到有點厭世 XD</p><h2 id="lsof">lsof</h2><p>全名為 List Open Files，列出當前被開啟的文件資訊<br>非常實用的監控、查詢、診斷工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lsof path</span><br><span class="line">lsof -u username</span><br><span class="line">lsof +d path</span><br><span class="line">lsof +D path</span><br><span class="line">lsof -p PID</span><br><span class="line">lsof -i :port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">lsof ~/Documents/demo</span><br><span class="line">lsof -u root</span><br><span class="line">lsof +d ~/Documents/demo</span><br><span class="line">lsof +D ~/Documents/demo</span><br><span class="line">lsof -p 9527</span><br><span class="line">lsof -i :80</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>列出指定使用者打開的文件訊息： <code>-u username</code><br>列出目錄下被開啟的文件訊息： <code>+d path</code><br>列出目錄下被開啟的文件訊息 (含底下的目錄)： <code>+D path</code><br>列出指定 PID 所開啟的文件訊息： <code>-p PID</code><br>列出指定 port 的連線訊息： <code>-i :port</code></p><h2 id="dig">dig</h2><p>domain 查詢工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dig domain</span><br><span class="line">dig -x target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">dig www.google.com</span><br><span class="line">dig -x 8.8.8.8</span><br><span class="line">dig -x riverye.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將輸出結果存成檔案</span></span><br><span class="line">dig www.google.com &gt; info.log</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>反解析： <code>-x target</code><br>追蹤網域經過哪些節點： <code>+trace domain</code></p><h2 id="curl">curl</h2><p>與 server 雙向傳輸資料的工具</p><p>發現已經有許多不錯的文章可以參考<br><s>故省略 (威，又偷懶惹</s></p><p>僅寫下比較常用小技巧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將 https://riverye.com 查詢結果儲存成 riverye.html 檔案</span></span><br><span class="line">curl https://riverye.com &gt; ~/Documents/demo/riverye.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># -vvv 為顯示詳細資訊</span></span><br><span class="line">curl -vvv ifconfig.me</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查詢電腦的 IP</span></span><br><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure></p><h4 id="參考資料">參考資料</h4><ol><li><a href="https://blog.techbridge.cc/2019/02/01/linux-curl-command-tutorial/" target="_blank" rel="noopener">Linux Curl Command 指令與基本操作入門教學</a></li><li><a href="https://link.medium.com/J2F0UXTFy9" target="_blank" rel="noopener">[curl] 基本操作與指令 — 搭配 Lidemy HTTP Challenge 實作</a></li></ol><h2 id="nc">nc</h2><p>全名為 netcat，處理 TCP/UDP 的工具<br>非常實用，可以做許多事情，像是通訊埠掃描、簡易聊天室、檔案傳輸等</p><p>備註: 對於不熟悉的指令，皆可透過 <code>man</code> 來看文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nc -l port</span><br><span class="line">nc ip_address port</span><br><span class="line">nc -w timeout_in_seconds ipaddress port</span><br><span class="line">nc -v -z ip_address port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">nc -l localhost 8888</span><br><span class="line">nc localhost 8888</span><br><span class="line">nc -w 10 localhost 9527</span><br><span class="line">nc -n -v -z 192.168.1.1 80-100</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>監聽模式： <code>-l</code><br>設定 Timeout (單位: sec)： <code>-w timeout_in_seconds</code><br>不進行 DNS 查詢： <code>-n</code><br>顯示掃描訊息： <code>-v</code><br>只掃描無資料傳輸： <code>-z</code></p><p>簡易聊天室<br><img src="https://i.imgur.com/yvX4LH1.gif" alt></p><p>傳送檔案<br><img src="https://i.imgur.com/3PoWi7p.gif" alt></p><h4 id="參考資料">參考資料</h4><ol><li><a href="https://myapollo.com.tw/zh-tw/linux-command-nc/" target="_blank" rel="noopener">Linunx 指令 nc 用法</a></li><li><a href="https://blog.gtwang.org/linux/linux-utility-netcat-examples/" target="_blank" rel="noopener">Netcat（Linux nc 指令）網路管理者工具實用範例</a></li></ol><h2 id="nice">nice</h2><p>設定程式執行的優先權 (範圍是 -20 ~ 19)<br>-20 為最高優先權<br>19 為最低優先權</p><p>備註: 輸入小於 0 ，要有 root 權限，如果範圍超過 19，則會做為 19<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nice -n count <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">sudo nice -n 15 chromedriver</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>設定優先權 (N 範圍是 -20 ~ 19)： <code>-n N</code></p><h2 id="cpulimit">cpulimit</h2><p>限制 CPU 使用量</p><p>備註: 需另外安裝 <a href="https://github.com/opsengine/cpulimit" target="_blank" rel="noopener">官方網站</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install cpulimit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制 CPU 使用上限為 70%</span></span><br><span class="line">cpulimit -l 70 <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">cpulimit -l 70 rg <span class="string">'hello'</span></span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>限制 CPU 上限 (必填，N 範圍是 0 ~ 400)： <code>-l N</code> or <code>--limit=N</code><br>顯示控制統計： <code>-v</code> or <code>--verbose</code></p><p>(謎之聲，未來會有文章分享 <code>nice</code> 和 <code>cpulimit</code> 的應用</p><h2 id="總整理">總整理</h2><table><thead><tr><th>MacOS / Linux 指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>lsof</td><td>列出當前被開啟的文件資訊</td><td><code>lsof ~/Documents/demo</code></td></tr><tr><td>dig</td><td>domain 查詢工具</td><td><code>dig www.google.com</code></td></tr><tr><td>curl</td><td>與 server 雙向傳輸資料的工具</td><td><code>curl -vvv ifconfig.me</code></td></tr><tr><td>nc</td><td>處理 TCP/UDP 的工具</td><td><code>nc -v www.google.com 80</code></td></tr><tr><td>nice</td><td>設定程式執行的優先權 (範圍是 -20 ~ 19)</td><td><code>nice -n 19 htop</code></td></tr><tr><td>cpulimit</td><td>限制 CPU 使用量</td><td><code>cpulimit -l 50 htop</code></td></tr></tbody></table><h2 id="小結">小結</h2><p>發現這篇每個指令都可以寫成一篇，<br>網路搜尋能找到許多相關範例應用的教學文章，<br>由於本篇想以常用應用為主，<s>其實是不想寫太長</s><br>更多的應用可以透過 <code>man</code> 或上網查詢<br>也歡迎在下方留言互相交流</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10236845" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10236845</a><br>medium 文章連結：<a href="https://link.medium.com/It3HtR6gM9" target="_blank" rel="noopener">https://link.medium.com/It3HtR6gM9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/15/Day10-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-5-7-lsof%E3%80%81dig%E3%80%81curl%E3%80%81nc%E3%80%81nice%E3%80%81cpulimit/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;此為 Linux 相關的 5-7 篇，終於進入 Linux 後半部，寫到有點厭世 XD&lt;/p&gt;
&lt;h2 id=&quot;lsof&quot;&gt;lsof&lt;/h2&gt;
&lt;p&gt;全名為 List Open Files，列出當前被開啟的文件資訊&lt;br&gt;
非常實用的
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day09 - 一些常用 Linux 指令 - 4-7 (grep、rg、luit、iconv、cal、date)</title>
    <link href="https://riverye.com/2020/09/14/Day09-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-4-7-grep%E3%80%81rg%E3%80%81luit%E3%80%81iconv%E3%80%81cal%E3%80%81date/"/>
    <id>https://riverye.com/2020/09/14/Day09-一些常用-Linux-指令-4-7-grep、rg、luit、iconv、cal、date/</id>
    <published>2020-09-13T16:00:00.000Z</published>
    <updated>2020-09-13T16:10:55.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>此為 Linux 相關的 4-7 篇，有準備情境讓大家可以練習，開始會有組合技的使用技巧</p><h4 id="情境練習">情境練習</h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將以下資訊儲存成 demo.log</span></span><br><span class="line"></span><br><span class="line">INFO [2099-01-11 13:14:40]: order_id: 0001, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-11 14:15:41]: 其它資訊</span><br><span class="line">INFO [2099-01-11 14:18:42]: order_id: 0002, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-12 10:00:10]: order_id: 0003, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-12 10:00:13]: 其它資訊</span><br><span class="line">INFO [2099-01-12 11:22:40]: order_id: ----, message: <span class="string">"建立失敗"</span></span><br><span class="line">INFO [2099-01-15 14:15:40]: order_id: 0004, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-15 23:34:10]: order_id: 0005, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-15 14:15:32]: order_id: 0006, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-15 14:15:33]: 其它資訊</span><br><span class="line">INFO [2099-01-16 14:15:24]: order_id: 0007, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-16 14:15:25]: order_id: ----, message: <span class="string">"建立失敗"</span></span><br><span class="line">INFO [2099-01-16 14:15:29]: order_id: 0008, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-01-16 14:15:30]: 其它資訊</span><br><span class="line">INFO [2099-01-16 14:15:30]: order_id: ----, message: <span class="string">"建立失敗"</span></span><br><span class="line">INFO [2099-12-25 08:15:40]: order_id: 0009, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-12-25 09:15:40]: 其它資訊</span><br><span class="line">INFO [2099-12-25 10:15:40]: order_id: 0010, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-12-25 11:15:40]: order_id: 0011, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-12-25 11:15:40]: order_id: 0012, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-12-25 15:15:40]: 其它資訊</span><br><span class="line">INFO [2099-12-25 16:15:40]: order_id: ----, message: <span class="string">"建立失敗"</span></span><br><span class="line">INFO [2099-12-25 17:15:40]: order_id: 0013, message: <span class="string">"建立成功"</span></span><br><span class="line">INFO [2099-12-25 20:15:40]: 其它資訊</span><br></pre></td></tr></table></figure></p><h2 id="grep">grep</h2><p>找出符合搜尋條件的訊息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 關鍵字 路徑</span></span><br><span class="line">grep search_pattern path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出正在運行中的程式，關鍵字為 line</span></span><br><span class="line">ps aux | grep line</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符合條件的上文也顯示 15 行</span></span><br><span class="line">grep -A 15 <span class="string">"成功"</span> demo.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符合條件的下文也顯示 20 行</span></span><br><span class="line">grep -B 20 <span class="string">"成功"</span> demo.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符合條件的下下各顯示 5 行</span></span><br><span class="line">grep -C 5 <span class="string">"成功"</span> demo.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 計算關鍵字出現的次數</span></span><br><span class="line">grep -c <span class="string">"成功"</span> demo.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 過濾除了關鍵字的訊息</span></span><br><span class="line">grep -v <span class="string">"其它"</span> demo.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出符合 A or B 關鍵字的訊息</span></span><br><span class="line">grep -E <span class="string">"2099|成功"</span> demo.log</span><br><span class="line">grep -E <span class="string">'2099|成功'</span> demo.log</span><br><span class="line">grep <span class="string">'2099\|成功'</span> demo.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出符合 A and B 的關鍵字訊息</span></span><br><span class="line">grep <span class="string">"2099"</span> demo.log | grep 成功</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 2099-01-16 建立成功的訂單數量</span></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">grep <span class="string">'2099-01-16'</span> demo.log | grep -c 建立成功</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">grep <span class="string">'2099-01-16'</span> demo.log | grep 建立成功 | wc -l</span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line">grep <span class="string">'2099-01-16'</span> demo.log | grep -v -c <span class="string">'建立失敗\|其它資訊'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 2099-01-16 建立成功的資訊，並反轉印出</span></span><br><span class="line">grep <span class="string">'2099-01-16'</span> demo.log | grep 建立成功 | tac</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>符合條件的上文也顯示 n 行： <code>-A n</code><br>符合條件的下文也顯示 n 行： <code>-B n</code><br>符合條件的上下各顯示 n 行： <code>-C n</code><br>計算符合條件的數量： <code>-c</code><br>除了關鍵字以外的訊息，其它全顯示： <code>-v</code><br>用正規表示式搜尋 (regexp)： <code>-E</code></p><h2 id="rg">rg</h2><p>全名為 ripgrep ，為 <code>grep</code> 加強版，<br>用起來手感與 <code>grep</code> 差不多，搜尋速度更快，個人習慣以 <code>rg</code> 取代 <code>grep</code></p><p>備註: 需另外安裝 <a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener">官方網站</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS、Linux 原生不支援這指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install ripgrep</span><br><span class="line"></span><br><span class="line">rg 建立成功</span><br><span class="line">rg -uu 建立成功</span><br><span class="line">rg -C 7 建立失敗</span><br><span class="line">rg <span class="string">'2099|成功'</span> demo.log</span><br><span class="line">rg <span class="string">"2099"</span> demo.log | rg 成功</span><br><span class="line">rg -t <span class="built_in">log</span> 成功</span><br><span class="line"></span><br><span class="line">rg -z <span class="string">"成功"</span></span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>符合條件的上文也顯示 n 行： <code>-A n</code><br>符合條件的下文也顯示 n 行： <code>-B n</code><br>符合條件的上下各顯示 n 行： <code>-C n</code><br>計算符合條件的數量： <code>-c</code><br>除了關鍵字以外的訊息，其它全顯示： <code>-v</code><br>隱藏檔案及 <code>.gitignore</code> 檔也一併搜尋： <code>-uu</code><br>針對特定副檔名搜尋： <code>-t type</code><br>壓縮檔也一併搜尋： <code>-z</code> (支援格式 gzip、bzip2、xz、LZ4、LZMA、Brotli、Zstd)</p><p>(謎之聲，習慣在終端機直接輸入 <code>rg 關鍵字</code>，快速找該目錄底下所有符合條件的檔案及內容</p><h2 id="luit">luit</h2><p>將文件編碼轉換成另一種格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS 原生不支援這指令</span></span><br><span class="line"><span class="comment"># Ubuntu 有支援</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install luit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">luit -encoding big5 cat demo.txt</span><br><span class="line">luit -encoding big5 rg <span class="string">'訂單'</span> demo.txt</span><br></pre></td></tr></table></figure></p><h2 id="iconv">iconv</h2><p>多種國際編碼格式之間進行文字內碼的轉換<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iconv -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">cat order_info.txt | iconv -f big5</span><br><span class="line">iconv -f UTF-16 demo.log &gt; hello.log</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>顯示所有支援的編碼格式： <code>-l</code><br>將檔案進行編碼轉檔後，另存新檔案： <code>-f from_encoding input_file &gt; output_file</code></p><h4 id="以-big5-編碼檔案為例">以 BIG5 編碼檔案為例</h4><p><img src="https://i.imgur.com/akmeLJ3.png" alt></p><h2 id="cal">cal</h2><p>顯示行事曆資訊<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cal</span><br><span class="line">cal -3</span><br><span class="line">cal -m 12</span><br><span class="line">cal -y 2012</span><br><span class="line">cal 1 2012</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>顯示當月的前後一個月： <code>-3</code><br>顯示當年指定月份 (month 為 1-12)： <code>-m month</code><br>顯示指定年份月曆 (year 為 1..9999)： <code>-y year</code><br>顯示特定月份日曆 (參數範圍如上)： <code>month year</code></p><h2 id="date">date</h2><p>顯示系統日期時間資訊<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date</span><br><span class="line">date +%s</span><br><span class="line">date -r 1598937256</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>將當下時間轉成 Unix timestamp： <code>+%s</code><br>將 Unix timestamp 轉成人類看得懂的： <code>-r timestamp</code></p><h2 id="總整理">總整理</h2><table><thead><tr><th>MacOS / Linux 指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>grep</td><td>找出符合搜尋條件的訊息</td><td><code>rails routes | grep admin</code></td></tr><tr><td>rg</td><td><code>grep</code> 加強版</td><td><code>rg 訂單名稱</code></td></tr><tr><td>luit</td><td>將文件編碼轉換成另一種格式</td><td><code>luit -encoding big5 cat demo.txt</code></td></tr><tr><td>iconv</td><td>多種國際編碼格式之間進行文字內碼的轉換</td><td><code>cat order_info.txt | iconv -f big5</code></td></tr><tr><td>cal</td><td>顯示行事曆資訊</td><td><code>cal -m 7</code></td></tr><tr><td>date</td><td>顯示系統日期時間資訊</td><td><code>date</code></td></tr></tbody></table><h2 id="小結">小結</h2><p>這篇花蠻多時間在想情境及準備假資料，透過範例，能更快上手並學會組合技，<br>若覺得受用歡迎在下方留言或交流喔</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10236391" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10236391</a><br>medium 文章連結：<a href="https://link.medium.com/YFjvigcCK9" target="_blank" rel="noopener">https://link.medium.com/YFjvigcCK9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/14/Day09-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-4-7-grep%E3%80%81rg%E3%80%81luit%E3%80%81iconv%E3%80%81cal%E3%80%81date/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;此為 Linux 相關的 4-7 篇，有準備情境讓大家可以練習，開始會有組合技的使用技巧&lt;/p&gt;
&lt;h4 id=&quot;情境練習&quot;&gt;情境練習&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day08 - 一些常用 Linux 指令 - 3-7 (cat、tac、head、tail、vi、sed)</title>
    <link href="https://riverye.com/2020/09/13/Day08-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-3-7-cat%E3%80%81tac%E3%80%81head%E3%80%81tail%E3%80%81vi%E3%80%81sed/"/>
    <id>https://riverye.com/2020/09/13/Day08-一些常用-Linux-指令-3-7-cat、tac、head、tail、vi、sed/</id>
    <published>2020-09-12T16:00:00.000Z</published>
    <updated>2020-09-12T16:02:12.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>此為 Linux 相關的 3-7 篇，都是很常用的指令，每天學一點，並常使用，便會記下成為反射動作之一</p><h2 id="cat">cat</h2><p>將該檔案內容印在終端機上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> | cat</span><br><span class="line">cat -n file</span><br><span class="line">cat file</span><br><span class="line">cat file1 file2</span><br><span class="line">cat file1 &gt; target_file</span><br><span class="line">cat file1 &gt;&gt; target_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">git <span class="built_in">log</span> | cat</span><br><span class="line">cat -n 001.log</span><br><span class="line">cat 001.log &gt; 002.log</span><br><span class="line">cat 001.log &gt;&gt; 002.log</span><br><span class="line">cat 001.log 002.log &gt; 003.log</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>將輸入指令執行結果顯示在終端機上： <code>| cat</code><br>顯示行數： <code>-n</code><br>將多個文件覆蓋到目標文件中： <code>&gt;</code><br>將多個文件追加到目標文件中： <code>&gt;&gt;</code><br>備註: 目標文件若原本不存在，則直接建立新檔案</p><h2 id="tac">tac</h2><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tac file</span><br><span class="line"><span class="built_in">command</span> | tac</span><br><span class="line">tac file1 file2 &gt; target_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --all --graph | tac</span><br><span class="line">tac 001.log</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>將輸入指令執行結果顯示在終端機上： <code>| tac</code><br>將多個文件覆蓋到目標文件中： <code>&gt;</code><br>將多個文件追加到目標文件中： <code>&gt;&gt;</code><br>備註: 目標文件若原本不存在，則直接建立新檔案</p><h2 id="head">head</h2><p>看該檔案頭部 (預設為 10 行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">head file</span><br><span class="line">head -n 30 file</span><br><span class="line">head -c 25 file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">head 001.log</span><br><span class="line">head -n 30 001.log</span><br><span class="line">head -c 25 001.log</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>顯示前 N 行的訊息 (N 為數字)： <code>-n 30</code><br>顯示前 N bytes 的字元 (N 為數字)： <code>-c 25</code></p><h2 id="tail">tail</h2><p>看該檔案尾部 (預設為 10 行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tail file</span><br><span class="line">tail -n 15 file</span><br><span class="line">tail -f file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">tail 001.log</span><br><span class="line">tail -n 001.log</span><br><span class="line">tail -f 001.log</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>顯示最後 N 行的訊息 (N 為數字)： <code>-n 30</code><br>持續讀取檔案，直到按 <code>Ctrl + c</code> 為止 (可觀察檔案持續更新的內容)： <code>-f</code></p><h2 id="vi">vi</h2><p>vi 編輯器，可新增、修改檔案、搜尋並取代文字等<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 001.log</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用指令說明">幾個常用指令說明：</h4><p>新增、編輯檔案： <code>vi file_name</code><br>編輯模式： 進入 vi 後，鍵盤 <code>i</code><br>離開編輯模式 (並非離開 vi 編輯器喔)： <code>ESC</code><br>不儲存離開 vi： <code>:q</code><br>不儲存強制離開 vi： <code>:q!</code><br>儲存且離開 vi ： <code>:wq</code><br>將檔案還原到最初狀態(進入 vi 後一開始的樣貌) ： <code>:e!</code><br>針對特定行數，搜尋並取代： <code>:s/string/new_string/g</code><br>針對整份文件，搜尋並取代： <code>:%s/string/new_string/g</code></p><h3 id="示範如何針對特定行數及整份文件進行搜尋並取代文字">示範如何針對特定行數及整份文件進行搜尋並取代文字</h3><p><img src="https://i.imgur.com/drxy63J.gif" alt></p><p>備註:  除了 vi 編輯器外，Linux 上知名編輯器還有 vim、nano</p><h2 id="sed">sed</h2><p>檔案處理工具，是一個管道命令，以行為單位處理，能做到字串取代、複製、刪除等<br>在寫這段時，發現網路上已經有許多不錯的文章及詳細說明，故省略撰寫 XD<br>挑了幾篇覺得不錯的，放下方參考文件，跟著練習，會更有感覺及上手喔 :)</p><h4 id="參考資料">參考資料</h4><ol><li><a href="http://linux.vbird.org/linux_basic/0330regularex.php#sed" target="_blank" rel="noopener">鳥哥的 Linux 私房菜 -- 第十一章、正規表示法與文件格式化處理</a></li><li><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/392291/" target="_blank" rel="noopener">Linux中 sed 和 awk的用法詳解</a></li><li><a href="https://terryl.in/zh/linux-sed-command/" target="_blank" rel="noopener">Linux 指令 SED 用法教學、取代範例、詳解</a></li></ol><h2 id="總整理">總整理</h2><table><thead><tr><th>MacOS / Linux 指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>cat</td><td>將該檔案內容印在終端機上</td><td><code>cat demo.html</code></td></tr><tr><td>tac</td><td>反過來印出 cat 的內容</td><td><code>tac demo.html</code></td></tr><tr><td>head</td><td>看該檔案頭部 (預設為 10 行)</td><td><code>head -n 3 demo.html</code></td></tr><tr><td>tail</td><td>看該檔案尾部 (預設為 10 行)</td><td><code>tail -n 5 demo.html</code></td></tr><tr><td>vi</td><td>vi 編輯器，可新增、修改檔案、搜尋並取代文字等</td><td><code>vi demo.html</code></td></tr><tr><td>sed</td><td>檔案處理工具，是一個管道命令，以行為單位處理，能做到字串取代、複製、刪除等</td><td><code>sed -n '$p'</code></td></tr></tbody></table><h2 id="小結">小結</h2><p>在搜尋取代整份文件時，習慣以 <code>vi</code> 進行操作，<code>sed</code> 反而比較少用，<br>之前在批次改 SQL 資料庫的某字串時，覺得蠻方便的，與使用習慣有關</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10236105" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10236105</a><br>medium 文章連結：<a href="https://link.medium.com/4hDsZdhXI9" target="_blank" rel="noopener">https://link.medium.com/4hDsZdhXI9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/13/Day08-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-3-7-cat%E3%80%81tac%E3%80%81head%E3%80%81tail%E3%80%81vi%E3%80%81sed/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;此為 Linux 相關的 3-7 篇，都是很常用的指令，每天學一點，並常使用，便會記下成為反射動作之一&lt;/p&gt;
&lt;h2 id=&quot;cat&quot;&gt;cat&lt;/h2&gt;
&lt;p&gt;將該檔案內容印在終端機上&lt;br&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day07 - 一些常用 Linux 指令 - 2-7 (ps、top、htop、free、df、du、kill)</title>
    <link href="https://riverye.com/2020/09/12/Day07-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-2-7-ps%E3%80%81top%E3%80%81htop%E3%80%81free%E3%80%81df%E3%80%81du%E3%80%81kill/"/>
    <id>https://riverye.com/2020/09/12/Day07-一些常用-Linux-指令-2-7-ps、top、htop、free、df、du、kill/</id>
    <published>2020-09-11T16:00:00.000Z</published>
    <updated>2020-09-11T16:02:59.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>此為 Linux 相關的 2-7 篇，除了內建指令外，開始會介紹些不錯套件，需另外安裝的，會備註並附上官方連結</p><h2 id="ps">ps</h2><p>顯示運行中的程式相關資訊<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只顯示符合 chrome 關鍵字的資訊</span></span><br><span class="line">ps aux | grep chrome</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>列出所有正在執行中的程式： <code>aux</code><br>只找符合特定關鍵字的內容： <code>| grep string</code></p><h2 id="top">top</h2><p>即時持續地顯示運行中的程式資訊<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="comment"># 離開方式為 鍵盤Q</span></span><br></pre></td></tr></table></figure></p><h2 id="htop">htop</h2><p>即時持續地顯示運行中的程式資訊<br><code>top</code> 的加強版，外觀、功能也更強</p><p>備註: 需另外安裝 <a href="https://github.com/hishamhm/htop" target="_blank" rel="noopener">官方網站</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS 安裝指令</span></span><br><span class="line">brew install htop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行方式</span></span><br><span class="line">htop</span><br></pre></td></tr></table></figure></p><p>htop 介面<br><img src="https://i.imgur.com/Xe5t1ZG.png" alt></p><h2 id="free">free</h2><p>顯示記憶體使用狀況<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS 原生不支援這指令</span></span><br><span class="line"><span class="comment"># Ubuntu 有支援</span></span><br><span class="line"></span><br><span class="line">free</span><br></pre></td></tr></table></figure></p><p>(謎之聲，有了 <code>htop</code> 之後，<code>top</code> 和 <code>free</code> 可以洗洗睡了?</p><h2 id="df">df</h2><p>從 Filesystem (檔案系統) 取得目前的空間分配資訊，完整顯示目前檔案系統上還可以使用的容量大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br><span class="line">df .</span><br><span class="line">df -h ~/Documents/demo</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>以較易閱讀方式呈現： <code>-h</code></p><h2 id="du">du</h2><p>掃描當前目錄結構，並逐一累加檔案大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du -h</span><br><span class="line">du -hm ~/Documents/demo</span><br><span class="line">du -h -m ~/Documents/demo</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>以較易閱讀方式呈現： <code>-h</code><br>單位以 KB： <code>-k</code><br>單位以 MB： <code>-m</code><br>單位以 GB： <code>-g</code></p><h2 id="kill">kill</h2><p>強制終止程式執行</p><p>情境：遇到程式當掉，卻無如預期關閉程式，甚至導致 CPU 飆高，需透過 <code>kill</code> 來處理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 PID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line"><span class="built_in">kill</span> -9 9527</span><br></pre></td></tr></table></figure></p><h2 id="總整理">總整理</h2><table><thead><tr><th>MacOS / Linux 指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>ps</td><td>顯示運行中的程式相關資訊</td><td><code>ps aux</code></td></tr><tr><td>top</td><td>即時持續地顯示運行中的程式資訊</td><td><code>top</code></td></tr><tr><td>htop</td><td>即時持續地顯示運行中的程式資訊</td><td><code>htop</code></td></tr><tr><td>free</td><td>顯示記憶體使用狀況</td><td><code>free</code></td></tr><tr><td>df</td><td>顯示目前還可以使用的容量大小</td><td><code>df</code></td></tr><tr><td>du</td><td>掃描當前目錄結構，並逐一累加檔案大小</td><td><code>du -h</code></td></tr><tr><td>kill</td><td>強制終止程式執行</td><td><code>kill -9 9527</code></td></tr></tbody></table><h2 id="小結">小結</h2><p><code>htop</code> 真的很實用，畫面看起來也比較炫砲，也能直接 <code>kill</code> PID，推薦必裝的套件之一。<br>其實每個指令都能寫成一篇，網路查下便能找到各指令的深入說明，更多細節參數設定等，本篇以應用為主。</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10235798" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10235798</a><br>medium 文章連結：<a href="https://link.medium.com/KnBM0DriH9" target="_blank" rel="noopener">https://link.medium.com/KnBM0DriH9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/12/Day07-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-2-7-ps%E3%80%81top%E3%80%81htop%E3%80%81free%E3%80%81df%E3%80%81du%E3%80%81kill/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;此為 Linux 相關的 2-7 篇，除了內建指令外，開始會介紹些不錯套件，需另外安裝的，會備註並附上官方連結&lt;/p&gt;
&lt;h2 id=&quot;ps&quot;&gt;ps&lt;/h2&gt;
&lt;p&gt;顯示運行中的程式相關資訊&lt;br&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day06 - 一些常用 Linux 指令 - 1-7 - 基礎篇 (exit、pwd、ls、cd、touch、mkdir、rm、cp、scp、mv、sudo、man、help、clear、which、find)</title>
    <link href="https://riverye.com/2020/09/11/Day06-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-1-7-%E5%9F%BA%E7%A4%8E%E7%AF%87-exit%E3%80%81pwd%E3%80%81ls%E3%80%81cd%E3%80%81touch%E3%80%81mkdir%E3%80%81rm%E3%80%81cp%E3%80%81scp%E3%80%81mv%E3%80%81sudo%E3%80%81man%E3%80%81help%E3%80%81clear%E3%80%81which%E3%80%81find/"/>
    <id>https://riverye.com/2020/09/11/Day06-一些常用-Linux-指令-1-7-基礎篇-exit、pwd、ls、cd、touch、mkdir、rm、cp、scp、mv、sudo、man、help、clear、which、find/</id>
    <published>2020-09-10T16:00:00.000Z</published>
    <updated>2020-09-11T15:37:00.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>預計會有 7 篇介紹 Linux 指令與套件，並提供一些範例讓大家可以更快了解及如何應用，那麼，直接開始吧</p><hr><h2 id="exit">exit</h2><p>嗯，就是離開，沒什麼好說的 XD<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><h2 id="pwd">pwd</h2><p>取得目前的路徑<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /Users/user/Documents/demo/</span></span><br></pre></td></tr></table></figure></p><h2 id="ls">ls</h2><p>取得當前資料夾與檔案名稱<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ls -la</span><br><span class="line">ls -laSrt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可依需求調整參數</span></span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>以行的方式成列： <code>-l</code><br>顯示隱藏檔案： <code>-a</code><br>按照檔案大小排序： <code>-S</code><br>反向排序： <code>-r</code><br>按照修改時間排序： <code>-t</code></p><h4 id="查詢電腦規格-lshw">查詢電腦規格 <code>lshw</code></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS 原生不支援這指令</span></span><br><span class="line"><span class="comment"># Ubuntu 有支援</span></span><br><span class="line"></span><br><span class="line">lshw</span><br></pre></td></tr></table></figure></p><h4 id="查詢-cpu-規格-lscpu">查詢 CPU 規格 <code>lscpu</code></h4><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MacOS 原生不支援這指令</span></span><br><span class="line"><span class="comment"># Ubuntu 有支援</span></span><br><span class="line"></span><br><span class="line">lscpu</span><br></pre></td></tr></table></figure></p><h2 id="cd">cd</h2><p>切換目錄<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切到桌面</span></span><br><span class="line"><span class="built_in">cd</span> ~/Desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切到上一層</span></span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切回上一次的目錄</span></span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure></p><h2 id="touch">touch</h2><p>建立檔案<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch test.log</span><br><span class="line">touch hello.html</span><br></pre></td></tr></table></figure></p><p>建立指定日期時間檔案<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch -t YYYYMMDDHHMM.SS filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">touch -t 202009011800.11 test.log</span><br></pre></td></tr></table></figure></p><h2 id="mkdir">mkdir</h2><p>建立資料夾<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">mkdir hello_world</span><br></pre></td></tr></table></figure></p><h2 id="rm">rm</h2><p>刪除檔案<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm filename</span><br><span class="line">rm -i filename</span><br><span class="line">rm -r directory</span><br><span class="line">rm -d directory</span><br><span class="line">rm -rf anything</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>刪除前會再次確認： <code>-i</code><br>刪除資料夾(含裡面的檔案)： <code>-r</code><br>強制刪除(不會有提示)： <code>-f</code><br>只刪除空資料夾： <code>-d</code></p><h2 id="cp">cp</h2><p>複製檔案<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp 來源檔案 目的地(可以是不同路徑並換檔名)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">cp test.TXT /tmp/<span class="built_in">test</span>-1.TXT</span><br></pre></td></tr></table></figure></p><h3 id="scp">scp</h3><p>在不同的 Linux 主機之間複製檔案</p><p>備註： 在不同 Linux 主機之間使用 scp 指令複製檔案時，遠端的 Linux 主機必須要開啟 SSH 遠端登入服務，否則無法使用 scp 指令複製檔案<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scp [帳號@來源主機]:來源檔案 目的地</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下指示為範例，直接輸入不會有反應</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 將遠端「考試100分.pdf」下載到「本地桌面」</span></span><br><span class="line">scp user_name@riverye.com:/home/data/考試100分.pdf ~/Desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將遠端「本地桌面」的「考試100分.pdf」上傳到遠端</span></span><br><span class="line">scp ~/Desktop/考試100分.pdf user_name@riverye.com:/home/data/</span><br></pre></td></tr></table></figure></p><h2 id="mv">mv</h2><p>移動檔案<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv source_file target</span><br><span class="line">mv -f source_file target</span><br><span class="line">mv -i source_file target</span><br><span class="line">mv -n source_file target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">mv -i test.rb /tmp/</span><br></pre></td></tr></table></figure></p><h4 id="幾個常用參數說明">幾個常用參數說明：</h4><p>遇到同樣檔名要覆蓋前，不提示： <code>-f</code><br>遇到同樣檔名要覆蓋前，會有提示： <code>-i</code><br>不覆蓋同樣檔名： <code>-n</code></p><h2 id="sudo">sudo</h2><p>使用最高權限執行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo 你要下的指令</span><br></pre></td></tr></table></figure></p><h2 id="man">man</h2><p>查看指令說明文件</p><p>備註： 不知別的指令怎麼用，可以用這個查詢，很常用的小技巧!!!<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">man 指令</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">man ls</span><br><span class="line">man rm</span><br><span class="line">man sudo</span><br></pre></td></tr></table></figure></p><h2 id="help">help</h2><p>查看指令說明</p><p>備註： 很常用的小技巧!!<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">指令 --<span class="built_in">help</span></span><br><span class="line">指令 -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line">cp --<span class="built_in">help</span></span><br><span class="line">cp -h</span><br></pre></td></tr></table></figure></p><h2 id="clear">clear</h2><p>清除終端機上的訊息 (往上捲看得到)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure></p><h2 id="which">which</h2><p>查詢指令的來源路徑<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> executable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 範例</span></span><br><span class="line"><span class="built_in">which</span> sudo</span><br><span class="line"><span class="built_in">which</span> ruby</span><br><span class="line"><span class="built_in">which</span> rails</span><br></pre></td></tr></table></figure></p><h2 id="find">find</h2><p>找出符合條件的檔案或資料夾<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只找特定檔案大小範圍且符合關鍵字的檔案</span></span><br><span class="line">find <span class="built_in">test</span> -size +10k -size -10M</span><br></pre></td></tr></table></figure></p><hr><h2 id="總整理">總整理</h2><table><thead><tr><th>MacOS / Linux 指令</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td>exit</td><td>離開</td><td><code>exit</code></td></tr><tr><td>pwd</td><td>取得目前的路徑</td><td><code>pwd</code></td></tr><tr><td>ls</td><td>取得當前資料夾與檔案名稱</td><td><code>ls</code></td></tr><tr><td>cd</td><td>切換目錄</td><td><code>cd ~</code></td></tr><tr><td>touch</td><td>建立檔案</td><td><code>touch demo.html</code></td></tr><tr><td>mkdir</td><td>建立資料夾</td><td><code>mkdir demo</code></td></tr><tr><td>rm</td><td>刪除檔案</td><td><code>rm demo.html</code></td></tr><tr><td>cp</td><td>複製檔案</td><td><code>cp demo.html demo1.html</code></td></tr><tr><td>scp</td><td>在不同的 Linux 主機之間複製檔案</td><td><code>scp user_name@riverye.com:/home/data/考試100分.pdf ~/Desktop</code></td></tr><tr><td>mv</td><td>移動檔案</td><td><code>mv demo1.html ~</code></td></tr><tr><td>sudo</td><td>使用最高權限</td><td><code>sudo 欲使用的指令</code></td></tr><tr><td>man</td><td>查看指令說明文件</td><td><code>man pwd</code></td></tr><tr><td>help</td><td>查看指令說明</td><td><code>mv --help</code></td></tr><tr><td>clear</td><td>清除終端機上的訊息(往上捲看得到)</td><td><code>clear</code></td></tr><tr><td>which</td><td>查詢指令的來源路徑</td><td><code>which sudo</code></td></tr><tr><td>find</td><td>找出符合條件的檔案或資料夾</td><td><code>find .</code></td></tr></tbody></table><hr><h2 id="小結">小結</h2><p>這篇不知不覺就花了 5 小時左右準備和撰寫，<br>寫到眼睛快花了，過程中不停用 <code>man</code> 與  <code>help</code> 查詢其他指令的參數說明，<br>針對比較常用的提出來說明，若有不錯的組合技，歡迎下方留言交流 :)</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10235530" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10235530</a><br>medium 文章連結：<a href="https://link.medium.com/fi1zYzsEF9" target="_blank" rel="noopener">https://link.medium.com/fi1zYzsEF9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/11/Day06-%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4-1-7-%E5%9F%BA%E7%A4%8E%E7%AF%87-exit%E3%80%81pwd%E3%80%81ls%E3%80%81cd%E3%80%81touch%E3%80%81mkdir%E3%80%81rm%E3%80%81cp%E3%80%81scp%E3%80%81mv%E3%80%81sudo%E3%80%81man%E3%80%81help%E3%80%81clear%E3%80%81which%E3%80%81find/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;預計會有 7 篇介紹 Linux 指令與套件，並提供一些範例讓大家可以更快了解及如何應用，那麼，直接開始吧&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;exit&quot;&gt;exit&lt;/h2&gt;
&lt;p&gt;嗯，就是離開，沒什麼好說的 XD&lt;br&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Day05 - Mac、Chrome、iTerm2、Visual Studio Code 上常用的快捷鍵</title>
    <link href="https://riverye.com/2020/09/10/Day05-Mac%E3%80%81Chrome%E3%80%81iTerm2%E3%80%81Visual-Studio-Code-%E4%B8%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%8D%B5/"/>
    <id>https://riverye.com/2020/09/10/Day05-Mac、Chrome、iTerm2、Visual-Studio-Code-上常用的快捷鍵/</id>
    <published>2020-09-09T16:00:00.000Z</published>
    <updated>2020-09-10T15:58:57.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>紀錄個人常用的 Mac 、 Chrome 、 iTerm2 、 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a> (以下簡稱 VS code) 的快捷鍵，若有覺得不錯但我沒分享的快捷鍵，歡迎留言互相交流 :)</p><hr><h2 id="mac-常用快捷鍵">Mac 常用快捷鍵</h2><p>開始前，可以先看下 Apple 官方文件 (<a href="https://support.apple.com/zh-tw/HT201236" target="_blank" rel="noopener">Mac 鍵盤快速鍵</a>)，然後發現會的都是裡面有寫的 XD</p><h4 id="列出以下幾種-mac-常用的快捷鍵">列出以下幾種 Mac 常用的快捷鍵：</h4><table><thead><tr><th>說明</th><th>快捷鍵</th></tr></thead><tbody><tr><td>複製</td><td><code>(Cmd）鍵 ⌘</code> + <code>C</code></td></tr><tr><td>剪下</td><td><code>(Cmd）鍵 ⌘</code> + <code>X</code></td></tr><tr><td>貼上</td><td><code>(Cmd）鍵 ⌘</code> + <code>V</code></td></tr><tr><td>還原</td><td><code>(Cmd）鍵 ⌘</code> + <code>Z</code></td></tr><tr><td>取消還原</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>Z</code></td></tr><tr><td>選取從游標處至最左邊</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>向左鍵</code></td></tr><tr><td>選取從游標處至最右邊</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>向右鍵</code></td></tr><tr><td>從游標處跳至最左邊</td><td><code>(Cmd）鍵 ⌘</code> + <code>向左鍵</code></td></tr><tr><td>從游標處跳至最右邊</td><td><code>(Cmd）鍵 ⌘</code> + <code>向右鍵</code></td></tr><tr><td>從游標處跳至最上面</td><td><code>(Cmd）鍵 ⌘</code> + <code>向上鍵</code></td></tr><tr><td>從游標處跳至最下面</td><td><code>(Cmd）鍵 ⌘</code> + <code>向下鍵</code></td></tr><tr><td>切換桌面</td><td><code>Control（或 Ctrl）鍵 ⌃</code> + <code>向左鍵</code> 或 <code>向右鍵</code></td></tr></tbody></table><p>參考資料：<a href="https://support.apple.com/zh-tw/HT201236" target="_blank" rel="noopener">Mac 鍵盤快速鍵</a></p><hr><h2 id="chrome-常用快捷鍵">Chrome 常用快捷鍵</h2><table><thead><tr><th>說明</th><th>快捷鍵</th></tr></thead><tbody><tr><td>重新整理</td><td><code>(Cmd）鍵 ⌘</code> + <code>R</code></td></tr><tr><td>新增分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>T</code></td></tr><tr><td>關閉分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>W</code></td></tr><tr><td>真 · 全螢幕 (要先進入全螢幕)</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>F</code></td></tr><tr><td>搜尋</td><td><code>(Cmd）鍵 ⌘</code> + <code>F</code></td></tr><tr><td>放大</td><td><code>(Cmd）鍵 ⌘</code> + <code>+</code></td></tr><tr><td>縮小</td><td><code>(Cmd）鍵 ⌘</code> + <code>-</code></td></tr><tr><td>切換分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>數字鍵</code></td></tr><tr><td>切至最左邊分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>數字鍵 1</code></td></tr><tr><td>切至最右邊分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>數字鍵 9</code></td></tr><tr><td>顯示/隱藏書籤</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>B</code></td></tr><tr><td>開發者工具</td><td><code>鍵盤 F12</code></td></tr><tr><td>打開/切換檢查元素模式和瀏覽器窗口</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>C</code></td></tr></tbody></table><p>參考資料：<a href="https://developers.google.com/web/tools/chrome-devtools/shortcuts?hl=zh-tw" target="_blank" rel="noopener">Chrome 鍵盤快捷鍵參考</a></p><hr><h2 id="iterm2-常用快捷鍵與指令">iTerm2 常用快捷鍵與指令</h2><table><thead><tr><th>說明</th><th>快捷鍵</th></tr></thead><tbody><tr><td>開新分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>T</code></td></tr><tr><td>關閉分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>W</code></td></tr><tr><td>左右切換分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>向左鍵</code> 或 <code>向右鍵</code></td></tr><tr><td>跳到指定分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>數字鍵</code></td></tr><tr><td>清除視窗上所有訊 (可往上捲)</td><td><code>(Cmd）鍵 ⌘</code> + <code>R</code></td></tr><tr><td>清除視窗上所有訊 (往上捲找不到)</td><td><code>(Cmd）鍵 ⌘</code> + <code>K</code></td></tr><tr><td>當前分頁新增水平分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>D</code></td></tr><tr><td>當前分頁新增垂直分頁</td><td><code>(Cmd）鍵 ⌘</code> + <code>D</code></td></tr><tr><td>開啟當前路徑的資料夾</td><td><code>open .</code></td></tr><tr><td>開啟特定路徑的資料夾</td><td><code>open {path}</code> ，範例: <code>open ~/Documents</code></td></tr><tr><td>開啟當前路徑 VScode</td><td><code>code .</code></td></tr><tr><td>開啟指定路徑 VScode</td><td><code>code {path}</code> ，範例: <code>code ~/Documents</code></td></tr><tr><td>清除游標左邊所有訊息</td><td><code>Control（或 Ctrl）鍵 ⌃</code> + <code>U</code></td></tr><tr><td>清除游標左邊訊息一段</td><td><code>Control（或 Ctrl）鍵 ⌃</code> + <code>W</code></td></tr><tr><td>清除游標右邊所有訊息</td><td><code>Control（或 Ctrl）鍵 ⌃</code> + <code>K</code></td></tr></tbody></table><p><img src="https://i.imgur.com/v8jS3wH.gif" alt></p><h4 id="設定開啟分頁時預設路徑">設定開啟分頁時，預設路徑：</h4><p><img src="https://i.imgur.com/K47ffDb.png" alt></p><h4 id="隨意操作示意圖">隨意操作示意圖</h4><p><img src="https://i.imgur.com/hTyh57D.gif" alt></p><hr><h2 id="vscode-常用快捷鍵">VScode 常用快捷鍵</h2><table><thead><tr><th>說明</th><th>快捷鍵</th></tr></thead><tbody><tr><td>開新檔案</td><td><code>(Cmd）鍵 ⌘</code> + <code>N</code></td></tr><tr><td>關閉檔案</td><td><code>(Cmd）鍵 ⌘</code> + <code>W</code></td></tr><tr><td>快速搜尋檔案</td><td><code>(Cmd）鍵 ⌘</code> + <code>P</code></td></tr><tr><td>命令面板</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>P</code></td></tr><tr><td>搜尋檔案內文</td><td><code>(Cmd）鍵 ⌘</code> + <code>F</code></td></tr><tr><td>搜尋路徑下符合條件的內文</td><td><code>(Cmd）鍵 ⌘</code> + <code>Shift 鍵 ⇧</code> + <code>F</code></td></tr><tr><td>開/隱藏側邊欄</td><td><code>(Cmd）鍵 ⌘</code> + <code>B</code></td></tr><tr><td>開/隱藏面板</td><td><code>(Cmd）鍵 ⌘</code> + <code>J</code></td></tr><tr><td>放大</td><td><code>(Cmd）鍵 ⌘</code> + <code>+</code></td></tr><tr><td>縮小</td><td><code>(Cmd）鍵 ⌘</code> + <code>-</code></td></tr><tr><td>切割視窗</td><td><code>(Cmd）鍵 ⌘</code> + <code>\</code></td></tr></tbody></table><h4 id="同時選取符合條件的關鍵字-cmd鍵-d">同時選取符合條件的關鍵字： <code>(Cmd）鍵 ⌘</code> + <code>D</code></h4><p><img src="https://i.imgur.com/f6XtolL.gif" alt></p><h4 id="同時指定多行游標位置的方式-option或-alt鍵-shift-鍵-滑鼠左鍵">同時指定多行游標位置的方式： <code>Option（或 Alt）鍵 ⌥</code> + <code>Shift 鍵 ⇧</code> + <code>滑鼠左鍵</code></h4><p><img src="https://i.imgur.com/105Z3Wk.gif" alt></p><h4 id="當前路徑-vscode-再開一個新視窗">當前路徑 VScode 再開一個新視窗</h4><p>輸入「命令面板」快捷鍵，接著搜尋 dup 點「Duplicate Workspace in New Windows」<img src="https://i.imgur.com/U6ZXCRD.png" alt></p><h4 id="設定自動儲存">設定自動儲存</h4><p><img src="https://i.imgur.com/t4UtK0W.png" alt></p><h4 id="隨意操作示意圖">隨意操作示意圖</h4><p><img src="https://i.imgur.com/ZEHLPXp.gif" alt></p><hr><h2 id="小結">小結</h2><p>目前想到的快捷鍵如上，日後有想起或發現不錯的快捷鍵會再持續更新此篇，也歡迎在下方留言分享各種快捷鍵 :)</p><hr><p>鐵人賽文章連結：<a href="https://ithelp.ithome.com.tw/articles/10235273" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10235273</a><br>medium 文章連結：<a href="https://link.medium.com/BZq1ehbZD9" target="_blank" rel="noopener">https://link.medium.com/BZq1ehbZD9</a><br>本文同步發布於 <a href="https://riverye.com/2020/09/10/Day05-Mac%E3%80%81Chrome%E3%80%81iTerm2%E3%80%81Visual-Studio-Code-%E4%B8%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%8D%B5/">小菜的 Blog</a> <a href="https://riverye.com/">https://riverye.com/</a></p><p>備註：之後文章修改更新，以個人部落格為主</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;紀錄個人常用的 Mac 、 Chrome 、 iTerm2 、 &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual Studio
      
    
    </summary>
    
    
      <category term="鐵人賽" scheme="https://riverye.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
      <category term="12th鐵人賽" scheme="https://riverye.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
